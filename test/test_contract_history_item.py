# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from powerbot_client.models.contract_history_item import ContractHistoryItem

class TestContractHistoryItem(unittest.TestCase):
    """ContractHistoryItem unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ContractHistoryItem:
        """Test ContractHistoryItem
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContractHistoryItem`
        """
        model = ContractHistoryItem()
        if include_optional:
            return ContractHistoryItem(
                as_of = '2018-04-05T09:00Z',
                revision_no = 12,
                delivery_area = '',
                contract_id = '',
                vwap = 12.44,
                best_bid_price = 12.4,
                best_bid_quantity = 34.0,
                best_ask_price = 18.4,
                best_ask_quantity = 1.337,
                last_price = 1.337,
                last_quantity = 1.337,
                total_quantity = 1.337,
                revision_quantity = 1.337,
                auction_price = 1.337,
                high = 60.2,
                low = 60.2,
                signals = [
                    powerbot_client.models.signal.Signal(
                        id = 'etrm_signal_2018-04-05T09:13:77Z', 
                        source = 'ETRMSystem', 
                        received_at = '2018-04-05T09:14:17Z', 
                        updated_at = '2018-04-05T09:14:17Z', 
                        minutes_to_delivery = 56, 
                        revision = 56, 
                        delivery_start = '2018-04-05T09:14:17Z', 
                        delivery_end = '2018-04-05T09:14:17Z', 
                        delivery_areas = [
                            ''
                            ], 
                        portfolio_ids = [
                            ''
                            ], 
                        delivery_area = '', 
                        portfolio_id = '', 
                        tenant_id = '', 
                        deleted = True, 
                        active = True, 
                        position_short = 1.337, 
                        position_long = 1.337, 
                        locked = True, 
                        value = {"value1":"value1","value2":"value2"}, )
                    ],
                trades = [
                    powerbot_client.models.trade.Trade(
                        trade_id = '383234324234', 
                        state = 'ACTI', 
                        exchange = 'epex', 
                        delivery_area = '10YAT-APG------L', 
                        api_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        exec_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        buy = True, 
                        sell = False, 
                        buy_order_id = '6123942030', 
                        buy_delivery_area = '', 
                        buy_cl_order_id = '', 
                        buy_txt = '', 
                        buy_user_code = '', 
                        buy_member_id = '', 
                        buy_aggressor_indicator = 'Y', 
                        buy_portfolio_id = '', 
                        sell_order_id = '28492342354', 
                        sell_delivery_area = '10YAT-APG------L', 
                        sell_cl_order_id = '', 
                        sell_txt = '', 
                        sell_user_code = '', 
                        sell_member_id = '', 
                        sell_aggressor_indicator = 'Y', 
                        sell_portfolio_id = '', 
                        contract_id = '2342353242', 
                        contract_name = '17-18', 
                        delivery_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        delivery_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        price = 35.0, 
                        quantity = 5.0, 
                        prod = '', 
                        self_trade = True, 
                        pre_arranged = True, 
                        pre_arrange_type = '', 
                        buy_clearing_account_type = '', 
                        sell_clearing_account_type = '', 
                        buy_account_id = '', 
                        sell_account_id = '', 
                        location = '', )
                    ],
                internal_trades = [
                    powerbot_client.models.internal_trade.InternalTrade(
                        internal_trade_id = '', 
                        exchange = '', 
                        exec_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        api_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        buy_order_id = '6123942030', 
                        buy_cl_order_id = '', 
                        buy_txt = '', 
                        buy_aggressor_indicator = 'Y', 
                        buy_portfolio_id = '', 
                        buy_delivery_area = '10YAT-APG------L', 
                        sell_order_id = '28492342354', 
                        sell_cl_order_id = '', 
                        sell_txt = '', 
                        sell_aggressor_indicator = 'Y', 
                        sell_portfolio_id = '', 
                        sell_delivery_area = '10YAT-APG------L', 
                        contract_id = '2342353242', 
                        contract_name = '17-18', 
                        delivery_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        delivery_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        price = 35.0, 
                        quantity = 5.0, 
                        prod = '', )
                    ],
                orders = powerbot_client.models.orders.Orders(
                    contract_id = '', 
                    product = 'Intraday_Power_D', 
                    delivery_area = '', 
                    sequence_number = 56, 
                    revision_no = 56, 
                    delta = True, 
                    bid = [
                        powerbot_client.models.order_book_entry.OrderBookEntry(
                            order_id = '', 
                            delivery_area = '', 
                            contract_id = '', 
                            order_entry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            price = 1.337, 
                            quantity = 1.337, 
                            exe_restriction = '', 
                            type = '', 
                            own_order = True, )
                        ], 
                    ask = [
                        powerbot_client.models.order_book_entry.OrderBookEntry(
                            order_id = '', 
                            delivery_area = '', 
                            contract_id = '', 
                            order_entry_time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            price = 1.337, 
                            quantity = 1.337, 
                            exe_restriction = '', 
                            type = '', 
                            own_order = True, )
                        ], )
            )
        else:
            return ContractHistoryItem(
        )
        """

    def testContractHistoryItem(self):
        """Test ContractHistoryItem"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

openapi: 3.0.1
info:
  title: PowerBot - Webservice for algotrading
  x-audience: external-partner
  x-api-id: fbbbf314-0ac1-4675-9d0c-d0fdd0e3684d
  contact:
    name: PowerBot GmbH
    url: https://www.powerbot-trading.com/
    email: office@powerbot-trading.com
  description: |-
    # TERMS AND CONDITIONS
    The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence:
    1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange.
    2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use.
    3. The user is aware of limits imposed by the exchange.
    4. The user is solely liable for actions resulting from the use of PowerBot.


    # INTRODUCTION
    PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com

    ## Knowledge Base
    In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com

    ## Endpoints
    The PowerBot service is available at the following REST endpoints:

    | Instance      | Base URL for REST Endpoints                                      |
    |---------------|------------------------------------------------------------------|
    | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      |
    | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  |
    | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      |
    | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api |
    | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       |
    | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      |
    | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    |
    | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     |
    | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      |
    | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |

    Access to endpoints is secured via an API Key, which needs to be passed as an "api_key" header in each request.

     Notes on API Keys:
     * API keys are specific to Test, Staging or Production.
     * API keys are generated by the system administrator and need to be requested.

    ## How to generate API clients (libraries)
    This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).

    ## PowerBot Python client
    For Python, a ready-made client is also available on PyPI and can be downloaded locally via:

    ```shell
      pip install powerbot-client
    ```

    ## Errors
    The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:

    ```
    {
      "message": "... an error message ..."
    }
    ```

    ## Paging
    The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.

    ## Cross-Origin Resource Sharing
    This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).
    This allows cross-domain communication from the browser.
    All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.

    ## API Rate Limiting
    The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:

    ```
    {
      "message": "API rate limit exceeded"
    }
    ```
    Clients should ensure that they stay within the limit for concurrent API calls.



    ## Additional code samples
    Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)
  version: 2.16.1
  x-logo:
    url: https://resources.powerbot-trading.com/commons/powerbot_logo.png
servers:
  - url: https://staging.powerbot-trading.com/playground/epex/v2/api
security:
  - api_key_security: [ ]

tags:
  - name: Market
  - name: Contract
  - name: Orders
  - name: Trades
  - name: Signals
  - name: Report
  - name: Capacities
  - name: Algorithms
  - name: Portfolios
  - name: Tenants
  - name: Authentication
  - name: Logs
  - name: Subscriptions
  - name: Messages
  - name: Schema
  - name: Settings
  - name: Historic Data
  - name: Auctions
  - name: Auction Exchange
  - name: Auction Configuration
  - name: Auction Order
  - name: Auction Trade
  - name: Auction Settings
  - name: Statistics

paths:
  /tenants:
    get:
      tags:
        - Tenants
      summary: List tenants
      description: Use this method to retrieve a list of all tenants (companies) the
        API key has access to. If you want to retrieve a full list of all tenants
        in the system, you need to use the master-API-key.
      operationId: getTenants
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).get_tenants()
    post:
      tags:
        - Tenants
      summary: Create tenant
      description: |-
        Use this method to create a new tenant (company), which can later own a number of portfolios.
        In order to create a new tenant or modify them, you need to use the master-API-key which has been provided to you (other API keys can not create a tenant).
      operationId: addTenant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewTenant'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi, NewTenant, RiskManagementSettings, TradingArea, PositionLimit, CashLimit, OrderActionQuotaLimit

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).add_tenant(value=NewTenant(id=TENANT_ID,
                                                                   name=TENANT_NAME,
                                                                   risk_management=RiskManagementSettings(id=TENANT_ID,
                                                                                                          trading_areas=[TradingArea(exchange=EXCHANGE,
                                                                                                                                     delivery_area=DELIVERY_AREA)],
                                                                                                          position_limits=[PositionLimit(exchange=EXCHANGE,
                                                                                                                                         delivery_area=DELIVERY_AREA,
                                                                                                                                         min_netpos_limit=MIN_NETPOS,
                                                                                                                                         max_netpos_limit=MAX_NETPOS,
                                                                                                                                         abspos_limit=ABSPOS)],
                                                                                                          cash_limits=[CashLimit(direction="NEG",
                                                                                                                                 currency="EUR",
                                                                                                                                 limit=CASH_LIMIT)],
                                                                                                          order_action_quota_limit=[OrderActionQuotaLimit(exchange=EXCHANGE,
                                                                                                                                                    order_quota_limit=OMT_LIMIT)])))
  /tenant/{id}/risk-management:
    get:
      tags:
        - Tenants
      summary: Get tenant risk management settings
      description: Retrieves the risk management settings for a specific tenant.
      operationId: getTenantRiskManagement
      parameters:
        - name: id
          in: path
          description: id of the tenant (not equal to the tenant's name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskManagementSettings'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).get_tenant_risk_management(id=TENANT_ID)
    put:
      tags:
        - Tenants
      summary: Update tenant risk management settings
      description: |-
        Change the risk management settings for a specific tenant with this request. You need to use the master-API-key to perform this request.
      operationId: updateTenantRiskManagementSettings
      parameters:
        - name: id
          in: path
          description: id of the tenant (not equal to the tenant's name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskManagementSettings'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi, RiskManagementSettings, TradingArea, PositionLimit, CashLimit, OrderActionQuotaLimit

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).update_tenant_risk_management_settings(id=TENANT_ID,
                                                                               risk_management=RiskManagementSettings(id=TENANT_ID,
                                                                                                                      trading_areas=[
                                                                                                                          TradingArea(exchange=EXCHANGE,
                                                                                                                                      delivery_area=DELIVERY_AREA)],
                                                                                                                      position_limits=[
                                                                                                                          PositionLimit(exchange=EXCHANGE,
                                                                                                                                        delivery_area=DELIVERY_AREA,
                                                                                                                                        min_netpos_limit=MIN_NETPOS,
                                                                                                                                        max_netpos_limit=MAX_NETPOS,
                                                                                                                                        abspos_limit=ABSPOS)],
                                                                                                                      cash_limits=[CashLimit(direction="NEG",
                                                                                                                                             currency="EUR",
                                                                                                                                             limit=CASH_LIMIT)],
                                                                                                                      order_action_quota_limit=[OrderActionQuotaLimit(exchange=EXCHANGE,
                                                                                                                                                                order_quota_limit=OMT_LIMIT)]))

  /tenant/{id}:
    put:
      tags:
        - Tenants
      summary: Rename tenant
      description: Update the base data (name) of a tenant
      operationId: updateTenant
      parameters:
        - name: id
          in: path
          description: id of the tenant
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedTenant'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi, UpdatedTenant

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).update_tenant(id=TENANT_ID,
                                                     value=UpdatedTenant(name=NEW_NAME))
    delete:
      tags:
        - Tenants
      summary: Delete tenant
      description: Delete a tenant (company) from the system. A tenant can only be
        deleted if it has no portfolios. Only master-API-keys can delete tenants.
      operationId: deleteTenant
      parameters:
        - name: id
          in: path
          description: id of the tenant (not equal to the tenant's name)
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, TenantsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TenantsApi(client).delete_tenant(id=TENANT_ID)
  /portfolios:
    get:
      tags:
        - Portfolios
      summary: List portfolios
      description: Retrieve a list of all portfolios your API key has access to. When performing this request using a master API key, all portfolios of all tenants are listed without risk settings. To retrieve the risk settings please use `GET /portfolio/{id}/risk-management`.
      operationId: getPortfolios
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).get_portfolios()
    post:
      tags:
        - Portfolios
      summary: Create portfolio
      description: |-
        Create a new portfolio for a tenant (company). A portfolio can have access to several combinations of exchange and delivery area, but only to those the tenant has access to.

        The creation and modification of a portfolio is only possible when using the master-API-key or the tenant-master-API-key of the tenant which the portfolio belongs to.
        Portfolios which are not of regular type cannot interact with the auction module.
      operationId: addPortfolio
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPortfolio'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi, NewPortfolio, RiskManagementSettings, TradingArea, PositionLimit, CashLimit, OrderActionQuotaLimit

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).add_portfolio(value=NewPortfolio(id=PORTFOLIO_ID,
                                                                            name=PORTFOLIO_NAME,
                                                                            tenant_id=TENANT_ID,
                                                                            risk_management=RiskManagementSettings(
                                                                                id=PORTFOLIO_ID,
                                                                                trading_areas=[TradingArea(exchange=EXCHANGE,
                                                                                                           delivery_area=DELIVERY_AREA)],
                                                                                position_limits=[PositionLimit(exchange=EXCHANGE,
                                                                                                               delivery_area=DELIVERY_AREA,
                                                                                                               min_netpos_limit=MIN_NETPOS,
                                                                                                               max_netpos_limit=MAX_NETPOS,
                                                                                                               abspos_limit=ABSPOS)],
                                                                                cash_limits=[CashLimit(direction="NEG",
                                                                                                       currency="EUR",
                                                                                                       limit=CASH_LIMIT)],
                                                                                order_action_quota_limit=[OrderActionQuotaLimit(exchange=EXCHANGE,
                                                                                                                          order_quota_limit=OMT_LIMIT)])))

  /portfolios/activity:
    get:
      tags:
        - Portfolios
      summary: Statistics related to trading activity
      description: Gets the total count of orders added or modified at the exchange
        and the sum of trade volume in MWh for the time period specified.
        If a bucket size is specified, the time span will be segmented in buckets of that size
        and individual results for those time buckets will be provided in a list.
      operationId: getTradingActivityStatistics
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - name: from
          in: query
          description: start of the time period
          required: true
          schema:
            type: string
            format: date-time
        - name: to
          in: query
          description: end of the time period
          required: true
          schema:
            type: string
            format: date-time
        - name: time_series_bucket_size_seconds
          in: query
          description: bucket length in seconds, to aggregate statistics in
          schema:
            type: integer
            format: int64
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
              from powerbot_client import Configuration, ApiClient, PortfoliosApi

              client = ApiClient(Configuration(api_key={'api_key_security': API_KEY}, host=HOST_URL))

              result = PortfoliosApi(client).get_trading_activity_statistics(portfolio_id=[PORTFOLIO],
                                                                                 _from=TIME_SERIES_FROM,
                                                                                 to=TIME_SERIES_TO,
                                                                                 time_series_bucket_size_seconds=BUCKET_SIZE_SECONDS)

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnOrderTradingStatistics'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /portfolio/{id}/risk-management:
    get:
      tags:
        - Portfolios
      summary: Get portfolio risk management settings
      description: Retrieves the risk management settings for a specific portfolio.
      operationId: getPortfolioRiskManagementSettings
      parameters:
        - name: id
          in: path
          description: id of the portfolio (not equal to portfolio's name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskManagementSettings'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).get_portfolio_risk_management_settings(id=PORTFOLIO)
    put:
      tags:
        - Portfolios
      summary: Update portfolio risk management settings
      description: |-
        Change the risk management settings for a specific portfolio. You need to use the master-API-key or tenant-master-API-key to perform this operation.
      operationId: updatePortfolioRiskManagementSettings
      parameters:
        - name: id
          in: path
          description: id of the portfolio (not equal to the portfolio's name)
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskManagementSettings'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi, RiskManagementSettings, TradingArea, PositionLimit, CashLimit, OrderActionQuotaLimit

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).update_portfolio_risk_management_settings(id=PORTFOLIO,
                                                                                     value=RiskManagementSettings(
                                                                                         id=PORTFOLIO_ID,
                                                                                         trading_areas=[TradingArea(exchange=EXCHANGE,
                                                                                                                    delivery_area=DELIVERY_AREA)],
                                                                                         position_limits=[PositionLimit(exchange=EXCHANGE,
                                                                                                                        delivery_area=DELIVERY_AREA,
                                                                                                                        min_netpos_limit=MIN_NETPOS,
                                                                                                                        max_netpos_limit=MAX_NETPOS,
                                                                                                                        abspos_limit=ABSPOS)],
                                                                                         cash_limits=[CashLimit(direction="NEG",
                                                                                                                currency="EUR",
                                                                                                                limit=CASH_LIMIT)],
                                                                                         order_action_quota_limit=[OrderActionQuotaLimit(exchange=EXCHANGE,
                                                                                                                                   order_quota_limit=OMT_LIMIT)]))))

  /portfolio/{id}/status:
    get:
      tags:
        - Portfolios
      summary: Get current state of the portfolio
      description: |-
        Returns information about the current order-counts for rolling-windows defined in order-count-limits in this portfolio and its tenant.
        The counts contain all orders placed or modified by this portfolio.
      operationId: getPortfolioStatus
      parameters:
        - name: id
          in: path
          description: ID of the portfolio (not equal to portfolio's name)
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PortfolioStatus'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = portfolios_api(client).get_portfolio_status(id=portfolio)
  /portfolio/{id}:
    put:
      tags:
        - Portfolios
      summary: Update portfolio
      description: Update the configuration of a portfolio
      operationId: updatePortfolio
      parameters:
        - name: id
          in: path
          description: id of the portfolio
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedPortfolio'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi, UpdatedPortfolio

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).update_portfolio(id=PORTFOLIO,
                                                            value=UpdatedPortfolio(name=PORTFOLIO_NAME))
    delete:
      tags:
        - Portfolios
      summary: Delete portfolio
      description: Delete a portfolio from the system. **Heads up** - In production, a portfolio can only be deleted if there are no trades executed in the last 7 days. This 7 day restriction does not apply to the staging environment. Trades from deleted portfolios are automatically moved to the 'PDEF' portfolio.
      operationId: deletePortfolio
      parameters:
        - name: id
          in: path
          description: id of the portfolio (not equal to the portfolio's name)
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, PortfoliosApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = PortfoliosApi(client).delete_portfolio(id=PORTFOLIO)
  /api-keys:
    get:
      tags:
        - Authentication
      summary: List API keys
      description: |-
        You can use this method to list the name of all API keys that where created and you have access to.

        Please note that this method will return only the name, description and type of the API keys, not the key itself (which are encrypted and can't be restored)
      operationId: getApiKeys
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiKeyDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, AuthenticationApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AuthenticationApi(client).get_api_keys()
    post:
      tags:
        - Authentication
      summary: Create API key
      description: |-
        Use this method to generate a new API key for access to the system, e.g. for your trading algorithms, dashboard users or deal capture system. Requires that you are authenticated with your master-API-key or a tenant-master-API-key. Please note that you need to create an API key when getting started, as master-API-keys cannot be used for trading.

        You can create different types of API keys with this method
        - A standard-API-key needs to have a name and a type and belong to a tenant. In addition, an API key **can** be limited to a number of portfolios. Also you can control if the API key is allowed to actively trade, read the order book or to create new signals.
        - Tenant-master-API-key is an administrator API key you can give to a tenant, which can use it to create own portfolios and standard-API-keys.
        - Scheduling-API-key is a special key for deal capture and scheduling, which can retrieve all trades of all tenants and generate reports, but nothing else. The txt-field in orders and trades is hidden from this type of API key.

        If you are creating API keys using the master-API-key, you need to confirm this action using your exchange user password due to security reasons (you need to be in possession of the master-API-key and the exchange user password to create a key to trade).
      operationId: addApiKey
      parameters:
        - name: X-Exchange-Password
          in: header
          description: Password for the exchange user the server is using to connect
            to the exchange - **ONLY REQUIRED IN PRODUCTION and if you are connected
            with a master-API-key**
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewApiKey'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKey'
        409:
          description: An API key with the provided name already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, AuthenticationApi, NewApiKey

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # On Staging
            result = AuthenticationApi(client).add_api_key(value=NewApiKey(name=KEY_NAME,
                                                                           description=DESCRIPTION,
                                                                           type="STANDARD_API_KEY",
                                                                           tenant_id=TENANT_ID,
                                                                           portfolio_ids=[PORTFOLIO],
                                                                           can_read=True,
                                                                           can_trade=True,
                                                                           can_signal=True))

            # On Prod/ Backup
            result = AuthenticationApi(client).add_api_key(value=NewApiKey(name=KEY_NAME,
                                                                           description=DESCRIPTION,
                                                                           type="STANDARD_API_KEY",
                                                                           tenant_id=TENANT_ID,
                                                                           portfolio_ids=[PORTFOLIO],
                                                                           can_read=True,
                                                                           can_trade=True,
                                                                           can_signal=True),
                                                           x_exchange_password=EXCHANGE_PASSWORD)
  /api-key/{name}:
    put:
      tags:
        - Authentication
      summary: Rename API key
      description: Update the base data (name) of an API key
      operationId: updateApiKey
      parameters:
        - name: name
          in: path
          description: name of the API key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatedApiKey'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Authentication
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, AuthenticationApi, UpdatedApiKey

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AuthenticationApi(client).update_api_key(name=KEY_NAME,
                                                              value=UpdatedApiKey(description=NEW_NAME))
    delete:
      tags:
        - Authentication
      summary: Delete API key
      description: Use this method to delete an API key with a given name. You need
        to use the master-API-key or the tenant-master-API-key to call this method.
      operationId: deleteApiKey
      parameters:
        - name: name
          in: path
          description: Name of API key
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        404:
          description: No API key for the given name was found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, AuthenticationApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AuthenticationApi(client).delete_api_key(name=KEY_NAME)
  /api-key/{name}/portfolios:
    put:
      tags:
        - Authentication
      summary: Change API key portfolio access
      description: |-
        Allows you to change the portfolios to which the API key has access to (you need to use the master-API-key or tenant-master-API-key to call this method).

        **Heads up** - If the list of portfolios is empty, the API key has access to all portfolios to which the tenant has access to (portfolios are inherited).
      operationId: updateApiKeyPortfolios
      parameters:
        - name: name
          in: path
          description: Name of API key
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyPortfolioUpdate'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: portfolioAccessChange
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AuthenticationApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            AuthenticationApi(client).update_api_key_portfolios(
                name=API_KEY_NAME,
                portfolio_access_change={
                    "portfolio_ids": ["P1", "P2"],
                    "inherit_tenant_portfolios": False,
                },
            )

  /api-key:
    get:
      tags:
        - Authentication
      summary: Get API key settings
      description: Returns the base data, the available portfolios and the risk settings
        for the API key you are using.
      operationId: getCurrentApiKeyPortfolios
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, AuthenticationApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AuthenticationApi(client).get_current_api_key_portfolios()
  /logs:
    get:
      tags:
        - Logs
      summary: Get system log entries
      description: Retrieves log entries which you have submitted earlier with "POST
        /logs". Logs can be retrieved for a set (array) of portfolios and categories.
        The query can be filtered by minimum severity and a time interval. Please
        note that this feature uses pagination.
      operationId: getLogs
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: severity_at_least
          in: query
          schema:
            $ref: '#/components/schemas/Severity'
        - name: category
          in: query
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: received_from
          in: query
          description: from timestamp is 'inclusive' (i.e. >=), use UTC time zone
          schema:
            type: string
            format: date-time
        - name: received_to
          in: query
          description: to timestamp is 'exclusive' (i.e. <), use UTC time zone
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of log entries
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEntry'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, LogsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = LogsApi(client).get_logs(portfolio_id=[PORTFOLIO])
    post:
      tags:
        - Logs
      summary: Add system log entry
      description: |-
        We provide a logging system to record internal events. You can use this method to add a log entry, which is shown in the dashboard and can also be retrieved later.

        There are three different types of logs (system, tenant, portfolio), these logs can be posted from different API key types as listed below:

        - scheduling-API-key without tenant -> system logs (omit portfolio_id)
        - scheduling-API-key with tenant -> tenant logs (omit portfolio_id
        - standard-API-key -> portfolio logs (specify portfolio_id) AND tenant logs (omit portfolio_id)
        - tenant-master-API-key -> cannot submit any logs
        - master-API-key -> cannot submit any logs

        A log entry belongs to a freely chosen category and has a defined severity as well as a timestamp (UTC) value.
      operationId: addLogEntry
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEntry'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, LogsApi, LogEntry

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = LogsApi(client).add_log_entry(value=LogEntry(id=ENTRY_ID,
                                                                  received=TIME_RECEIVED,
                                                                  text=TEXT,
                                                                  as_of=AS_OF,
                                                                  category="Trading-Algorithm",
                                                                  severity="MED",
                                                                  portfolio_id=PORTFOLIO))
  /audit-logs:
    get:
      tags:
        - Logs
      summary: Get audit-logs
      description: Receive audit log entries that have been generated by the system. Only the master-api-key and tenant-master api-key is allowed to access audit-logs. When no parameters are specified, all audit logs from 24 hours ago until now will be retrieved.
      operationId: getAuditLogs
      parameters:
        - name: api_key_name
          in: query
          description: The name of the api-key
          style: form
          schema:
            type: string
        - name: ip_address
          in: query
          description: The ip address
          style: form
          schema:
            type: string
        - name: tenant_id
          in: query
          style: form
          schema:
            type: string
        - $ref: '#/components/parameters/PortfolioId'
        - name: object_name
          in: query
          style: form
          description: filter by object types
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: received_from
          in: query
          description: from timestamp is 'inclusive' (i.e. >=), use UTC timezone, default to 24 hours ago
          schema:
            type: string
            format: date-time
        - name: received_to
          in: query
          description: to timestamp is 'exclusive' (i.e. <), use UTC timezone, defaults to now
          schema:
            type: string
            format: date-time
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of log entries
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuditLogEntry'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, LogsApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = LogsApi(client).get_audit_logs()
  /trading-signals:
    put:
      tags:
        - Signals
      summary: Save trading signals
      description: |-
        This endpoint allows you to add or update trading signals. A trading signal can consist of multiple time slices, each with its
        individual validity period and set of parameters. The validity of a time slice is defined by an offset (in minutes) relative
        to the respective delivery start. For each trading signal only one time slice can be active at any given point in time.
        For a time slice to be considered active, the current time to delivery start must have passed the offset configuration. Moreover,
        only the time slice closest to the current time takes effect. For instance, suppose a trading signal has two time slices with
        their respective offsets set to 45 and 75 minutes relative to delivery start. Assuming that there are still 60 minutes
        until delivery start, then the active time slice would be one with an offset of 75 minutes. Eventually, as the time to delivery
        start passes the 45 minute mark the active time slice is switched.

        Sending multiple time slices with the same offset is not allowed and will return an error message for each time slice affected. When sending multiple
        time slices, you can use the `delete_related` parameter to remove existing related time slices. Related time slices in this
        context are defined as those which have the same source, area, portfolio ID and delivery period.
        Only unlocked slices will be deleted when set. Updating the parameters of an existing time
        slice always completely override existing data.
      operationId: saveTradingSignals
      parameters:
        - $ref: '#/components/parameters/IgnoreLock'
        - name: delete_related
          in: query
          description:
            Set this to `true`, if related slices, meaning slices with the same source, delivery area,
            portfolio ID and delivery period should be overridden and replaced by the newly sent items.
          schema:
            type: boolean
            default: false
        - name: algorithm_id
          in: query
          description: The algorithm associated with the posted signals. When set, the parameters of
            the signals will be validated against the schema of the algorithm.
          schema:
            type: string
        - name: disable_history
          in: query
          schema:
            type: boolean
            default: false
          description: |-
            Setting this value to true disables the persistence and historization feature for
            signals, meaning that only the latest revisions of updated signals will be stored. We
            strongly encourage you to enable this if you plan on submitting more than a few dozen
            revisions per signal source, as it improves performance of subsequent requests that use
            signals significantly.
      requestBody:
        description: Signal payload
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SignalEntry'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalEntryResponse'
        409:
          description: Concurrent access to the same signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi, SignalEntry, SignalTimeSlice
            from datetime import datetime

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # example: calculate the current offset to DELIVERY_START
            # DELIVERY_START as string, e.g. "2023-01-01T10:00:00Z"
            MINUTES_TO_DELIVERY = int((datetime.strptime(DELIVERY_START, "%Y-%m-%dT%H:%M:%SZ") - datetime.utcnow()).total_seconds() / 60)

            signal = SignalEntry(
              source=SIGNAL_SOURCE,
              delivery_area=DELIVERY_AREA,
              portfolio_id=PORTFOLIO_ID,
              delivery_start=DELIVERY_START,  # as string, e.g. "2023-01-01T10:00:00Z"
              delivery_end=DELIVERY_END,  # as string, e.g. "2023-01-01T11:00:00Z"
              time_slices=[
                TimeSliceEntry(
                  minutes_to_delivery=MINUTES_TO_DELIVERY,
                  locked=False,
                  parameters={
                    "signal_value_1": 10,
                    "signal_value_2": 5.5,
                    "signal_value_3": "test",
                    "signal_value_4": True,
                    "position_long": 9.4,
                    "position_short": 0
                  }
                )
             ]
            )
            result = SignalsApi(client).save_trading_signals(signal_entry=[signal])
    get:
      tags:
        - Signals
      summary: Find trading signals
      description:
        Retrieves trading signals based on the given filter criteria. This endpoint also provides
        historic signal data when the `include_historic` parameter is set to true.
        The response object will contain the list of all unique sources and the actual signals,
        grouped by their source, delivery area, portfolio ID and delivery period. Signals
        will be sorted in ascending order by the aforementioned parameters — time slices are in
        descending order based on their minutes to delivery. Note that you have to either specify
        'delivery_start' and 'delivery_end' or 'delivery_from' and 'delivery_to'. The maximum timespan
        is limited to 48 hours.
      operationId: findTradingSignals
      parameters:
        - $ref: '#/components/parameters/TradingSignalSource'
        - $ref: '#/components/parameters/TradingSignalDeliveryArea'
        - $ref: '#/components/parameters/TradingSignalPortfolioId'
        - $ref: '#/components/parameters/TradingSignalDeliveryStart'
        - $ref: '#/components/parameters/TradingSignalDeliveryEnd'
        - $ref: '#/components/parameters/TradingSignalDeliveryFrom'
        - $ref: '#/components/parameters/TradingSignalDeliveryTo'
        - $ref: '#/components/parameters/TradingSignalMinutesToDeliveryGte'
        - $ref: '#/components/parameters/TradingSignalMinutesToDeliveryLte'
        - $ref: '#/components/parameters/SignalReceivedFrom'
        - $ref: '#/components/parameters/SignalReceivedTo'
        - $ref: '#/components/parameters/SignalRevisionFrom'
        - $ref: '#/components/parameters/SignalRevisionTo'
        - name: offset
          in: query
          schema:
            type: integer
            format: int32
            default: 0
            minimum: 0
          description: Offset when loading a list of items.
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            default: 150
            minimum: 1
            maximum: 150
          description: Limits the number of loaded items.
        - name: include_historic
          in: query
          description:
            Setting this to `true` will also return old (overwritten) signal revisions.
            Cannot be combined with `active_only=true`.
          schema:
            type: boolean
            default: false
        - $ref: '#/components/parameters/TradingSignalIncludeDeleted'
        - name: active_only
          in: query
          description:
            Filter for only currently active time slices. Cannot be combined with `include_historic=true`.
          schema:
            type: boolean
            default: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignalSearchResult'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = SignalsApi(client).find_trading_signals(
              delivery_area=DELIVERY_AREA,
              portfolio_id=PORTFOLIO_ID
            )
  /trading-signals/sources:
    get:
      tags:
        - Signals
      summary: Get sources and durations
      operationId: getSourcesDurations
      description:
        Retrieves all unique sources and durations of a trading signals delivery period. Note that you have
        to either specify 'delivery_start' and 'delivery_end' or 'delivery_from' and 'delivery_to'.
        The maximum timespan is limited to 48 hours.
      parameters:
        - $ref: '#/components/parameters/TradingSignalDeliveryArea'
        - $ref: '#/components/parameters/TradingSignalPortfolioId'
        - $ref: '#/components/parameters/SignalDeliveryStart'
        - $ref: '#/components/parameters/SignalDeliveryEnd'
        - $ref: '#/components/parameters/SignalDeliveryFrom'
        - $ref: '#/components/parameters/SignalDeliveryTo'
        - $ref: '#/components/parameters/TradingSignalMinutesToDeliveryGte'
        - $ref: '#/components/parameters/TradingSignalMinutesToDeliveryLte'
        - $ref: '#/components/parameters/SignalReceivedFrom'
        - $ref: '#/components/parameters/SignalReceivedTo'
        - $ref: '#/components/parameters/SignalRevisionFrom'
        - $ref: '#/components/parameters/SignalRevisionTo'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SignalSourceDurations'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SignalsApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = SignalsApi(client).get_sources_durations(delivery_area=DELIVERY_AREA,
                                                                portfolio_id=PORTFOLIO_ID,
                                                                delivery_from=DELIVERY_FROM,
                                                                delivery_to=DELIVERY_TO)

  /trading-signal/{source}/{delivery_area}/{portfolio_id}/{delivery_start}/{delivery_end}:
    delete:
      tags:
        - Signals
      summary: Delete a trading signal
      operationId: deleteTradingSignal
      description:
        Delete a trading signal with all of its time slices, meaning all signals which have the same
        source, delivery area, portfolio ID and delivery period. Deletion will not increase the
        revision of a time slice.
      parameters:
        - $ref: '#/components/parameters/SignalSourceInPath'
        - $ref: '#/components/parameters/SignalDeliveryAreaInPath'
        - $ref: '#/components/parameters/SignalPortfolioIdInPath'
        - $ref: '#/components/parameters/SignalDeliveryStartInPath'
        - $ref: '#/components/parameters/SignalDeliveryEndInPath'
      responses:
        204:
          description: Success
          content: { }
        404:
          description: No such signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Concurrent access to the same signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            SignalsApi(client).delete_trading_signal(
              source=SIGNAL_SOURCE,
              delivery_area=DELIVERY_AREA,
              portfolio_id=PORTFOLIO_ID,
              delivery_start=DELIVERY_START,  # as string, e.g. "2023-01-01T10:00:00Z"
              delivery_end=DELIVERY_END  # as string, e.g. "2023-01-01T10:00:00Z"
            )
  /trading-signal/{source}/{delivery_area}/{portfolio_id}/{delivery_start}/{delivery_end}/{minutes_to_delivery}:
    delete:
      tags:
        - Signals
      summary: Delete a time slice
      operationId: deleteTimeSlice
      description: Deletes a single time slice of a trading signal. Will not increase the
        revision of a time slice.
      parameters:
        - $ref: '#/components/parameters/SignalSourceInPath'
        - $ref: '#/components/parameters/SignalDeliveryAreaInPath'
        - $ref: '#/components/parameters/SignalPortfolioIdInPath'
        - $ref: '#/components/parameters/SignalDeliveryStartInPath'
        - $ref: '#/components/parameters/SignalDeliveryEndInPath'
        - $ref: '#/components/parameters/SignalMinutesToDelivery'
      responses:
        204:
          description: Success
          content: { }
        404:
          description: No such signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Concurrent access to the same signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            SignalsApi(client).delete_time_slice(
              source=SIGNAL_SOURCE,
              delivery_area=DELIVERY_AREA,
              portfolio_id=PORTFOLIO_ID,
              delivery_start=DELIVERY_START,  # as string, e.g. "2023-01-01T10:00:00Z"
              delivery_end=DELIVERY_END,  # as string, e.g. "2023-01-01T11:00:00Z"
              minutes_to_delivery=MINUTES_TO_DELIVERY
            )
  /signals:
    get:
      deprecated: true
      tags:
        - Signals
      summary: List signals
      description: DEPRECATED. Signals are replaced by Trading Signals. Allows you to retrieve signals you have previously sent to the system.
      operationId: getSignals
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/SignalReceivedFrom'
        - $ref: '#/components/parameters/SignalReceivedTo'
        - name: delivery_area
          in: query
          description: filter by delivery area
          schema:
            type: string
        - $ref: '#/components/parameters/SignalDeliveryStart'
        - $ref: '#/components/parameters/SignalDeliveryEnd'
        - $ref: '#/components/parameters/SignalDeliveryFrom'
        - $ref: '#/components/parameters/SignalDeliveryTo'
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of signals
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = SignalsApi(client).get_signals(portfolio_id=[PORTFOLIO])
    post:
      deprecated: true
      tags:
        - Signals
      summary: Add signals
      description: |-
        DEPRECATED. Signals are replaced by Trading Signals. Any request to this endpoint will also add a trading signal with a offset from now until delivery start.
        Allows you to send trading signals to the system, e.g. positions, fundamental data, weather data or outputs of an optimization software. This data is then aligned to contracts at the market and delivered with the orderbook.
        This way, trading signals are automatically archived for ex-post analysis and algorithms do not need to import data themselves. In addition, signals are displayed in the dashboard.

        This methods can receive a collection of signals at once and each signal has a freely defined source (e.g. ETRM_system).

        Note that it is not possible to post signals for a defined contract.
        All contracts which have the specified "delivery_start" and "delivery_end" field will receive the signal (e.g. XBID and local contracts), limited to the specified delivery areas and portfolios.

        A signal can contain EITHER a position_long and position_short (the MWs to be traded, both need to be equal or greater than zero) OR a freely defined JSON object containing key/value pairs, but not both at once.

        **Heads up** The "source" of a signal containing position_long and position_short will always be "POSITION", no matter what is defined in the request body.

        * "position_long" indicates the surplus in MW that should or can be sold at the market (equal or greater than zero)

        * "position_short" indicates the deficiency in MW that should or can be bought at the market (equal or greater than zero)

        * "value" should contain the freely defined JSON object with key/value pairs. Please be aware that a signal-key for each contract is unique and data is overwritten, if sent from multiple sources.
      operationId: updateSignals
      parameters:
        - $ref: '#/components/parameters/IgnoreLock'
      requestBody:
        description: Signals payload
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/BulkSignal'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                description: For each submitted signal a response will be generated
                items:
                  $ref: '#/components/schemas/BulkSignalResponse'
        409:
          description: Concurrent access to the same signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi, BulkSignal

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Create Signal Object with pos_long & pos_short
            signal_1 = BulkSignal(
                source=SOURCE,
                portfolio_ids=[PORTFOLIO],
                delivery_areas=[DELIVERY_AREA],
                delivery_start=DELIVERY_START,
                delivery_end=DELIVERY_END,
                position_long=POS_LONG,
                position_short=POS_SHORT
            )

            # Create Signal Object with custom values
            signal_2 = BulkSignal(
                source=SOURCE,
                portfolio_ids=[PORTFOLIO],
                delivery_areas=[DELIVERY_AREA],
                delivery_start=DELIVERY_START,
                delivery_end=DELIVERY_END,
                value={
                  "signal_value_1": signal_value_1,
                  "signal_value_2": signal_value_2
                }
            )

            # Send to Market
            response  = SignalsApi(client).update_signals([signal_1, signal_2])
  /signals/history:
    get:
      deprecated: true
      tags:
        - Signals
      summary: List signals history
      description: DEPRECATED. Signals are replaced by Trading Signals. Allows you to retrieve the signal history.
      operationId: getSignalsHistory
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/SignalReceivedFrom'
        - $ref: '#/components/parameters/SignalReceivedTo'
        - name: delivery_area
          in: query
          description: filter by delivery area
          schema:
            type: string
        - $ref: '#/components/parameters/SignalDeliveryStart'
        - $ref: '#/components/parameters/SignalDeliveryEnd'
        - $ref: '#/components/parameters/SignalDeliveryFrom'
        - $ref: '#/components/parameters/SignalDeliveryTo'
        - name: source
          in: query
          description: filter by signal source
          schema:
            type: string
        - name: revision_from
          in: query
          description: limit to revisions greater or equal to the given value
          schema:
            type: integer
            format: int32
        - name: revision_to
          in: query
          description: limit to revisions greater or equal to the given value
          schema:
            type: integer
            format: int32
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of signals
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /signals/{source}/{delivery_start}/{delivery_end}:
    delete:
      deprecated: true
      tags:
        - Signals
      summary: Delete signals
      description:
        DEPRECATED. Signals are replaced by Trading Signals.
        Allows you to delete signals. By setting the optional delivery_areas
        and/or portfolio_ids parameters, you can delete signals for selected cases
        only. Without specifying these parameters, the signal is removed completely.
        **Heads up** The "source" of a signal containing position_long and position_short is always "POSITION".
      operationId: deleteSignals
      parameters:
        - name: source
          in: path
          required: true
          schema:
            type: string
        - name: delivery_start
          in: path
          required: true
          schema:
            type: string
            format: date-time
        - name: delivery_end
          in: path
          required: true
          schema:
            type: string
            format: date-time
        - name: delivery_areas
          in: query
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - $ref: '#/components/parameters/PortfolioId'
        - name: exact
          in: query
          style: form
          explode: false
          description: only delete signals matching `delivery_start` and `delivery_end` exactly
          schema:
            type: boolean
            default: false
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, SignalsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            results = SignalsApi(client).delete_signals(source=SOURCE,
                                                        delivery_start=DELIVERY_START,
                                                        delivery_end=DELIVERY_END)
  /internal-trades:
    get:
      tags:
        - Trades
      summary: List internal trades
      description: |-
        List the internal trades you have carried out. Internal trades occur when the server detects a cross-trade between two of your orders and the option "internal trading" in market options is activated (either "default_yes" or "default_no").

        The server checks for cross-trades before an order is sent to the market. If the order matches with one of your orders at the market, this order is (partially) taken from the market and the server registers an internal trade, for which an internal_trade_id is created.

        It depends on the field "internal trading" being true for the orders involved and the setting internal_trading in market options not being set to inactive, if the server detects cross-trades.

        As with GET /trades, this method allows you to filter for a wide range of parameters and uses pagination. Please be aware that you may see only one leg of the internal trade, if the other leg belongs to another tenant or portfolio.
      operationId: getInternalTrades
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: internal_trade_id
          in: query
          description: Filters request to only show the internal trade with this id
            (i.e. shows a single internal trade or none)
          schema:
            type: string
        - name: contract_id
          in: query
          description: Show only those trades related to a specific contract
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: from_execution_time
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_execution_time
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: from_api_timestamp
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_api_timestamp
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: delivery_within_start
          in: query
          schema:
            type: string
            format: date-time
        - name: delivery_within_end
          in: query
          schema:
            type: string
            format: date-time
        - name: delivery_area
          in: query
          description: The delivery area.
          schema:
            type: string
        - name: sort_by
          in: query
          description: Sorts by the given field and order. Separate multiple sorting
            options with a comma (",")
          schema:
            type: string
            default: api_timestamp DESC
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of trades
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InternalTrade'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, TradesApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TradesApi(client).get_internal_trades(portfolio_id=[PORTFOLIO])
    post:
      tags:
        - Trades
      summary: Add internal trade
      description: This method allows you to manually register an internal trade between
        two portfolios. Internal trades are usually created by the system to prevent
        cross-trades, but this method allows you to register them manually.
      operationId: addInternalTrade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewInternalTrade'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalTrade'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: NewInternalTrade
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, TradesApi, NewInternalTrade

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TradesApi(client).add_internal_trade(new_internal_trade=NewInternalTrade(exchange=EXCHANGE,
                                                                                              delivery_start=DELIVERY_START,
                                                                                              delivery_end=DELIVERY_END,
                                                                                              exec_time=EXEC_TIME,
                                                                                              buy_delivery_area=DELIVERY_AREA,
                                                                                              buy_txt=BUY_TEXT,
                                                                                              buy_portfolio_id=PORTFOLIO,
                                                                                              sell_delivery_area=DELIVERY_AREA,
                                                                                              sell_txt=SELL_TEXT,
                                                                                              sell_portfolio_id=PORTFOLIO,
                                                                                              contract_id=CONTRACT_ID,
                                                                                              price=PRICE,
                                                                                              quantity=QUANTITY))
  /trades:
    get:
      tags:
        - Trades
      summary: List external trades
      description: |-
        Allows you to retrieve the trades (deals) you have executed at the exchange. Each trade at the exchange consists of a buy and sell leg (based on the buy and sell order that were involved in the trade), whereby usually only one leg belongs to you and is therefore visible. In case of a cros-trade, both legs are visible.

        This method provides a wide range of filtering options (array of portfolios, trade_id, order_id, txt etc). Please note that this method uses pagination. To fetch trades executed in a given time window, please use from_execution_time and to_execution_time (UTC), not api_timestamp (which indicates the time the server has received the trade confirmation, which can be delayed and might be updated).

        Please be aware that some exchange systems may report executed trades slightly delayed. If you would like to know in real time if you have made a trade or not, we recommend to rely on the execution status of orders instead of trades or to use the NetPos attribute.

        The option "active_only" (default yes) filters for trades that are market active by the exchange system, meaning no recalled or cancelled trades are delivered. The filter "txt" allows you to filter for trades that involve an order with a custom text in the txt attribute.
      operationId: getTrades
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: trade_id
          in: query
          description: Filters request to only show the trade with this trade_id (shows
            a single trade or none)
          schema:
            type: string
        - name: ordId
          in: query
          description: Limit the trades to those which are related to a particular order_id
          schema:
            type: string
            format: int64
        - name: active_only
          in: query
          description: Show only those trades which are active (no rejected, recalled
            or cancelled trades)
          schema:
            type: boolean
            default: true
        - name: clOrdrId
          in: query
          description: Show only those trades related to orders with a specific 'client
            order id' (something like 'your reference' which you can submit) together
            with an order
          schema:
            type: string
        - name: txt
          in: query
          description: Show only those trades related to orders with a specific 'custom
            text'. Similar to the clOrdrId, you can submit a string inside the 'txt'
            attribute of an order which helps you to identify trades originating from
            a specific order at a later point in time
          schema:
            type: string
        - name: contract_id
          in: query
          description: Show only those trades related to a specific contract
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: from_api_timestamp
          in: query
          description: from timestamp when system has received the trade; from timestamp
            is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_api_timestamp
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: delivery_within_start
          in: query
          description: can only be used together with delivery_within_end
          schema:
            type: string
            format: date-time
        - name: delivery_within_end
          in: query
          description: can only be used together with delivery_within_start
          schema:
            type: string
            format: date-time
        - name: delivery_area
          in: query
          description: The delivery area.
          schema:
            type: string
        - name: user_code
          in: query
          description: the exchange's user code
          schema:
            type: string
        - name: from_execution_time
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_execution_time
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: sort_by
          in: query
          description: Sorts by the given field and order. Separate multiple sorting
            options with a comma (",")
          schema:
            type: string
            default: api_timestamp DESC
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of trades
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, TradesApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TradesApi(client).get_trades(portfolio_id=[PORTFOLIO])
  /trade/{trade_id}:
    delete:
      tags:
        - Trades
      summary: Recall external trade
      description: |-
        Attempts to recall a trade. Note that this may fail depending on the conditions set by the market operations. Check the trade's state after attempting to recall a trade.

        Please be aware of the exchange market rules on trade recall. Usually, trade recalls are limited to a short time frame and are subject to high fees.
      operationId: recallTrade
      parameters:
        - name: trade_id
          in: path
          description: The unique trade_id of the trade you would like to recall
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success, returns the list of affected trades
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Trade'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, TradesApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = TradesApi(client).recall_trade(trade_id=TRADE_ID)
  /report/{delivery_area}:
    get:
      tags:
        - Report
      summary: Create JSON trading report
      description: |-
        Creates a detailed trading report for a delivery area and a given delivery period, which contains all relevant information.

        As the generation of the report requires a lot of calculations, please use wisely. The time period you can request is limited to 48 hours at once going back a maximum of 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will therefore not show up, if you request data from more than one portfolio. Optionally, the report can include the trades for the portfolio(s) that have a delivery period within the report period. In addition, the report can use filters for 'clOrdrId' and 'txt', which means that only trades for which the filter is valid are included in the report.
      operationId: getReportForPeriod
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: delivery_day_from
          in: query
          description: The day the report starts (example "2018-10-23")
          required: true
          schema:
            type: string
            format: date
        - name: delivery_day_to
          in: query
          description: The day the report ends (example "2018-10-30")
          required: true
          schema:
            type: string
            format: date
        - name: delivery_day_from_starting_hour
          in: query
          description: The starting hour of the report (0 = midnight)
          schema:
            maximum: 23
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: delivery_day_to_ending_hour
          in: query
          description: The ending hour of the report (0 = midnight)
          schema:
            maximum: 23
            minimum: 0
            type: integer
            format: int32
            default: 0
        - name: clOrdrId
          in: query
          description: Use only trades in the calculation of the report, which are related
            to orders with a specific 'client order id' (something like 'your reference'
            which you can submit) together with an order
          schema:
            type: string
        - name: txt
          in: query
          description: Use only trades in the calculation of the report, which are related
            to orders with a specific 'custom text'. Similar to the clOrdrId, you can
            submit a string inside the 'txt' attribute of an order which helps you to
            identify trades originating from a specific order at a later point
          schema:
            type: string
        - name: with_trades
          in: query
          schema:
            type: boolean
            default: false
        - name: txt_matching_mode
          in: query
          schema:
            $ref: '#/components/schemas/TextMatchingMode'
      responses:
        200:
          description: Success, returns the report elements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ReportApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ReportApi(client).get_report_for_period(delivery_area=DELIVERY_AREA,
                                                             delivery_day_from=DELIVERY_DAY_FROM,
                                                             delivery_day_to=DELIVERY_DAY_TO)
  /report/{delivery_area}/csv:
    get:
      tags:
        - Report
      summary: Create CSV trading report
      description: |-
        Creates a detailed trading report in CSV format for a delivery area and a given delivery period. However, as the CSV format is two-dimensional, this report delivers less data compared to the regular report method.

        As the generation of the report requires a lot of calculations, please use wisely. The maximum period you can request is limited to 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will thus not show up, if you request data from more than one portfolio. The report can use filters for clOrdrId and txt, which means that only trades for which the filter is valid are included in the report.
      operationId: getReportCsvForPeriod
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: delivery_day_from
          in: query
          description: The day the report is for (example "2018-10-23")
          required: true
          schema:
            type: string
            format: date
        - name: delivery_day_to
          in: query
          description: The day the report is for (example "2018-10-30")
          required: true
          schema:
            type: string
            format: date
        - name: clOrdrId
          in: query
          description: |-
            Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit)
            together with an order
          schema:
            type: string
        - name: txt
          in: query
          description: |-
            Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can
            submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a
            specific order at a later point
          schema:
            type: string
        - name: column_separator
          in: query
          schema:
            type: string
            default: ;
        - name: comma_separator
          in: query
          schema:
            type: string
            default: "."
        - name: txt_matching_mode
          in: query
          schema:
            $ref: '#/components/schemas/TextMatchingMode'
      responses:
        200:
          description: Success, returns the report in CSV format
          content:
            text/csv:
              schema:
                type: string
        default:
          description: Error
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ReportApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ReportApi(client).get_report_csv_for_period(delivery_area=DELIVERY_AREA,
                                                                 delivery_day_from=DELIVERY_DAY_FROM,
                                                                 delivery_day_to=DELIVERY_DAY_TO)
  /schedule/{delivery_area}/{delivery_day}:
    get:
      tags:
        - Report
      summary: Create Schedule XML
      description: |-
        Create a delivery area internal schedule XML file for the nomination toward the TSO.
        Supported formats are ESS (v2.3) and CIM (v5.2), only including the schedule between the exchange member and the member.
        The revision will be increased with every request performed.
        You need to provide the EIC of the exchange member as well as the EIC of the exchange.

        For a detailed documentation and example values for different countries, please refer to the [Knowledge Base](https://docs.powerbot-trading.com/docs/features/nomination-schedules/).
      operationId: getScheduleXml
      parameters:
        - name: delivery_area
          in: path
          description: The EIC of the delivery area.
          required: true
          schema:
            type: string
            minLength: 16
            maxLength: 16
        - name: delivery_day
          in: path
          description: The day the schedule is for.
          required: true
          example: '2023-01-01'
          schema:
            type: string
            format: date
        - name: member_eic
          in: query
          description: The EIC of the exchange member.
          required: true
          example: -------EIC------
          schema:
            type: string
            minLength: 16
            maxLength: 16
        - name: exchange_eic
          in: query
          description: The EIC of the exchange.
          required: true
          example: 20X-LU005-ECCINI
          schema:
            type: string
            minLength: 16
            maxLength: 16
        - name: receiver_eic
          in: query
          required: true
          description: Receiver EIC
          example: 14XAT-APCS-----Q
          schema:
            type: string
            minLength: 16
            maxLength: 16
        - name: process_type
          in: query
          required: true
          description: Process Type Code
          example: A01
          schema:
            type: string
            minLength: 3
            maxLength: 3
        - name: sender_role
          in: query
          required: true
          description: Sender Role Code
          example: A01
          schema:
            type: string
            minLength: 3
            maxLength: 3
        - name: receiver_role
          in: query
          required: true
          description: Receiver Role Code
          example: A01
          schema:
            type: string
            minLength: 3
            maxLength: 3
        - name: schedule_format
          in: query
          schema:
            $ref: '#/components/schemas/ScheduleFormat'
      responses:
        200:
          description: Success, returns the report in XML format
          content:
            application/xml:
              schema:
                type: string
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, ReportApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = ReportApi(client).get_schedule_xml(delivery_area=DELIVERY_AREA,
                                                          delivery_day=DELIVERY_DAY,
                                                          member_eic=MEMBER_EIC,
                                                          exchange_eic=EXCHANGE_EIC,
                                                          receiver_eic=RECEIVER_EIC,
                                                          process_type=PROCESS_TYPE,
                                                          sender_role=SENDER_ROLE,
                                                          receiver_role=RECEIVER_ROLE,
                                                          schedule_format="ESS_2_3") # Allowed: ESS_2_3, CIM_5_2

  /orders:
    get:
      tags:
        - Orders
      summary: List own orders
      description: |-
        Retrieves a list of all your own orders at the exchange for an array of portfolios. Allows you to filter your orders for delivery area and/or contract_id. The return element will provide all the order_ids, the contracts the orders belong to, as well as an action status, which determines the current status of the order (added, partly executed, fully executed, etc).

        Please use the action status of orders to determine if you have done trades, as trade reporting from the exchange is sometimes slightly delayed.

        The parameter active_only will only list orders, which are active. The filter user_code allows you to filter orders created by a specific exchange user. Please be aware that this method uses pagination.
        Shadow orders can only be retrieved as long as they are active.
      operationId: getOwnOrders
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - $ref: '#/components/parameters/Offset'
        - name: limit
          in: query
          description: Limits the number of loaded orders. If `active_only` is set to `true`, no
            limits are imposed (all matching orders are returned). If set to `false` the limit
            defaults to 150.
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500
        - name: contract_ids
          in: query
          description: Show only those orders related to a specific contract
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: order_ids
          in: query
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: active_only
          in: query
          description: Returns only those orders which are active
          schema:
            type: boolean
            default: true
        - name: delivery_area
          in: query
          description: The EIC of the delivery area
          schema:
            type: string
        - name: user_code
          in: query
          description: the exchange user code
          schema:
            type: string
        - name: clOrdrId
          deprecated: true
          in: query
          schema:
            type: string
        - name: txt
          in: query
          schema:
            type: string
        - name: contract_id
          deprecated: true
          in: query
          description: Please use contract_ids instead! If contract_ids are set, this field will be ignored!
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = OrdersApi(client).get_own_orders(portfolio_id=[PORTFOLIO],
                                                      delivery_area=DELIVERY_AREA)

      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of orders
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Orders
      summary: Delete all orders
      description: Allows you to delete all orders of a portfolio
      operationId: deleteOrders
      parameters:
        - name: portfolio_id
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: delivery_areas
          in: query
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
      responses:
        200:
          description: The orders which got deleted
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = OrdersApi(client).delete_orders(portfolio_id=[PORTFOLIO],
                                                     delivery_areas=[DELIVERY_AREA])
  /orders/list:
    put:
      tags:
        - Orders
      summary: Modify multiple orders
      description: |-
        Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.

        Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order with a new id is created with the modification and the original order is deleted.

        Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).
      operationId: modifyOrders
      parameters:
        - $ref: '#/components/parameters/InternalTrading'
        - $ref: '#/components/parameters/FailOnLimitViolation'
        - $ref: '#/components/parameters/IgnoreOrderActionQuota'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrderModifyItem'
        required: false
      responses:
        200:
          description: Success
          headers:
            X-Total-Internal-Trades:
              description: total count of internal trades involved
              schema:
                type: integer
                format: int32
            X-Limit-Violations:
              description: Occurred limit violations
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        409:
          description: Concurrent Modification (mismatching revision_no)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: modifications
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi, OrderModify, OrderModifyItem

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Modify orders
            result = OrdersApi(client).modify_orders(modifications=[
                OrderModifyItem(revision_no=REVISION_NO,
                                order_id=ORDER_ID,
                                changes=OrderModify(action="MODI",
                                                    quantity=NEW_QUANTITY,
                                                    price=-NEW_PRICE))])
            # Deactivate orders
            result = OrdersApi(client).modify_orders(modifications=[
                            OrderModifyItem(revision_no=REVISION_NO,
                                            order_id=ORDER_ID,
                                            changes=OrderModify(action="DEAC"))])

            # Delete orders
            result = OrdersApi(client).modify_orders(modifications=[
                            OrderModifyItem(revision_no=REVISION_NO,
                                            order_id=ORDER_ID,
                                            changes=OrderModify(action="DELE"))])

    post:
      tags:
        - Orders
      summary: Place multiple orders
      description: |-
        Allows you to place a list of orders at once. For each requested order, one response element is generated. In case of success, an order element for each order is returned, otherwise an error message is returned. If the placed orders interact with previously placed own orders, even in other portfolios, it also returns the changes made to these orders. For further details on order elements please see the description of POST /orders.

        When sending a list of orders, the list needs to have execution instructions being either "valid" (default) or linked. Please be aware that each order needs to be valid, otherwise all orders are declined by the exchange system. Please see documentation for further details.

        The header of the return element includes a property named "X-Total-Internal-Trades", which tells you the number of internal trades that were involved in this request, if cross-trades were executed as internal trades.

        Note that the expected net position parameters should not be used in combination with block products.

        Please note that the response of an order placement is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order placement and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).
      operationId: addOrders
      parameters:
        - name: exec_instruction
          in: query
          schema:
            $ref: '#/components/schemas/ExecutionInstruction'
        - $ref: '#/components/parameters/InternalTrading'
        - $ref: '#/components/parameters/FailOnLimitViolation'
        - $ref: '#/components/parameters/IgnoreOrderActionQuota'
        - name: include_errors
          in: query
          description: |-
            If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders.
            If set to false, only an error will be returned if any order fails.
            Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/OrderEntry'
        required: true
      responses:
        200:
          description: Success
          headers:
            X-Total-Internal-Trades:
              description: total count of internal trades involved
              schema:
                type: integer
                format: int32
            X-Limit-Violations:
              description: Occurred limit violations
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: order
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi, OrderEntry

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Post order with contract ID
            order = OrderEntry(contract_id=CONTRACT_ID,
                               portfolio_id=PORTFOLIO_ID,
                               delivery_area=DELIVERY_AREA,
                               side="BUY",
                               type= "O",
                               quantity=5,
                               price=35,
                               txt="order_example",
                               clearing_acct_type="P")

            response = OrdersApi(client).add_orders([order])

            # Post order with time range
            order = OrderEntry(dlvry_start="2020-06-18T17:00:00Z",
                               dlvry_end="2020-06-18T18:00:00Z",
                               portfolio_id=PORTFOLIO,
                               delivery_area=DELIVERY_AREA,
                               side="BUY",
                               type= "O",
                               quantity=5,
                               price=35,
                               txt="order_example",
                               clearing_acct_type="P")

            response = OrdersApi(client).add_orders([order])

  /orders/status:
    put:
      tags:
        - Orders
      summary: Change status of all orders
      description: Modifies the status of all your orders at the exchange at once.
        Please be aware that this is an exchange backend request, which would modify
        the status of all orders at the exchange (including other tenants and portfolios)
        and can thus only be performed with api keys that have access to all portfolios
        within the system.
      operationId: updateStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStatus'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: orders
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi, UpdateStatus

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Deactivate all orders
            result = OrdersApi(client).update_status(orders=UpdateStatus(delivery_area=DELIVERY_AREA,
                                                                         order_mod_type="DEAC",
                                                                         prod_name=["XBID_Hour_Power"]))

            # Reactivate all orders
            result = OrdersApi(client).update_status(orders=UpdateStatus(delivery_area=DELIVERY_AREA,
                                                                         order_mod_type="ACTI",
                                                                         prod_name=["XBID_Hour_Power"]))

            # Delete all orders
            result = OrdersApi(client).update_status(orders=UpdateStatus(delivery_area=DELIVERY_AREA,
                                                                         order_mod_type="DELE",
                                                                         prod_name=["XBID_Hour_Power"]))
  /orders/{order_id}/history:
    get:
      tags:
        - Orders
      summary: List all revisions of an order
      description: |-
        List all revisions of an order.
        This request keeps track of the complete order history regardless of changed IDs,
        as an order_id might change over time when certain modifications are applied.
        Therefore, querying an order_id includes all preceding IDs of the requested order.
      operationId: getOwnOrderHistory
      parameters:
        - name: order_id
          in: path
          description: This id will be used to get all orders related.
          required: true
          schema:
            type: string
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, OrdersApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = OrdersApi(client).get_own_order_history(order_id=[ORDER_ID])
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of order revisions for this order
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /contract/{contract_id}/{delivery_area}/orders:
    get:
      tags:
        - Contract
      summary: Get contract full depth orderbook
      description: This method allows you to retrieve the full public orderbook of
        a contract (all bids and asks) in a specific delivery area.
      operationId: getOrders
      parameters:
        - name: contract_id
          in: path
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: portfolio_id
          in: query
          description:
            An optional parameter that can be used by tenants with shadow trading portfolios. If the provided portfolio
            ID corresponds with a shadow trading portfolio, the order book changes resulting from shadow trading will be
            applied to the returned orders list.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_orders(contract_id=CONTRACT_ID,
                                                    delivery_area=DELIVERY_AREA)
  /contract/{contract_id}/{delivery_area}/portfolio-information:
    get:
      tags:
        - Contract
      summary: Get contract portfolio information
      description: |-
        Calculates the current positions (portfolio-information) for a given contract.
        The response contains information about
          - the currency of all parameters
          - order-to-trade-ratios for the exchange, tenant and portfolio (DEPRECATED: replaced by order action quota)
          - cash-positions
          - net-positions
          - order-action-quota-limits
      operationId: getLimits
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - name: contract_id
          in: path
          description: The unique id of the contract
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: with_auction_positions
          in: query
          description: If set to true, the returned portfolio information will contain the auction positions
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskSettingsAndPortfolioInformation'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_limits(contract_id=CONTRACT_ID,
                                                    delivery_area=DELIVERY_AREA)
  /orderbooks:
    get:
      tags:
        - Contract
      summary: Get all orderbooks
      description: |-
        Shows the public order book for the requested products (or all available products) for a given delivery_area. Default delivery area will be applied if left blank and default is set. This request will by default only deliver the order book statistics (best bid, best ask, last etc.) and does not include the full orderbook depth. If you wish to retrieve the full order book you can set with_order_details to "true". However, this should only be done if absolutely necessary, as it will negatively impact the performance. Alternatively you can request the full order book with GET /contract/contract_id/delivery_area/orders.

        The order book contains portfolio relevant data (like net_position, signals etc.) and can thus be filtered by a list of portfolio IDs. Setting the limit parameter allows to limit the number of entries returned per request (sorted by ascending delivery time).

        The filter with_bid_or_ask_only returns only non empty order books. If past_hours is set, the orderbook will include historical contracts that have been closed in the last X hours.

        Using delivery_from and delivery_to, the order book can be further limited to a given timespan.
      operationId: getOrderBooks
      parameters:
        - in: query
          name: portfolio_id
          description: |-
            Providing a portfolio ID that corresponds with a shadow trading portfolio will result in the application of
            order book changes according to shadow trades made with the given portfolio. Shadow orders will also be added
            to the respective side of the order book.

            **Note**: you must set this parameter if you want to see shadow trading changes applied.
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: product
          in: query
          deprecated: true
          description: DEPRECATED, use `products` instead.
            The list of products (e.g. Intraday_Power_D,XBID_Hour_Power)
            *separated by a comma*, for which the orderbook(s) should be retrieved;
            leave blank if you want all available orderbooks
          schema:
            type: string
        - name: products
          in: query
          description: The list of products (e.g. Intraday_Power_D,XBID_Hour_Power),
            for which the orderbook(s) should be retrieved;
            leave blank if you want all available orderbooks
          schema:
            type: array
            items:
              type: string
        - name: with_bid_or_ask_only
          in: query
          description: If set to true, the returned orderbook will contain only contracts
            which contain at least one active bid or ask
          schema:
            type: boolean
            default: false
        - name: with_signals
          in: query
          description: If set to true, the returned orderbook will contain the signals
            applicable for the contracts
          schema:
            type: boolean
            default: false
        - name: contractId
          in: query
          description: limit the orderbook to an array of certain contracts only
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: contractName
          in: query
          description: limit the orderbook to a certain contract name only
          schema:
            type: string
        - name: delivery_start
          in: query
          description: limit the orderbook to those contracts with the given delivery
            start date
          schema:
            type: string
            format: date-time
        - name: delivery_end
          in: query
          description: limit the orderbook to those contracts with the given delivery
            end date
          schema:
            type: string
            format: date-time
        - name: delivery_within
          in: query
          description: limit the orderbook to those contracts having a delivery start/end
            date which starts before and ends after the given parameter
          schema:
            type: string
            format: date-time
        - name: past_hours
          in: query
          deprecated: true
          description: |-
            DEPRECATED: Please use `delivery_from` in combination with `active_only=false`.
            The number of hours to look into the past in the orderbook. If
            this parameter is set, historic closed contracts are contained in the orderbook
            as well.
            Cannot be used in conjunction with delivery_from.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 24
        - name: delivery_area
          in: query
          description: The EIC of the delivery area of the orderbook
          schema:
            type: string
        - name: delivery_from
          in: query
          description: Limits the orderbook to those contracts with a delivery start
            date >= delivery_from. Cannot be used in conjunction with past_hours.
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          description: Limits the orderbook to those contracts with a delivery end date
            <= delivery_to.
          schema:
            type: string
            format: date-time
        - name: with_order_details
          in: query
          description: If set to true, the returned orderbook will contain all current bids and asks of each contract
            (full orderbook depth). *Heads up* We generally recommend to request the full orderbook depth on a per
            contract basis when orderbook-changed notifications are received via websocket. If you need the full
            orderbook depth for all contracts at once more frequently, please consider using full orderbook snapshots
            via websocket.
          schema:
            type: boolean
            default: false
        - name: contract_type
          in: query
          description: |-
            **PDC**: (default) the order book only includes predefined contracts, i.e. the normal contracts generated by the backend

            UDC: the order book only includes block products, which were created as the result of a block order submitted by a member

            ALL: the order book contains both, PDC and UDC contracts
          schema:
            $ref: '#/components/schemas/ContractType'
        - name: with_portfolio_information
          in: query
          description: If set to true, the portfolio_information is included in the response.
          schema:
            type: boolean
            default: true
        - name: with_risk_settings
          in: query
          description: If set to true, the risk_setting of the portfolio are included
            in the response.
          schema:
            type: boolean
            default: true
        - name: with_products
          in: query
          description: If set to true, the available products are included in the response.
          schema:
            type: boolean
            default: true
        - name: active_only
          description: Setting this to false will also return order books for expired/inactive contracts.
          in: query
          schema:
            type: boolean
            default: true
        - name: with_auction_positions
          description: If set to true, the auction positions are included in the response.
          in: query
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBooks'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-swagger-router-controller: Orders
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            order_book = ContractApi(client).get_order_books(delivery_area=DELIVERY_AREA,
                                                             portfolio_id=[PORTFOLIO_ID])

  /contracts:
    get:
      tags:
        - Contract
      summary: Find contracts
      description: This method allows you to find active or historical contracts based
        on their exact delivery_start and delivery_end time (UTC) and lets you determine
        their contract_id.
        Using delivery_from and delivery_to, the contracts can be further limited to a given timespan.
      operationId: findContracts
      parameters:
        - name: contract_id
          in: query
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: delivery_start
          in: query
          description: Limit the contracts to those with the given delivery
            start date.
          schema:
            type: string
            format: date-time
        - name: delivery_end
          in: query
          description: Limit the contracts to those with the given delivery
            end date.
          schema:
            type: string
            format: date-time
        - name: delivery_from
          in: query
          description: Limits the contracts to those with a delivery start date
            >= delivery_from.
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          description: Limits the contracts to those with a delivery end date
            <= delivery_to.
          schema:
            type: string
            format: date-time
        - name: delivery_areas
          in: query
          description: Limit the search to contracts that belong to any of the specified delivery areas.
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Find contracts by contract ID
            result = ContractApi(client).find_contracts(contract_id=[CONTRACT_ID])

            # Find contracts by
            result = ContractApi(client).find_contracts(delivery_start=DELIVERY_START,
                                                        delivery_end=DELIVERY_END)
  /contracts/statistics:
    get:
      tags:
        - Contract
      summary: Get contract statistics
      description: Calculates the average price and volume of public trades executed
        for a given delivery interval for reference price and index calculation. Allows
        you to filter for public trades executed within a certain time period to restrict the
        calculation to a given amount of last traded quantity. Per default, only active or recently
        active contracts will be included in the calculation. Historic contracts matching the given
        delivery period can be included with setting the respective toggle.
        Please note that delivery_start and delivery_end have to be within 24 hours.
        Cross border trades are taken into account if either the buy or sell leg of the trade is
        in the specified delivery area(s). The quantity of only one of those trades will be taken
        into account, if a trades matches.
      operationId: calculateStatistics
      parameters:
        - name: delivery_area
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: delivery_start
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: delivery_end
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: execution_from
          in: query
          schema:
            type: string
            format: date-time
        - name: execution_to
          in: query
          schema:
            type: string
            format: date-time
        - name: limit_to_last_mw
          in: query
          schema:
            type: number
        - $ref: '#/components/parameters/IncludeHistoricData'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractStatistics'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).calculate_statistics(delivery_area=[DELIVERY_AREA],
                                                              delivery_start=DELIVERY_START,
                                                              delivery_end=DELIVERY_END)
  /contracts/bulkstatistics:
    get:
      tags:
        - Contract
      summary: Get contract statistics in bulk
      description: Calculates the average price and volume of public trades executed
        for a given delivery interval for reference price and index calculation. Allows
        you to filter for public trades executed within a certain time period to restrict the
        calculation to a given amount of last traded quantity. Per default, only active or recently
        active contracts will be included in the calculation. Historic contracts matching the given
        delivery period can be included with setting the respective toggle.
        Please note that delivery_start and delivery_end have to be within 24 hours.
        Cross border trades are taken into account if either the buy or sell leg of the trade is
        in the specified delivery area(s). The quantity of only one of those trades will be taken
        into account, if a trade matches.
      operationId: calculateBulkStatistics
      parameters:
        - name: contract_duration_minutes
          in: query
          required: true
          description: the duration of the contracts to calculate statistics for
          example: 15
          schema:
            type: integer
            format: int32
        - name: delivery_area
          in: query
          required: true
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: delivery_from
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: execution_from_offset_minutes
          in: query
          description: only consider trades that happened after or at (delivery start - n minutes)
          example: 60
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: execution_to_offset_minutes
          in: query
          description: only consider trades that happened before (delivery start - n minutes)
          example: 15
          schema:
            minimum: 0
            type: integer
            format: int32
        - name: limit_to_last_mw
          in: query
          schema:
            type: number
        - $ref: '#/components/parameters/IncludeHistoricData'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkContractStatistics'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).calculate_bulk_statistics(contract_duration_minutes=15,
                                                                   delivery_area=[DELIVERY_AREA],
                                                                   delivery_from=DELIVERY_FROM,
                                                                   delivery_to=DELIVERY_TO)

  /contracts/orderbookbulkstatistics:
    get:
      tags:
        - Contract
      summary:
        Get order book statistics
      description: |-
        Provides a summary of statistics for each contract which is currently active in the order book.
        Additionally, the average price for given order book depths can be calculated.
      operationId: getOrderBookStatistics
      parameters:
        - name: delivery_area
          in: query
          description: The EIC of the requested delivery area.
          required: true
          schema:
            type: string
        - name: contract_duration_minutes
          in: query
          description: The duration of the contracts to calculate statistics for. Must be a multiple of 15 minutes.
          example: 15
          required: false
          schema:
            type: integer
            minimum: 1
        - name: order_book_depth
          in: query
          description: List of order book depths (in MW) to calculate the average price for each contract.
          schema:
            type: array
            items:
              type: number
        - name: products
          in: query
          description: List of products (e.g. Intraday_Power_D,XBID_Hour_Power) to consider in the calculation. Leave blank if you want all available products considered.
          schema:
            type: array
            items:
              type: string
        - name: delivery_from
          in: query
          description: Limits the order book to those contracts with a delivery start
            date >= delivery_from.
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          description: Limits the order book to those contracts with a delivery end date
            <= delivery_to.
          schema:
            type: string
            format: date-time
        - name: exclude_own_orders
          in: query
          description: If true, own orders are not considered in the calculation of the order book vwaps.
          schema:
            type: boolean
            default: false
        - name: portfolio_id
          in: query
          description: |-
            Providing a portfolio ID that corresponds with a shadow trading portfolio will result in the application of
            order book changes according to shadow trades made with the given portfolio. Shadow orders will also be added
            to the respective side of the order book and included in the calculation. An error is returned
            if a non shadow trading portfolio ID is given.
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderBookBulkStatistics'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_order_book_statistics(delivery_area=DELIVERY_AREA,
                                                                   contract_duration_minutes=15,
                                                                   order_book_depth=[1, 5, 10]) # Values for order book depth e.g. 1, 5, 10, etc.


  /contract/{contract_id}/{delivery_area}/signals:
    get:
      tags:
        - Contract
      summary: Get contract signals
      description: This method allows you to retrieve your trading signals (your positions
        or custom data like weather, fundamental data etc.) valid for a contract in
        a delivery area for one or more portfolios.
      operationId: getContractSignals
      parameters:
        - $ref: '#/components/parameters/PortfolioId'
        - name: contract_id
          in: path
          description: The unique id of the contract
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_contract_signals(contract_id=CONTRACT_ID,
                                                              delivery_area=DELIVERY_AREA)
  /contract/{contract_id}/{delivery_area}/publictrades:
    get:
      tags:
        - Contract
      summary: Get contract public trades
      description: This method allows you to retrieve all public trades that were
        executed at the exchange for a given contract_id and delivery area. Please
        note that this function uses pagination.
      operationId: getPublicTrades
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: contract_id
          in: path
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: from_api_timestamp
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_api_timestamp
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: from_execution_time
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_execution_time
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of trades
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublicTrade'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_public_trades(contract_id=CONTRACT_ID,
                                                           delivery_area=DELIVERY_AREA)
  /contract/{contract_id}/{delivery_area}/history:
    get:
      tags:
        - Contract
      summary: Get contract history
      description: |-
        This method allows you to retrieve the history of a contract in a delivery area in the form of revisions (which include delta and sometimes full orderbook updates). When querying with a list of portfolios, you can retrieve all your own trades and signals that belong to the contract. When querying with a timestamp in "as_of", you can retrieve the contract history at a given point in time, or you can request a set of revisions.

        If with_orders is set to true, the revisions will include new and deleted orders that belong to the revision (if requesting revisions) in delta-format or the full orderbook if requesting a historical version using "as_of".

        Please note that this feature uses pagination.
      operationId: getContractHistory
      parameters:
        - in: query
          deprecated: true
          name: offset
          description: |-
            DEPRECATED: use page_token instead.

            Offset when loading a list of items
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: page_token
          description: |-
            Used for request pagination. For every retrieved page, the header `X-Next-Page-Token` will be set.
            Provide this value as the `page_token` parameter to retrieve the next page of results.
            The first request does not need to have the `page_token` parameter set.

            This value can only be used in conjunction with `limit`.
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 500
          description: Limits the number of loaded items
        - $ref: '#/components/parameters/PortfolioId'
        - name: contract_id
          in: path
          description: The unique id of the contract
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          description: The EIC of the delivery area
          required: true
          schema:
            type: string
        - name: from_revision
          in: query
          description: Revisions start with 0, each change increments it by 1. Please
            note that only up to 500 revisions at a time can be fetched.
          schema:
            type: integer
            format: int64
        - name: to_revision
          in: query
          description: Revisions start with 0, each change increments it by 1. Please
            note that only up to 500 revisions at a time can be fetched.
          schema:
            type: integer
            format: int64
        - name: from_time
          in: query
          description: The time of the first revision to retrieve (inclusive)
          schema:
            type: string
            format: date-time
        - name: to_time
          in: query
          description: The time of the last revision to retrieve (inclusive)
          schema:
            type: string
            format: date-time
        - name: as_of
          in: query
          description: Contract history as_of given point in time. Cannot be combined
            together with from_revision and to_revision.
          schema:
            type: string
            format: date-time
        - name: with_owntrades
          in: query
          description: If set to true, the own trades which happened on that revision
            are returned.
          schema:
            type: boolean
            default: false
        - name: with_signals
          in: query
          description: If set to true, the signals valid for that revision are returned.
          schema:
            type: boolean
            default: false
        - name: with_orders
          in: query
          description: If set to true, details about bids/asks are returned
          schema:
            type: boolean
            default: false
        - name: sort_by
          deprecated: true
          in: query
          description: |-
            DEPRECATED: sorting manually by time or revision can lead to inconsistent results.
            Leaving this blank will always return revisions exactly as received by the exchange.
            If you require the revisions in descending order, please reverse the returned list manually.
          schema:
            type: string
            default: revisionNo ASC
      responses:
        200:
          description: Success
          headers:
            X-Total-Revisions:
              deprecated: true
              description: |-
                DEPRECATED: the number of revisions of a contract change constantly, so this is not reliable for pagination.
              schema:
                type: integer
                format: int32
            X-Next-Page-Token:
              description: |-
                Provide this value as the 'page_token' parameter to retrieve the next page of results.

                If this header is blank, there is no more data to retrieve.
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContractHistoryItem'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, ContractApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = ContractApi(client).get_contract_history(contract_id=CONTRACT_ID,
                                                              delivery_area=DELIVERY_AREA)
  /order/{order_id}/{revision_no}:
    put:
      tags:
        - Orders
      summary: Modify single order
      deprecated: true
      description: |-
        DEPRECATED: please use `PUT /orders/list`.

        Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.

        Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order is created with the modification and the original order is deleted.

        Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).
      operationId: modifyOrder
      parameters:
        - name: order_id
          in: path
          description: the unique order_id of the order which should be modified. **Heads
            up!** The order_id can change after the modification.
          required: true
          schema:
            type: string
        - name: revision_no
          in: path
          description: The revision of the order which should be modified **Heads up!**
            If the revision does not match with the order's current revision in the
            exchange backend the modification will cause an error.
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/InternalTrading'
        - $ref: '#/components/parameters/FailOnLimitViolation'
        - $ref: '#/components/parameters/IgnoreOrderActionQuota'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderModify'
        required: false
      responses:
        200:
          description: Success
          headers:
            X-Total-Internal-Trades:
              description: total count of internal trades involved
              schema:
                type: integer
                format: int32
            X-Limit-Violations:
              description: Occurred limit violations
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OwnOrder'
        409:
          description: Concurrent Modification (mismatching revision_no)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: modifications
  /capacities:
    get:
      tags:
        - Capacities
      summary: Get Hub-to-ATC matrix from SIDC
      description:
        The hub-to-hub matrix (capacity matrix) shows available transfer capacity (ATC) at requested delivery-areas in
        Europe that are connected via SIDC (XBID). Updates are sent every 30 seconds, containing parts of the matrix in
        varying size. Updates can also be received via web socket subscription. Please note that access to capacity data
        needs the be activated by market operations for your exchange API user and that you will only have access to
        borders of the delivery areas active in PowerBot. If you require access to other borders, please reach out to
        PowerBot support for manual activation.
      operationId: getCapacities
      parameters:
        - name: delivery_area
          in: query
          description: The EICs of the outgoing delivery area(s). Filter is applied to "from_delivery_area".
          required: true
          style: form
          explode: false
          schema:
            type: array
            minItems: 1
            items:
              type: string
        - name: delivery_area_to
          in: query
          description: The EICs of the incoming delivery area(s). Filter is applied to "to_delivery_area".
          required: false
          style: form
          explode: false
          schema:
            type: array
            default: [ ]
            items:
              type: string
        - name: delivery_from
          in: query
          description: The beginning of the requested timeframe.
          required: true
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          description: The end of the requested timeframe.
          required: true
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Capacity'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, CapacitiesApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = CapacitiesApi(client).get_capacities(delivery_area=[DELIVERY_AREA],
                                                          delivery_from=DELIVERY_FROM,
                                                          delivery_to=DELIVERY_TO)
  /market:
    get:
      tags:
        - Market
      summary: Get exchange and server status
      description: Delivers the status of the market and the server as well as configuration
        information (list of delivery areas etc.). **Heads up!** You should query
        if the server status is "OK" before starting any trading activities.
      operationId: getStatus
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketStatus'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            status = MarketApi(client).get_status()
    put:
      tags:
        - Market
      summary: Update exchange password
      description: Will change the exchange user's credentials and will then log out
        and re-login to the market with the new credentials.
      operationId: changeExchangePassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangedCredentials'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: Credentials
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi, ChangedCredentials

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            MarketApi(client).change_exchange_password(credentials=ChangedCredentials(current_password=CURRENT_PW,
                                                                                      new_password=NEW_PW))
    post:
      tags:
        - Market
      summary: Perform exchange login
      description: Allows you to log the server into the exchange. This usually needs
        to be done only once at setup or if the exchange password has changed and
        can only be done by a master-API-key **Heads up!** This function is NOT for
        you logging into this server (access to that is done via an API key) but to
        log the server into the exchange.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      parameters:
        - name: force
          in: query
          description: |-
            It will disconnect anyone already connected with the specified account.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketStatus'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: Credentials
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi, Credentials

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            MarketApi(client).login(Credentials(password=PASSWORD))
    delete:
      tags:
        - Market
      summary: Perform exchange logout
      description: Allows you to log the server out of the exchange. This needs to
        be done only on very rare occasions and can only be done by the master-API-key.
        **Heads up!** This function is NOT for you logging out of this server but
        to log out of the exchange.
      operationId: logout
      parameters:
        - name: delete_orders
          in: query
          description: If this parameter is set to true, all orders will be deleted on logout.
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketStatus'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            MarketApi(client).logout()
  /market/health:
    get:
      tags:
        - Market
      summary: Get server health
      description: Allows you to retrieve the health of this instance for failover
        switches. Will return a healthy state if the market status is OK and stable.
        Please note that this request does not require authentication.
      operationId: getHealth
      responses:
        204:
          description: Service is healthy
          content: { }
        503:
          description: Service is unhealthy
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, MarketApi

              client = ApiClient(Configuration(host=HOST_URL))

              MarketApi(client).get_health() # Throws exception if not healthy
  /market/options:
    post:
      tags:
        - Market
      summary: Set exchange options
      description: |-
        Allows you to configure options. You can set a default delivery area here (set empty string to deactivate) for the order book request.

        In addition, you can activate internal trading (cross trading recognition) here by setting internal_trading to "default_yes" or "default_no" (which sets the default value for the "internal trading" parameter in POST /orders).
        Set to "inactive" to fully deactivate this feature (which will lead to the server ignoring the corresponding parameter in the orders).
        If set to "inactive", an error is returned when sending orders with "internal_trading" set to TRUE.
        **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.

        The parameter "restrict_safe_mode" defines which API keys can toggle the market mode via PUT /market/mode. If set to false, all master API keys, tenant master API keys and API keys with the 'can_trade' attribute set to true can toggle the market mode.
        If set to true, only master API keys are allowed to set the mode.
        **Heads up** - The scope of the safe mode includes ALL exchanges for the instance. However, it is not possible to immediately remove all orders from other exchanges, and there might be a small delay.
      operationId: setMarketOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarketOptions'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MarketStatus'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: Credentials
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi, MarketOptions

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            MarketApi(client).set_market_options(credentials=MarketOptions(internal_trading="default_yes",
                                                                           internal_trading_cross_area=False,
                                                                           internal_trading_cross_area_lead_time=30,
                                                                           default_delivery_area_id=DELIVERY_AREA,
                                                                           restrict_safe_mode=True))
  /market/notifications:
    get:
      tags:
        - Market
      summary: Get notifications from market operations
      description: Allows you to retrieve notifications from market operations (e.g.
        information about MARKET_HALT etc.) sent to the exchange user.
      operationId: getNotifications
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: severity_at_least
          in: query
          schema:
            $ref: '#/components/schemas/Severity'
          description: This parameter is ignored at nordpool
        - name: from_api_timestamp
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_api_timestamp
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of notifications
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, MarketApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = MarketApi(client).get_notifications()
  /market/mode:
    put:
      tags:
        - Market
      summary: Toggle market mode
      description: |-
        Safe mode (emergency stop) has the following effects:
         * all algorithm instances are stopped and can't be started
         * all active orders are deleted from the market
         * order entry / modification is disabled
         * trades can still be recalled

        This method is accessible to all master API keys, tenant master API keys and API keys with the 'can_trade' attribute set to true.
        If 'restrict_safe_mode' is enabled in the market options, only master API keys are allowed to set the mode.
        **Heads up** - The scope of the safe mode includes ALL exchanges for the instance. However, it is not possible to immediately remove all orders from other exchanges, and there might be a small delay.
      operationId: switchMode
      parameters:
        - name: include_external_orders
          in: query
          description: If set to true, PowerBot will also delete orders that were not created through PowerBot, for example orders from ComTrader.
          schema:
            type: boolean
            default: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarketMode'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MarketApi, MarketMode

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Put market in normal mode
            MarketApi(client).switch_mode(value=MarketMode(mode="NORMAL"))

            # Put market in safe mode
            MarketApi(client).switch_mode(value=MarketMode(mode="SAFE"))
  /settings/ip-allowlist:
    put:
      tags:
        - Settings
      summary: Set IP allowlist
      description: |-
        Configure a list of IPs that are allowed to interact with PowerBot. Subnet masks are also supported. The
        configured list must include the IP that is sending the request to prevent accidentally locking yourself out. An
        empty list means no filters (all IPs allowed).
      operationId: setIPAllowlist
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IPAllowlistEntry'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SettingsApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = SettingsApi(client).set_ip_allowlist(ip_allowlist_entry=[{"address": "123.456.789.0/24",
                                                                                "description": "Company Network"}])
    get:
      tags:
        - Settings
      summary: Get current IP allowlist
      description: Get the list of currently allowlisted IPs. An empty list means no filters (all IPs allowed).
      operationId: getIPAllowlist
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IPAllowlistEntry'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SettingsApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = SettingsApi(client).get_ip_allowlist()
  /algorithms:
    get:
      tags:
        - Algorithms
      summary: List algorithms
      description: |-
        Get all algorithms and their instances, depending on the access rights of the currently used API key.
        - The master-API-key will get all algorithms and instances (exchange independent).
        - A tenant-master-API-key can retrieve only the algorithms and instances, where the key has access to AT LEAST ONE portfolio specified in the instances of the algorithm.
        - A standard-API-key can retrieve only the algorithms and instances, where the key has access to AT LEAST ONE portfolio specified in the instances of the algorithm.
      operationId: getAlgorithms
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AlgoDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).get_algorithms()
    post:
      tags:
        - Algorithms
      summary: Add algorithm
      description: |-
        Use this method to create a new algorithm.
        In order to create an algorithm, you need to use the master-API-key which has been provided to you (other API keys cannot create an algorithm).
        An algorithm provides a setup which contains the required information.
        To run an algorithm, create an instance of it and start/stop it via the given endpoint.
        An algorithm requires a unique id, information about how often it expects a heartbeat and how it should behave if the heartbeat is missing.
        The image can be any valid docker image name with a tag. The tag can not be "latest" to avoid accidental upgrades.
      operationId: addAlgorithm
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgoSetup'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi, AlgoSetup

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).add_algorithm(value=AlgoSetup(id=ALGORITHM_ID,
                                                                         name=ALGORITHM_NAME,
                                                                         description=DESCRIPTION,
                                                                         require_heartbeat_every_seconds=HB_SECONDS,
                                                                         on_missing_heartbeat="DO_NOTHING",
                                                                         image=DOCKER_IMAGE))
  /algorithm/{algorithm_id}:
    get:
      tags:
        - Algorithms
      summary: Get algorithm details
      description: |-
        Get details for an algorithm and its instances, depending on the access rights of the currently used API key.
        - The master-API-key can access every algorithm.
        - A tenant-master-API-key can only access algorithms where the key has access to AT LEAST ONE portfolio specified in the instances of the algorithm.
        - A standard-API-key can only access algorithms where the key has access to AT LEAST ONE portfolio specified in the instances of the algorithm.
      operationId: getAlgorithm
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoDetails'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).get_algorithm(algorithm_id=ALGORITHM_ID)
    put:
      tags:
        - Algorithms
      summary: Update algorithm
      description: |-
        Modifies the fields of an algorithm.
        Only the master-API-key is allowed to perform this request.
        Only fields specified in the request will be updated.
        Please note that invalid values for the field "on_missing_heartbeat" will be ignored.
      operationId: modifyAlgorithm
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlgoSetup'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: value
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi, UpdateAlgoSetup

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).modify_algorithm(algorithm_id=ALGORITHM_ID,
                                                            value=UpdateAlgoSetup(name=ALGO_NAME,
                                                                                  description=DESCRIPTION,
                                                                                  require_heartbeat_every_seconds=HB_SECONDS,
                                                                                  on_missing_heartbeat="DO_NOTHING",
                                                                                  image=DOCKER_IMAGE))
    delete:
      tags:
        - Algorithms
      summary: Delete algorithm
      description: |-
        This is only possible if the algorithm has no instances assigned to it.
        Only the master-API-key is allowed to delete algorithms.
      operationId: deleteAlgorithm
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).delete_algorithm(algorithm_id=ALGORITHM_ID)
  /algorithm/{algorithm_id}/instances:
    post:
      tags:
        - Algorithms
      summary: Add algorithm instance
      description: |-
        An instance is used to run an algorithm and pass parameters to it.
        Only the master-API-key and tenant-master-API-keys are allowed to create algorithm-instances.
        An instance is always bound to a tenant and a list of portfolios.
      operationId: newInstance
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ByPassValidation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgoInstanceParameters'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoInstance'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: start_parameters
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi, AlgoInstanceParameters

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).new_instance(algorithm_id=ALGORITHM_ID,
                                                        start_parameters=AlgoInstanceParameters(instance_id=INSTANCE_ID,
                                                                                                tenant_id=TENANT_ID,
                                                                                                portfolio_ids=PORTFOLIO,
                                                                                                parameters={"param1": PARAM1}))
  /algorithm/{algorithm_id}/instance/{instance_id}:
    get:
      tags:
        - Algorithms
      summary: Get algorithm instance details
      description: |-
        Retrieves details about the algorithm instance.
        - Master-API-keys can always retrieve details about an algorithm-instance.
        - Tenant-master-API-keys can only access algorithm-instances, where the key has access to AT LEAST ONE portfolio specified in the instance.
        - Standard-API-keys can only access algorithm-instances, where the key has access to AT LEAST ONE portfolio specified in the instance.
      operationId: getAlgoInstanceStatus
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoInstance'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).get_algo_instance_status(algorithm_id=ALGORITHM_ID,
                                                                    instance_id=INSTANCE_ID)
    patch:
      tags:
        - Algorithms
      summary: Update algorithm instance
      description: |-
        Note that algorithm instance changes will only be accepted if the algorithm is in "IDLE" state.
        - Master-API-keys can update all instances.
        - Tenant-Master-API-keys can only update instances where the key has access to ALL portfolios specified in the instance.
        - Standard-API-keys can only update instances where the key has access to ALL portfolios specified in the instance.
      operationId: updateAlgoInstance
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInstanceRequest'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoInstance'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, AlgorithmsApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = AlgorithmsApi(client).update_algo_instance(
                    algorithm_id=ALGORITHM_ID,
                    instance_id=INSTANCE_ID,
                    update_instance_request={
                        "resources": {"requests": {"cpu": "0.6", "memory": "256Mi"}}
                    },
              )
    put:
      tags:
        - Algorithms
      summary: Start/Stop algorithm instance
      description: |-
        This request controls the algorithm instance.
        Use standard-API-keys to start/stop algorithm instances.
        The key needs access to ALL portfolios specified in the instance.
        Master-API-keys and tenant-master-API-keys can also start/stop algorithm instances, however this should only be used in exceptional cases.
      operationId: submitCommand
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ByPassValidation'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgoCommand'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoInstance'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: command
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi, AlgoCommand

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            # Send Start signal to algorithm
            result = AlgorithmsApi(client).submit_command(algorithm_id=ALGORITHM_ID,
                                                          instance_id=INSTANCE_ID,
                                                          command=AlgoCommand(command="START"))

            # Send Stop signal to algorithm
            result = AlgorithmsApi(client).submit_command(algorithm_id=ALGORITHM_ID,
                                                          instance_id=INSTANCE_ID,
                                                          command=AlgoCommand(command="STOP"))
    delete:
      tags:
        - Algorithms
      summary: Delete algorithm instance
      description: |-
        Instances can only be deleted if they are not running.
        - Master-API-keys can delete all instances.
        - Tenant-master-API-keys can only delete instances, where the key has access to ALL portfolios specified in the instance.
        - Standard-API-keys and Scheduling-API-keys are not allowed to delete instances.
      operationId: deleteAlgorithmInstance
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).delete_algorithm_instance(algorithm_id=ALGORITHM_ID,
                                                                     instance_id=INSTANCE_ID)
  /algorithm/{algorithm_id}/instance/{instance_id}/parameters:
    put:
      tags:
        - Algorithms
      summary: Update algorithm instance parameter
      description: |-
        Note that parameter changes will only be accepted if the algorithm is in "IDLE" state.
        - Master-API-keys can update all instances.
        - Tenant-Master-API-keys can only update instances where the key has access to ALL portfolios specified in the instance.
        - Standard-API-keys can only update instances where the key has access to ALL portfolios specified in the instance.
      operationId: updateAlgoParameters
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/ByPassValidation'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: A freely defined JSON object with key/value pairs.
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlgoInstance'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: parameters
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).update_algo_parameters(algorithm_id=ALGORITHM_ID,
                                                                  instance_id=INSTANCE_ID,
                                                                  parameters={"param1": PARAM1})

  /algorithm/{algorithm_id}/instance/{instance_id}/heartbeat:
    post:
      tags:
        - Algorithms
      summary: Submit algorithm instance heartbeat
      description: |-
        Use this endpoint to submit a heartbeat to confirm that the algorithm instance is running correctly.
        The heartbeat must be sent continuously, every X seconds as specified in the algorithm.
        Note:
        The "status" sent via this request (heartbeat-status) influences the "status" of the instance. In case the status of the instance is NOT "IDLE" (= deactivated), the following behavior applies:
        - heartbeat-status = OK -> status RUNNING
        - heartbeat-status = FAILURE -> status FAILURE
      operationId: submitHeartBeat
      parameters:
        - name: algorithm_id
          in: path
          required: true
          schema:
            type: string
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgoHeartbeat'
        required: true
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: status
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, AlgorithmsApi, AlgoHeartbeat

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = AlgorithmsApi(client).submit_heart_beat(algorithm_id=ALGORITHM_ID,
                                                             instance_id=INSTANCE_ID,
                                                             status=AlgoHeartbeat(status="OK",
                                                                                  status_text=STATUS_TEXT))
  /schema:
    get:
      tags:
        - Schema
      summary: List schemas
      description: Retrieves all schemas matching the provided filter criteria.
      operationId: getSchemas
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: type
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ValidationSchemaType'
        - name: name
          in: query
          required: false
          schema:
            type: string
        - name: version
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidationSchema'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SchemaApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = SchemaApi(client).get_schemas()
    put:
      tags:
        - Schema
      summary: Add schema
      description: Create a new schema.
      operationId: addSchema
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationSchema'
        required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationSchema'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SchemaApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = SchemaApi(client).add_schema(validation_schema={"type": "TYPE_OF_PARAMETER", # "ALGO_PARAMETER" or "SIGNAL_PARAMETER"
                                                                       "name": "NAME_OF_SCHEMA",
                                                                       "version": "VERSION",
                                                                       "description": "A Description of a schema",
                                                                       "parameters": {
                                                                          "required": [
                                                                            "ACTIVE_TRADING",
                                                                            "LIMIT_PRICE_SOURCE",
                                                                            "MAX_DISPLAY_QUANTITY",
                                                                            "MIN_ORDER_DEPTH",
                                                                            "MAX_SPREAD",
                                                                            "VWAP_DELIVERY_AREAS",
                                                                            "TXT"
                                                                          ],
                                                                          "properties": {
                                                                            "ACTIVE_TRADING": {
                                                                              "type": "boolean"
                                                                            },
                                                                            "LIMIT_PRICE_SOURCE": {
                                                                              "type": "string",
                                                                              "pattern": "STATIC|OFFSET|FACTOR"
                                                                            },
                                                                            "MAX_DISPLAY_QUANTITY": {
                                                                              "type": "number",
                                                                              "minimum": 0.1
                                                                            },
                                                                            "MIN_ORDER_DEPTH": {
                                                                              "type": "number",
                                                                              "minimum": 0,
                                                                              "maximum": 1
                                                                            },
                                                                            "MAX_SPREAD": {
                                                                              "type": "number",
                                                                              "exclusiveMinimum": True,
                                                                              "minimum": 0
                                                                            },
                                                                            "VWAP_DELIVERY_AREAS": {
                                                                              "type": "array",
                                                                              "items": {
                                                                                "type": "string"
                                                                              }
                                                                            },
                                                                            "TXT": {
                                                                              "type": "string",
                                                                              "maxLength": 100
                                                                            },
                                                                            "max_concurrent": {
                                                                              "type": "integer",
                                                                              "minimum": 1
                                                                            }
                                                                          }
                                                                        }})
  /schema/{type}/{name}/{version}:
    delete:
      tags:
        - Schema
      summary: Delete schema
      description: Deletes the schema matching the given name, type and version.
      operationId: deleteSchema
      parameters:
        - name: type
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/ValidationSchemaType'
        - name: name
          in: path
          required: true
          schema:
            type: string
        - name: version
          in: path
          required: true
          schema:
            type: string
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, SchemaApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              SchemaApi(client).delete_schema(type="SCHEMA_TYPE", # Allowed: "ALGO_PARAMETER" ┃ "SIGNAL_PARAMETER"
                                              name="NAME_OF_SCHEMA",
                                              version="VERSION")
  /subscriptions:
    get:
      tags:
        - Subscriptions
      summary: List websocket endpoints
      description: Allows you to retrieve a list of all possible websockets endpoints
        you can subscribe to. Please note that you need to use a different technology
        to do this, this method only provides a list for information purposes.
        The response models can be found in the full openAPI specification.
        Each websocket message contains a sequence number within the header, which can be utilized to check for missing messages.
        Note that this number resets on application restart.
        <p>
        You can test websocket subscriptions [here](https://websockets.powerbot-trading.com/)
      operationId: getSubscriptionEndpoints
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubscriptionEndpoint'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, SubscriptionsApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = SubscriptionsApi(client).get_subscription_endpoints()
  /messages:
    get:
      tags:
        - Messages
      summary: Get exchange communication history
      description: |-
        Deprecated: this operation will be removed in the near future

        Allows you to retrieve communication from the exchange's backend
        system with the trading server backend for debugging purposes. Only master-API-keys
        can call this method.
      operationId: getMessages
      deprecated: true
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: from_api_timestamp
          in: query
          description: from timestamp is 'inclusive' (i.e. >=)
          schema:
            type: string
            format: date-time
        - name: to_api_timestamp
          in: query
          description: to timestamp is 'exclusive' (i.e. <)
          schema:
            type: string
            format: date-time
        - name: message_class_is
          in: query
          description: A comma separated list of message classes. You can either use
            the fully qualified name (e.g. com.deutscheboerse.m7.trading.api.v6.PblcOrdrBooksDeltaRprt)
            or parts of it (e.g. PblcOrdrBooksDeltaRprt)
          schema:
            type: string
        - name: message_class_is_not
          in: query
          schema:
            type: string
        - name: correlation_id
          in: query
          schema:
            type: string
        - name: sort_by
          in: query
          schema:
            type: string
            default: time ASC
      responses:
        200:
          description: Success
          headers:
            X-Total-Count:
              description: total count of messages
              schema:
                type: integer
                format: int32
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import Configuration, ApiClient, MessagesApi

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

            result = MessagesApi(client).get_messages(limit=100)
  /delivery-areas:
    get:
      tags:
        - Market
      summary: Get delivery areas
      operationId: getDeliveryAreas
      description: Get information about delivery areas
      parameters:
        - name: all
          in: query
          description: Return all delivery areas instead of just the accessible ones
          schema:
            type: boolean
            default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DeliveryArea'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, MarketApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = MarketApi(client).get_delivery_areas(all=False)

  /delivery-area/{area_id}:
    get:
      tags:
        - Market
      summary: Get delivery area information
      operationId: getDeliveryArea
      description: Get information about a specific delivery area
      parameters:
        - name: area_id
          in: path
          description: The delivery area EIC
          required: true
          example: 10YDE-RWENET---I
          schema:
            type: string
            minLength: 16
            maxLength: 16
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeliveryArea'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        x-code-samples:
          - lang: python
            label: 'Python Client'
            source: |
              from powerbot_client import Configuration, ApiClient, MarketApi

              client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))

              result = MarketApi(client).get_delivery_area(area_id=DELIVERY_AREA)
  /historic/publictrades:
    get:
      tags:
        - Historic Data
      summary: Get trades for historic contracts
      operationId: getHistoricTrades
      parameters:
        - name: page_size
          description: |-
            The number of trades to return in one page. Setting this field to `0` will return all
            trades if `period_match_exact` is set to `true` or only one contract ID is provided.
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: page_token
          description: |-
            Used for request pagination. If a response has the field `next_page_token` set, you can
            provide that value as the `page_token` parameter to retrieve the next page of results.
            The first request does not need to have the `page_token` parameter set.
          in: query
          required: false
          schema:
            type: string
        - name: exchange
          in: query
          required: false
          description: |-
            This value can be used to retrieve data from other exchanges. This is only possible for
            exchanges you are actively using, or have used in the past.

            It defaults to the current exchange if no value is specified.
          schema:
            $ref: '#/components/schemas/Exchange'
        - name: period_start
          description: |-
            The lower limit (inclusive) of contract delivery periods. Can be set to match contract
            `delivery_start` exactly with `period_match_exact`
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: period_end
          description: |-
            The upper limit (inclusive) of contract delivery periods. Can be set to match contract
            `delivery_end` exactly with `period_match_exact`
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: period_match_exact
          description: |-
            If set to true, only trades for contract with a delivery period that exactly matches
            `period_start` and `period_end` will be returned. Otherwise, trades for all contracts
            with a delivery period that fully falls between `period_start` and `period_end` will
            be considered.
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: delivery_period_duration_minutes
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: delivery_area_buy
          in: query
          required: false
          schema:
            type: string
        - name: delivery_area_sell
          in: query
          required: false
          schema:
            type: string
        - name: delivery_area_match_exact
          description: |-
            If set to true, only trades where the buy **and** sell delivery areas exactly match
            `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where
            the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell`
            will be returned.
          in: query
          required: false
          schema:
            type: boolean
        - name: contract_ids
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: products
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: execution_from_offset_minutes
          description: Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: execution_to_offset_minutes
          description: Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: self_trades
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/SelfTradeSelector'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricTradesResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import HistoricDataApi, ApiClient, Configuration

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))
            hist_api = HistoricDataApi(client)

            all_trades = []
            token = None
            while True:
                page = hist_api.get_historic_trades(delivery_area_buy=DELIVERY_AREA, delivery_area_sell=DELIVERY_AREA, contract_ids=[CONTRACT_ID], page_size=500, page_token=token)
                all_trades.extend(page.trades)
                token = page.next_page_token
                if token is None:
                    break
  /historic/publicorders:
    get:
      tags:
        - Historic Data
      summary: Get order book revisions for historic contracts
      description: |-
        Allows to retrieve all order revisions of historic contracts.

        Note that this endpoint returns order revisions, and not orders. This means that the same
        order ID will appear multiple times, once for each update (creation, update or deletion).
      operationId: getHistoricOrders
      parameters:
        - name: page_size
          description: |-
            The number of order book revisions to return in one page.
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: page_token
          description: |-
            Used for request pagination. If a response has the field `next_page_token` set, you can
            provide that value as the `page_token` parameter to retrieve the next page of results.
            The first request does not need to have the `page_token` parameter set.
          in: query
          required: false
          schema:
            type: string
        - name: exchange
          in: query
          required: false
          description: |-
            This value can be used to retrieve data from other exchanges. This is only possible for
            exchanges you are actively using, or have used in the past.

            It defaults to the current exchange if no value is specified.
          schema:
            $ref: '#/components/schemas/Exchange'
        - name: delivery_area
          in: query
          required: true
          description: The delivery area of the target contract.
          example: 10YDE-RWENET---I
          schema:
            type: string
        - name: delivery_start
          description: |-
            The delivery start time of the target contract. Must be used together with
            `delivery_end` and `product`. Alternatively, `contract_id` can be used.
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: delivery_end
          description: |-
            The delivery end time of the target contract. Must be used together with
            `delivery_start` and `product`. Alternatively, `contract_id` can be used.
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: product
          description: |-
            The product of the target contract. Must be used together with  `delivery_start` and
            `delivery_end`. Alternatively, `contract_id` can be used.
          in: query
          required: false
          example: XBID_Hour_Power
          schema:
            type: string
        - name: contract_id
          in: query
          required: false
          description: |-
            The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and
            `contract_id` can be used.
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HistoricOrdersResponse'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-code-samples:
        - lang: python
          label: 'Python Client'
          source: |
            from powerbot_client import HistoricDataApi, ApiClient, Configuration

            client = ApiClient(Configuration(api_key={"api_key_security": API_KEY}, host=HOST_URL))
            hist_api = HistoricDataApi(client)

            all_revisions = []
            token = None
            while True:
              page = hist_api.get_historic_orders(delivery_area=DELIVERY_AREA, contract_id=CONTRACT_ID, page_size=500, page_token=token)
              all_revisions.extend(page.revisions)
              token = page.next_page_token
              if token is None:
                  break
  /auction/{exchange_id}:
    post:
      tags:
        - Auction Exchange
      summary: Exchange Login
      description: Login to the exchange. A certificate is required for exchanges that use the ETS protocol.
      operationId: auctionLogin
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuctionCredentials"
      responses:
        204:
          description: successful login
          content: { }
        409:
          description: already logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Auction Exchange
      summary: Change Auction Exchange Password
      description: |-
        Update the exchange login password of the currently logged-in user.

        This operation is currently only supported by ETS based exchanges (EPEX, HUPX)
      operationId: changeAuctionExchangePassword
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangedCredentials'
      responses:
        204:
          description: Success
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Auction Exchange
      summary: Exchange Logout
      description: Logout the from the exchange.
      operationId: auctionLogout
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      responses:
        204:
          description: Successful logout.
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/exchanges:
    get:
      tags:
        - Auction Exchange
      summary: List Exchanges
      description: Lists all available exchanges and their current status.
      operationId: listExchanges
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionExchange"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/config:
    get:
      tags:
        - Auction Configuration
      summary: Get Exchange Configuration
      description: |-
        Return information regarding the configuration of the auction module and the logged in exchange user.
        This includes the exchange portfolios with their corresponding PowerBot portfolio mapping.
      operationId: getAuctionConfig
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionConfig"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/config/{powerbot_portfolio_id}/{delivery_area}:
    get:
      tags:
        - Auction Configuration
      summary: Get Portfolio Currency
      description: |-
        Returns the exchange portfolio name and currency associated with the provided PowerBot portfolio ID and delivery area.
      operationId: getAuctionPortfolioCurrency
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: powerbot_portfolio_id
          in: path
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionExchangePortfolioCurrency"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/config/portfolio:
    post:
      tags:
        - Auction Configuration
      summary: Set Portfolio Mapping
      description: |-
        Map the exchange portfolio that should be used for the given PowerBot portfolio ID. The mapping
        is applied to per delivery area and exchange portfolio basis. By providing a list of delivery
        areas one can restrict the mapping for the given delivery area(s), otherwise all accessible areas
        of the exchange portfolio are mapped.
        Following restriction are to be considered:
        - One PowerBot portfolio can only be mapped to one exchange portfolio + area, e.g. mapping
          an already mapped powerbot portfolio to another exchange portfolio would remove the existing
          mapping and set the provided one.
        - This operation always overwrites the existing mappings, meaning if an additional area for
          the same exchange portfolio is desired, the currently mapped areas plus the new one have to
          be provided.
        - The exchange portfolio must have access to the delivery area(s) provided in the mapping.
        - If a exchange portfolio has access to the same area multiple times, for example with different
          currencies, the currency mapping must also be provided for those areas.
        - Note that when the exchange portfolio has access to multiple areas, the restrictions of
          the PowerBot portfolio regarding delivery area access are prioritized.
      operationId: setPortfolioMapping
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      requestBody:
        description: The exchange portfolio mapping to be set.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuctionExchangePortfolioMapping"
      responses:
        204:
          description: Successful portfolio set.
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/auctions:
    get:
      tags:
        - Auctions
      operationId: listAuctions
      summary: List Auctions
      description: Returns all auctions for the provided parameters.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: delivery_areas
          in: query
          description: This filter applies to auctions and auction contracts.
          schema:
            type: array
            items:
              type: string
        - name: delivery_from
          in: query
          description: The starting point of the delivery period.
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          description: The end point of the delivery period.
          schema:
            type: string
            format: date-time
        - name: auction_ids
          in: query
          description: The IDs of the auctions.
          schema:
            type: array
            items:
              type: string
        - name: gate_closure_from
          in: query
          description: The start time in which the auctions gate closure time should be contained.
          schema:
            type: string
            format: date-time
        - name: gate_closure_to
          in: query
          description: The end time in which the auctions gate closure time should be contained.
          schema:
            type: string
            format: date-time
        - name: portfolio_ids
          in: query
          description: limit the results to auctions that are available to the provided portfolios
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Auction"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}/constraints:
    get:
      tags:
        - Auctions
      operationId: getAuctionConstraints
      summary: Get auction constraints
      description: Returns the price constraints of the specified auction
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: auction_id
          in: path
          required: true
          schema:
            type: string
        - name: delivery_area
          in: path
          required: true
          schema:
            type: string
        - name: portfolio_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionConstraints"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/auctions/results:
    get:
      tags:
        - Auctions
      summary: Get Auction Results
      operationId: getAuctionResults
      description: Returns the auction results for the provided parameters
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: auction_ids
          in: query
          description: The IDs of the auctions
          required: true
          schema:
            type: array
            items:
              type: string
        - name: delivery_areas
          in: query
          description: The delivery areas that should be contained by the auctions
          schema:
            type: array
            items:
              type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionResult"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/order:
    put:
      tags:
        - Auction Order
      summary: Save Order
      description: |-
        This endpoint allows for the addition or modification of an order. Each order is uniquely
        identified by the auction ID, delivery area and portfolio ID. It contains either curves or
        blocks, but not both. Only one of them can be provided at a time. In case there is no existing
        order, a new order will be created, otherwise the existing order will be updated. To deactivate
        an order, provide an empty curves or blocks array.
      operationId: saveOrder
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuctionOrderEntry"
      responses:
        200:
          description: The results of the order entry.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionOrder"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/{order_id}:
    put:
      tags:
        - Auction Order
      summary: Confirm order
      operationId: confirmOrder
      description: |
        Allows you to confirmation a staged order, after which it will be submitted to the exchange.
        In case that the order was rejected by the exchange, a modification by the user to the current
        order is required, after which it may be confirmed again to submit to the market.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: order_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: The result of the confirmation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionOrder"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}:
    get:
      tags:
        - Auction Order
      summary: Get Orders
      operationId: getAuctionOrders
      description: Return the latest revision of curve and block orders for the given auction, delivery area and portfolio.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - $ref: "#/components/parameters/AuctionId"
        - $ref: "#/components/parameters/PortfolioIdPath"
        - $ref: "#/components/parameters/DeliveryAreaPath"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionOrder"
        403:
          description: Returned in case the user provides an portfolio ID or delivery area they do not have access to.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: No orders found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}/{order_type}/history:
    get:
      tags:
        - Auction Order
      summary: Get Order History
      operationId: getAuctionOrderHistory
      description: Return a list of order revisions for the given auction, delivery area and portfolio and order type.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - $ref: "#/components/parameters/AuctionId"
        - $ref: "#/components/parameters/PortfolioIdPath"
        - name: delivery_area
          in: path
          required: true
          description: The delivery area of the order.
          schema:
            type: string
        - name: order_type
          in: path
          required: true
          description: The type of the order. Either curve or block.
          schema:
            $ref: "#/components/schemas/AuctionOrderType"
        - name: revision_from
          in: query
          description: Specify the starting revision
          schema:
            type: integer
            minimum: 0
        - name: revision_to
          in: query
          description: Specify the ending revision
          schema:
            type: integer
            minimum: 0
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionOrder"
        403:
          description: Returned in case the user provides an portfolio ID or delivery area they do not have access to.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        404:
          description: No order revisions found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/trades:
    get:
      tags:
        - Auction Trade
      summary: Find trades
      operationId: findAuctionTrades
      description: Return a list of auction trades for the search criteria.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - name: auction_ids
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: delivery_areas
          in: query
          required: false
          style: form
          explode: false
          schema:
            type: array
            items:
              type: string
        - name: portfolio_ids
          in: query
          required: true
          description: At least one portfolio has to be provided.
          schema:
            type: array
            items:
              type: string
        - name: delivery_from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: delivery_to
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: state
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/AuctionTradeState"
        - name: processed_from
          in: query
          required: false
          schema:
            type: string
            format: date-time
        - name: processed_to
          in: query
          required: false
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionTrade"
        404:
          description: No trades found.
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}/trades:
    get:
      tags:
        - Auction Trade
      summary: Get trades for auction
      operationId: getAuctionTrades
      description: Return a list of trades for the given auction, delivery area and portfolio.
      parameters:
        - $ref: "#/components/parameters/ExchangeId"
        - $ref: "#/components/parameters/AuctionId"
        - $ref: "#/components/parameters/DeliveryAreaPath"
        - $ref: "#/components/parameters/PortfolioIdPath"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuctionTrade"
        404:
          description: No trades found.
          content: { }
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /auction/settings:
    get:
      tags:
        - Auction Settings
      summary: Get settings
      description: Get the current settings of the auction module.
      operationId: getSettings
      responses:
        200:
          description: todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuctionSettings"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    put:
      tags:
        - Auction Settings
      summary: Save settings
      description: Save the settings of the auction module.
      operationId: saveSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SaveSettings"
      responses:
        204:
          description: Successful save.
          content: { }
        400:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
components:
  schemas:
    Auction:
      type: object
      description: The auction object.
      required:
        - auction_id
        - name
        - delivery_start
        - delivery_end
        - delivery_areas
        - exchange
        - contracts
        - order_entry_end
        - state
      properties:
        auction_id:
          description: The ID of the auction.
          type: string
        name:
          description: The name of the auction.
          type: string
        delivery_start:
          description: The first delivery start of the auction.
          type: string
          format: date-time
        delivery_end:
          description: The last delivery end of the auction.
          type: string
          format: date-time
        delivery_areas:
          description: The delivery areas where the auction takes place.
          type: array
          items:
            type: string
        contracts:
          type: array
          items:
            $ref: "#/components/schemas/AuctionContract"
        order_entry_start:
          description: The time after which orders can be started to be placed.
          type: string
          format: date-time
        order_entry_end:
          description: The time after which order placement is closed.
          type: string
          format: date-time
        state:
          $ref: "#/components/schemas/AuctionState"
    AuctionConstraints:
      description: Constraints of an auction.
      type: object
      required:
        - min_price
        - max_price
      properties:
        min_price:
          type: number
        max_price:
          type: number
        price_tick:
          type: number
    AuctionContract:
      description: A contract of an auction
      type: object
      required:
        - contract_id
        - delivery_start
        - delivery_end
        - delivery_areas
      properties:
        contract_id:
          description: The ID of the contract.
          type: string
        delivery_start:
          description: The delivery start of the contract.
          type: string
          format: date-time
        delivery_end:
          description: The delivery end of the contract.
          type: string
          format: date-time
        delivery_areas:
          description: The delivery areas where the contract is tradeable.
          type: array
          items:
            type: string
    AuctionState:
      description: |-
        The state of an auction.
        * ANNOUNCED: not open for trading yet
        * OPEN: open for trading
        * CLOSED: trading closed, results pending
        * CANCELLED: auction failed, no clearing price achieved
        * RESULTS_PUBLISHED: auction is completed and all results are published
      type: string
      enum:
        - ANNOUNCED
        - OPEN
        - CLOSED
        - CANCELLED
        - RESULTS_PUBLISHED
    AuctionResultState:
      description: |-
        The state of the auction result.
        * NOT_AVAILABLE: no auction results available
        * PRELIMINARY_RESULTS: initial results published
        * INITIAL_PRICE: for non-primary currency prices when auction is waiting hedging or recalculating prices
        * FINAL: auction is completed and all results are published
      type: string
      enum:
        - NOT_AVAILABLE
        - INITIAL_PRICE
        - PRELIMINARY_RESULTS
        - FINAL
    AuctionResult:
      description: The result of an auction.
      type: object
      required:
        - auction_id
        - delivery_start
        - delivery_end
        - contracts
      properties:
        auction_id:
          description: The ID of the auction.
          type: string
        delivery_start:
          description: The first delivery start of the auction.
          type: string
          format: date-time
        delivery_end:
          description: The last delivery end of the auction.
          type: string
          format: date-time
        state:
          $ref: "#/components/schemas/AuctionResultState"
        contract_results:
          description: The contracts of the auction.
          type: array
          items:
            $ref: "#/components/schemas/AuctionContractResult"
    AuctionContractResult:
      description: The result of a contract of an auction
      type: object
      required:
        - contract
        - delivery_areas
      properties:
        contract:
          $ref: "#/components/schemas/AuctionContract"
        delivery_areas:
          description: The delivery areas of the contract
          type: array
          items:
            $ref: "#/components/schemas/AuctionAreaResult"
    AuctionAreaResult:
      description: The results of a contract in one delivery area
      type: object
      required:
        - delivery_area
      properties:
        delivery_area:
          description: The delivery area of the result.
          type: string
        clearing_prices:
          description: The prices at which the auction was cleared for each currency.
          type: array
          items:
            $ref: "#/components/schemas/CurrencyPrice"
        total_quantity:
          description: The total quantity traded for the contract in this delivery area.
          type: number
          format: double
    CurrencyPrice:
      type: object
      required:
        - currency
        - price
      properties:
        price:
          type: number
          format: double
        currency:
          type: string
    AuctionAreaResultTrade:
      description: The trade of an auction.
      type: object
      required:
        - id
        - price
        - quantity
        - state
      properties:
        id:
          description: The ID of the trade, provided by the exchange.
          type: string
        price:
          description: The price of the trade.
          type: number
          format: double
        quantity:
          description: The quantity of the trade.
          type: number
          format: double
        state:
          $ref: "#/components/schemas/TradeState"
    AuctionResultEvent:
      type: object
      properties:
        message_class:
          type: string
        emitted_at:
          type: string
          format: date-time
        exchange:
          $ref: "#/components/schemas/Exchange"
        auction_id:
          type: string
        state:
          $ref: "#/components/schemas/AuctionResultState"
    AuctionCredentials:
      description: The login credentials for an exchange.
      type: object
      required:
        - username
        - password
      properties:
        username:
          description: The username of the exchange account.
          type: string
        password:
          description: The password of the exchange account.
          type: string
          format: password
        certificate_bundle:
          description: Base64 encoded client certificate bundle, only pkcs#12 bundles are supported.
          type: string
          format: byte
        certificate_password:
          description: Password for the client certificate bundle.
          type: string
          format: password
    AuctionConfig:
      description: The configuration of the auction module for an exchange.
      type: object
      required:
        - exchange
        - portfolios
      properties:
        portfolios:
          type: array
          items:
            $ref: "#/components/schemas/AuctionExchangePortfolio"
    AuctionExchangePortfolio:
      type: object
      description: |
        A exchange portfolio that the currently logged in user has access to. If a exchange portfolio
        is mapped to a PowerBot portfolio, the ID of the PowerBot portfolio is provided for respective
        areas.
      required:
        - name
        - delivery_areas
      properties:
        exchange_portfolio_name:
          type: string
          description: The name of the portfolio. Unique across portfolios.
        delivery_areas:
          type: array
          items:
            $ref: '#/components/schemas/AuctionExchangePortfolioDeliveryArea'
    AuctionExchangePortfolioCurrency:
      type: object
      properties:
        exchange_portfolio_name:
          type: string
        currency:
          type: string
    AuctionExchangePortfolioDeliveryArea:
      description: The delivery areas of the exchange portfolio, grouped by currency.
      type: object
      required:
        - currency
        - delivery_area
      properties:
        currency:
          type: string
        delivery_area:
          type: string
        powerbot_portfolio_id:
          description: The powerbot portfolio ID to which the delivery area + exchange portfolio is mapped.
          type: string
    AuctionExchange:
      required:
        - exchange
        - status
      type: object
      properties:
        exchange:
          $ref: "#/components/schemas/Exchange"
        status:
          type: string
          description: The status of the exchange.
          enum:
            - LOGGED_IN
            - LOGGED_OUT
            - UNKNOWN
        logged_in_username:
          type: string
          description: The username of the currently logged in account.
    AuctionExchangePortfolioMapping:
      type: object
      properties:
        powerbot_portfolio_id:
          type: string
          description: The ID of the PowerBot portfolio.
        exchange_portfolio_name:
          type: string
          description: The ID of the exchange portfolio.
        currency_mapping:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryAreaCurrencyMapping"
        delivery_areas:
          description: |-
            A subset of delivery areas the exchange portfolio has access to, to which the mapping
            should be applied.
          type: array
          items:
            type: string
    DeliveryAreaCurrencyMapping:
      description: |-
        A optional configuration parameter in case the exchange portfolio has the same delivery area in multiple currencies.
        In that case it is required to provide currency mapping for that area. Areas without conflict do not have to be provided.
      type: object
      required:
        - delivery_area
        - currency
      properties:
        delivery_area:
          description: The delivery area of the mapping.
          type: string
        currency:
          description: The currency of the mapping.
          type: string
    AuctionOrderEntry:
      type: object
      required:
        - auction_id
        - delivery_area
        - portfolio_id
        - order_data
      properties:
        auction_id:
          description: The ID of the auction.
          type: string
        delivery_area:
          description: The designated delivery area of the order.
          type: string
        portfolio_id:
          description: The portfolio ID of the order.
          type: string
        order_data:
          $ref: "#/components/schemas/AuctionOrderData"
    AuctionOrderData:
      description: The order data of the order. Either curves or blocks, but not both.
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: "#/components/schemas/Block"
        curves:
          type: array
          items:
            $ref: "#/components/schemas/Curve"
    Block:
      type: object
      required:
        - id
        - price
        - minimum_acceptance_ratio
        - type
        - periods
      properties:
        id:
          type: string
          description: The identifier of the block.
        price:
          type: number
          format: double
          description: The price of the block.
        minimum_acceptance_ratio:
          type: number
          format: double
          description: The minimum acceptance ratio of the block.
        comment:
          type: string
          description: The comment of the block.
        type:
          $ref: "#/components/schemas/BlockType"
        type_value:
          description: |-
            The value relevant for the block type. E.g. the ID of the parent block for a linked block
            or the group ID for an exclusive block.
          type: string
        state:
          $ref: "#/components/schemas/BlockState"
        periods:
          type: array
          items:
            $ref: "#/components/schemas/BlockPeriod"
    BlockState:
      description: |
        The state of an block. Initially `ACCEPTED` and after auction result publication updated to
        either `EXECUTED` or `REJECTED`.
      type: string
      enum:
        - ACCEPTED
        - EXECUTED
        - REJECTED
    BlockType:
      description: |-
        * REGULAR: A regular block is a block that is not linked to any other block. Being referenced by another block
        indicated that the regular block is the parent block.
        * LINKED: A linked block is a child of its parent block and linked to it. Requires that the parent block is
        executed first before the child is considered. It can occur that only the parent block is executed, which still
        leads to the acceptance of the whole block order.
        * EXCLUSIVE: An exclusive group of block orders is a set of block orders for which the algorithm may accept any
        combination of them as long as the sum of Actual Acceptance Ratios (ratio of accepted volume to total block volume)
        of the exclusive group block orders is less than or equal to 1.
        * LOOP: A collection of blocks that require complete execution or rejection of all blocks in the loop.
        * SPREAD: A block pair where one of the blocks has to be a buy block and the other block has to be a sell block.
        * PROFILE: A profile block is a block order where volume can differ over the entire time span (periods) of the block.
        It is not possible to have both buy and sell volumes in the same block.
      type: string
      enum:
        - REGULAR
        - LINKED
        - EXCLUSIVE
        - LOOP
        - SPREAD
        - PROFILE
    BlockPeriod:
      description: A period of a block.
      type: object
      required:
        - contract_id
        - quantity
      properties:
        contract_id:
          description: The contract ID of the period.
          type: string
        quantity:
          description: The quantity of the period.
          type: number
          format: double
    Curve:
      description: A list of discrete number pair making up a curve.
      type: object
      required:
        - contract_id
        - curve_points
      properties:
        contract_id:
          description: The contract ID of the curve.
          type: string
        comment:
          description: The comment of the curve. This field will be identical across all curves in case its a nordpool order.
          type: string
          maxLength: 255
          example: "Forecast based Order"
        curve_points:
          type: array
          minItems: 2
          items:
            $ref: "#/components/schemas/CurvePoint"
    CurvePoint:
      description: A point of a curve, consisting of a number pair.
      required:
        - price
        - quantity
      type: object
      properties:
        price:
          type: number
          format: double
          example: -500.00
          description: The price point.
        quantity:
          type: number
          format: double
          example: 10.00
          description: The quantity point. To specify a sell quantity, use a negative value.
    AuctionOrder:
      type: object
      description: The order of an auction.
      required:
        - order_id
        - auction_id
        - delivery_area
        - portfolio_id
        - modified_at
        - revision
        - state
        - order_data
      properties:
        order_id:
          description: The ID of the current order revision.
          type: string
        auction_id:
          description: The ID of the auction.
          type: string
        delivery_area:
          description: The delivery area of the order.
          type: string
        portfolio_id:
          description: The ID of the portfolio.
          type: string
        currency:
          description: The currency of the order.
          type: string
        modified_at:
          description: The timestamp of the last order modification.
          type: string
          format: date-time
        revision:
          type: integer
          format: int32
        state:
          $ref: "#/components/schemas/AuctionOrderState"
        type:
          $ref: '#/components/schemas/AuctionOrderType'
        order_data:
          $ref: "#/components/schemas/AuctionOrderData"
    AuctionOrderType:
      description: The type of an order.
      type: string
      enum:
        - CURVE
        - BLOCK
    AuctionOrderState:
      description: |-
        The state of an order.
        * PENDING_CONFIRMATION: order was created and waiting for confirmation, only applicable for staged orders
        * ACCEPTED: order was accepted by the exchange and entered to the market
        * CANCELLED: order was cancelled by the exchange or user (deletion)
        * RESULTS_PUBLISHED: auction results for the order were published
      type: string
      enum:
        - PENDING_CONFIRMATION
        - ACCEPTED
        - CANCELLED
        - RESULTS_PUBLISHED
    AuctionTrade:
      description: todo
      type: object
      required:
        - id
        - auction_id
        - contract_id
        - order_id
        - delivery_area
        - price
        - quantity
        - state
        - user_id
      properties:
        id:
          description: The ID of the trade, provided by the exchange.
          type: string
        auction_id:
          description: The ID of the auction the trade belongs to.
          type: string
        contract_id:
          description: The ID of the contract the trade belongs to.
          type: string
        delivery_start:
          description: The delivery start of the trade.
          type: string
          format: date-time
        delivery_end:
          description: The delivery end of the trade.
          type: string
          format: date-time
        order_id:
          description: The ID of the order the trade belongs to.
          type: string
        delivery_area:
          description: The delivery area of the trade.
          type: string
        price:
          description: The price of the trade.
          type: number
          format: double
        currency:
          type: string
        quantity:
          description: The quantity of the trade.
          type: number
          format: double
        state:
          $ref: "#/components/schemas/AuctionTradeState"
        user_id:
          type: string
          description: The exchange user that was used to place the order
    AuctionTradeState:
      description: The state of an trade.
      type: string
      enum:
        - PRELIMINARY_RESULTS
        - INITIAL_PRICE
        - FINAL
    ExecutionInstruction:
      type: string
      default: VALID
      enum:
        - NONE
        - VALID
        - LNKD
      description: |-
        Defines the execution instruction for the whole list of orders:
          * **NONE**: All orders are treated independently.
          * **VALID**: default. All orders must be valid, meaning they must pass the order validation of the exchange system (e.g. the price of the order must be in the price range of the product). If one order does not pass the validation, the full list of submitted orders is rejected.
          * **LNKD**: Linked orders - the provided orders are linked together and should be executed all at once. This option can only be used if all orders have the same product and the execution restriction FOK (Fill-or-Kill). In case one of the orders cannot be executed, the whole list is not executed by the exchange.
    OrderActionQuota:
      type: number
      description: |-
        **Only supported for EPEX, Nord Pool, IBEX and CROPEX**

        The percentage (0.0 - 1.0) of consumed order entry/modification quota calculated depending on the underlying exchange.

        This value is calculated based on the following formula:

        `max{short_usage/short_limit, long_usage/long_limit}`
    TextMatchingMode:
      type: string
      description: The type of matching mode.
      default: EXACT
      enum:
        - EXACT
        - SUBSTRING
        - REGEX
    Exchange:
      type: string
      enum:
        - epex
        - nordpool
        - hupx
        - southpool
        - semo
        - ibex
        - cropex
        - tge
        - opcom
        - etpa
        - brm
    ContractType:
      type: string
      description: |-
        The type of the contract.
        * PDC: Only pre-defined contracts
        * UDC: Only user-defined contracts
        * ALL: All kind of contracts (pre-defined and user-defined)
      default: PDC
      enum:
        - PDC
        - UDC
        - ALL
    AlgoStatus:
      type: string
      description: The current state of the algorithm-instance.
      enum:
        - IDLE
        - RUNNING
        - FAILED
    AlgoInstanceChange:
      type: string
      enum:
        - STOPPED
        - STARTED
        - FAILED
    OnMissingHeartbeat:
      type: string
      description: Specifies how the algorithm will handle orders if a heartbeat
        is missed. Invalid values will be ignored.
      enum:
        - DO_NOTHING
        - DELETE_ORDERS
    InstanceHeartbeatStatus:
      type: string
      description: Information about the status of the algorithm
      enum:
        - OK
        - FAILURE
    AggressorIndicator:
      type: string
      description: |-
        Indicates whether the executed order was a trade aggressor or trade originator.
        * Y - Trade aggressor
        * N - Trade originator
        * U - Unknown, for executed orders of remote products and data before migration
      enum:
        - Y
        - N
        - U
    Severity:
      type: string
      description: The severity of the log entry
      default: MED
      enum:
        - LOW
        - MED
        - HIG
        - ERR
        - URG
    ValidityRestriction:
      type: string
      description: |-
        Set this field, if you want to update the validity restriction of the order
        * GFS (Good for trading session): The order stays in the order book until it is either executed, removed by the user or the current trading session (trading phase) of the underlying contract ends.
        * GTD (Good till date): The order stays in the order book until the date specified in the validityDate field.
        * NON (No validity restriction): Mandatory for orders with the execution restriction `FOK` or `IOC`.
      enum:
        - GFS
        - GTD
        - NON
    MarketState:
      type: string
      description: |-
        The current state of the market
        * OK         Everything's ok, trading is possible
        * WARNING    Trading might not be possible, check the messages.
        * FAILURE    Trading is not possible right now.
        * LOGGED_OUT Not logged in.
      enum:
        - OK
        - WARNING
        - FAILURE
        - LOGGED_OUT
    TradeState:
      type: string
      description: |-
        * CNCL: Trade was cancelled by market operations.
        * RREJ: Requested Recall was rejected by market operations.
        * RGRA: Requested Recall was granted by market operations.
        * RREQ: Recall of this trade was requested.
        * ACTI: Trade is active (this is the default value).
        * CREQ: cancel was requested from local market operations.
        * CREJ: cancel was rejected by global market operations.
        * RSFA: Request sent for approval to SOB (XBID).
      default: ACTI
      enum:
        - CNCL
        - RREJ
        - RGRA
        - RREQ
        - ACTI
        - CREQ
        - CREJ
        - RSFA
    OrderExecutionRestriction:
      type: string
      description: |-
        Set this field if you want to update the order's execution restriction
        * NON: No restriction. This is the default.
        * FOK: (Fill or Kill) - The order is immediately fully executed or deleted.
        * IOC: (Immediate and cancel): The order is executed immediately to its maximum extend. In case of a partial execution, the remaining volume is removed from the order book.
        * AON: (All or None): The order must be filled completely or not at all. The order stays in the order book until it is executed or removed by the system or user. AON is only allowed for User Defined Contracts (UDC).
        * AU (Auction): The order was entered in auction phase (no restriction is applied)
      default: NON
      example: NON
      enum:
        - FOK
        - IOC
        - NON
        - AON
        - AU
    OrderSide:
      type: string
      enum:
        - SELL
        - BUY
    OrderState:
      type: string
      description: |-
        The current state of the order in the system.
        * HIBE: The order is entered into the backend system but not exposed to the market.
        * ACTI: The order is entered and immediately exposed to the market for execution.
        * IACT: The order is deleted.
        * UNKW: The order state is unknown.
      enum:
        - ACTI
        - HIBE
        - IACT
        - UNKW
    OrderAction:
      type: string
      description: |-
        The action which has been carried out for the order
        * UADD: Order added by the user.
        * UHIB: Order deactivated by the user.
        * UMOD: Order modified by the user.
        * UDEL: Order deleted by the user.
        * UREJ: Pre-arranged order rejected by the user.
        * AADD: Order added by market operations on behalf.
        * AHIB: Order deactivated by market operations on behalf.
        * AMOD: Order modified by market operations on behalf.
        * ADEL: Order deleted by market operations on behalf.
        * AREJ: Pre-arranged order rejected by market operations on behalf.
        * SADD: Order added by the system.
        * SHIB: Order deactivated by the system.
        * SMOD: Order modified by the system.
        * SDEL: Order deleted by the system.
        * SREJ: Pre-arranged order rejected by system.
        * FEXE: Order is fully executed.
        * PEXE: Partial execution of order.
        * IADD: A new slice of an iceberg order was added to the service.
        * SERR: The order validation failed on SOB side, or the request sent to SOB timed out. This is only valid for remote orders.
        * SNAV: Order state is unknown due to SOB unavailability. This is only valid for remote orders.
        * QADD: Quote was added
        * QFEX: Quote was fully executed
        * QPEX: Quote was partially executed
        * RLVI: Order violates limits set at PowerBot
      enum:
        - UADD
        - UHIB
        - UMOD
        - UDEL
        - UREJ
        - AADD
        - AHIB
        - AMOD
        - ADEL
        - AREJ
        - SADD
        - SHIB
        - SMOD
        - SDEL
        - SREJ
        - FEXE
        - PEXE
        - IADD
        - SERR
        - SNAV
        - QADD
        - AFEX
        - QPEX
        - RLVI
    OrderType:
      type: string
      description: |-
        * O: Regular limit order.
        * B: User defined block order.
        * I: Iceberg order.
      example: O
      enum:
        - O
        - B
        - I
    SelfTradeSelector:
      type: string
      default: INCLUDED
      enum:
        - INCLUDED
        - EXCLUDED
        - EXCLUSIVELY
    ApiKeyType:
      type: string
      description: |-
        * MASTER_API_KEY: Configured by us and exists only once. Its primary purpose is to manage tenants, portfolios and algorithms.
        * STANDARD_API_KEY: For most use cases like posting signals or placing orders.
        * TENANT_MASTER_API_KEY: Similar to the master with the restriction that it can only manage one tenant.
        * SCHEDULING_API_KEY: A special access key that can only get trades but across all tenants at once.
        * ALGO_MANAGEMENT_API_KEY: Used for managed algo hosting to dynamically provision algorithm access.
        * DEBUGGING_API_KEY: Allows us to have read only access to all portfolios and tenants for remote troubleshooting reasons.
      enum:
        - MASTER_API_KEY
        - STANDARD_API_KEY
        - TENANT_MASTER_API_KEY
        - SCHEDULING_API_KEY
        - ALGO_MANAGEMENT_API_KEY
        - DEBUGGING_API_KEY
    PortfolioType:
      type: string
      description: |-
        The type of the portfolio:
         * `READ_ONLY` A read-only portfolio is not allowed to add orders and modify orders to active. Deletion and deactivation of orders are still possible.
         * `STANDARD`  A standard portfolio does not impose any limitations on the permissible trade actions.
         * `SHADOW_TRADING` Shadow trading portfolios allow simulated trading using real-time data, without transmitting orders to the exchange. Keep in mind that a tenant with regular portfolios cannot have shadow trading portfolios or vice versa.
      enum:
        - STANDARD
        - READ_ONLY
        - SHADOW_TRADING
    LimitViolation:
      type: object
      properties:
        message:
          type: string
        contractId:
          type: string
        deliveryArea:
          type: string
        violationType:
          type: string
          enum:
            - CASH_LIMIT
            - POSITION_LIMIT
            - POSITION_EXPECTATION
            - OTR_LIMIT
            - ORDER_QUOTA_LIMIT
    SubscriptionEndpoint:
      type: object
      properties:
        protocol:
          type: array
          items:
            type: string
        path:
          type: string
        destination:
          type: string
        description:
          type: string
        payloadClasses:
          type: array
          items:
            type: string
    MarketStatusChangedEvent:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        marketStatus:
          $ref: '#/components/schemas/MarketStatus'
    OwnOrderChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        orders:
          type: array
          items:
            $ref: '#/components/schemas/OwnOrder'
    OwnTradeChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        trades:
          type: array
          items:
            $ref: '#/components/schemas/Trade'
        internalTrades:
          type: array
          items:
            $ref: '#/components/schemas/InternalTrade'
    PublicTradeChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        trades:
          type: array
          items:
            $ref: '#/components/schemas/PublicTrade'
    OrderBookChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        contract_id:
          type: string
        contract_type:
          $ref: '#/components/schemas/ContractType'
        delivery_area:
          type: string
        active_since:
          type: string
          description: The timestamp (UTC) since when the contract has been observed
            as active for trading in the corresponding delivery area. Is reset to
            current time after a system or market outage or after the market was hibernated.
            Can be used to determine potential low liquidity situations after activation
            of new contracts or market outages.
          format: date-time
        revision:
          type: integer
          format: int64
        sequence_number:
          type: integer
          description: 'DEPRECATED: use revision instead'
          deprecated: true
          format: int64
        best_price_changed:
          deprecated: true
          type: boolean
          description: True if the best ask or best bid order changed.
        best_bid_price_changed:
          $ref: '#/components/schemas/BestBidPriceChanged'
        best_ask_price_changed:
          $ref: '#/components/schemas/BestAskPriceChanged'
        best_bid_quantity_changed:
          $ref: '#/components/schemas/BestBidQtyChanged'
        best_ask_quantity_changed:
          $ref: '#/components/schemas/BestAskQtyChanged'
        delta:
          type: boolean
          description: if set to true, the change is delta otherwise a full snapshot
            of the orderbook
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
        orders:
          $ref: '#/components/schemas/Orders'
    OrderBookGroup:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        best_price_changed:
          deprecated: true
          type: boolean
          description: True if the best ask or best bid order changed.
        best_bid_price_changed:
          $ref: '#/components/schemas/BestBidPriceChanged'
        best_ask_price_changed:
          $ref: '#/components/schemas/BestAskPriceChanged'
        best_bid_quantity_changed:
          $ref: '#/components/schemas/BestBidQtyChanged'
        best_ask_quantity_changed:
          $ref: '#/components/schemas/BestAskQtyChanged'
        changed_contract:
          $ref: '#/components/schemas/RelatedContract'
        related_contracts:
          type: array
          items:
            $ref: '#/components/schemas/RelatedContract'
    BestBidPriceChanged:
      type: boolean
      description: True if the best best bid order changed.
    BestAskPriceChanged:
      type: boolean
      description: True if the best best ask order changed.
    BestBidQtyChanged:
      type: boolean
      description: True if the quantity of the best bid order changed.
    BestAskQtyChanged:
      type: boolean
      description: True if the quantity of the best ask order changed.
    RelatedContract:
      type: object
      properties:
        contract_id:
          type: string
        product:
          type: string
          description: The contract's product.
          example: Intraday_Power_D
        delivery_area:
          type: string
          description: The EIC of the delivery area of the order book's product.
        active_since:
          type: string
          description: The timestamp (UTC) since when the contract has been observed
            as active for trading in the corresponding delivery area. Is reset to
            current time after a system or market outage or after the market was hibernated.
            Can be used to determine potential low liquidity situations after activation
            of new contracts or market outages.
          format: date-time
        revision:
          type: integer
          description: Revision number of the order book.
          format: int64
        sequence_number:
          type: integer
          description: 'DEPRECATED: use revision instead'
          deprecated: true
          format: int64
        delivery_start:
          type: string
          description: Delivery start of the contract.
          format: date-time
        delivery_end:
          type: string
          description: Delivery end of the contract.
          format: date-time
        best_own_bid_price:
          type: number
          description: Best bid price placed by your exchange member.
          example: 12.4
        best_own_bid_quantity:
          type: number
          description: Quantity of the best bid placed by your exchange member.
          example: 34.0
        best_own_ask_price:
          type: number
          description: Best ask price placed by your exchange member.
          example: 18.4
        best_own_ask_quantity:
          type: number
          description: Quantity of the best ask placed your exchange member.
          example: 18.4
        best_third_party_bid_price:
          type: number
          description: Best bid price placed by an exchange member other than yours.
          example: 12.4
        best_third_party_bid_quantity:
          type: number
          description: Quantity of the best bid placed by an exchange member other than yours.
          example: 34.0
        best_third_party_ask_price:
          type: number
          description: Best ask price placed by an exchange member other than yours.
          example: 18.4
        best_third_party_ask_quantity:
          type: number
          description: Quantity of the best ask placed by an exchange member other than yours.
          example: 18.4
        last_price:
          type: number
          description: |-
            The price of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 24.3
        last_quantity:
          type: number
          description: |-
            The quantity of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 15.3
    CapacityChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        changes:
          type: array
          items:
            $ref: '#/components/schemas/Capacity'
    SignalChanges:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        portfolio_id:
          type: string
        signals:
          type: array
          items:
            $ref: '#/components/schemas/Signal'
    OrderBookChangedEvent:
      type: object
      properties:
        messageClass:
          type: string
        portfolio_id:
          type: string
        emittedAt:
          type: string
          format: date-time
        contract_id:
          type: string
        contract_type:
          $ref: '#/components/schemas/ContractType'
        delivery_area:
          type: string
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
        active_since:
          type: string
          description: The timestamp (UTC) since when the contract has been observed
            as active for trading in the corresponding delivery area. Is reset to
            current time after a system or market outage or after the market was hibernated.
            Can be used to determine potential low liquidity situations after activation
            of new contracts or market outages.
          format: date-time
        revision:
          type: integer
          format: int64
        sequence_number:
          type: integer
          description: 'DEPRECATED: use revision instead'
          deprecated: true
          format: int64
        best_price_changed:
          deprecated: true
          type: boolean
          description: True if the best ask or best bid order changed.
        best_bid_price_changed:
          $ref: '#/components/schemas/BestBidPriceChanged'
        best_ask_price_changed:
          $ref: '#/components/schemas/BestAskPriceChanged'
        best_bid_quantity_changed:
          $ref: '#/components/schemas/BestBidQtyChanged'
        best_ask_quantity_changed:
          $ref: '#/components/schemas/BestAskQtyChanged'
    ContractChangedEvent:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        contract_id:
          type: string
        contract_name:
          type: string
        contract_type:
          $ref: '#/components/schemas/ContractType'
        delivery_area:
          type: string
        trading_enabled:
          type: boolean
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
    PortfolioChanges:
      type: object
      properties:
        messageClass:
          type: string
        portfolio_id:
          type: string
        delivery_area:
          type: string
        algoChanges:
          type: array
          items:
            $ref: '#/components/schemas/AlgoEvent'
        signalChanges:
          type: array
          items:
            $ref: '#/components/schemas/SignalChanges'
        ownTradeChanges:
          type: array
          items:
            $ref: '#/components/schemas/OwnTradeChanges'
        ownOrderChanges:
          type: array
          items:
            $ref: '#/components/schemas/OwnOrderChanges'
        orderBookChanges:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookChanges'
        contractChanges:
          type: array
          items:
            $ref: '#/components/schemas/ContractChangedEvent'
        publicTradeChanges:
          type: array
          items:
            $ref: '#/components/schemas/PublicTradeChanges'
    AlgoEvent:
      type: object
      properties:
        messageClass:
          type: string
        algorithm_id:
          type: string
        algo_name:
          type: string
        require_heartbeat_every_seconds:
          type: integer
          format: int32
        instance_id:
          type: string
        instance_parameters:
          type: object
          properties: { }
        portfolio_id:
          type: string
        emittedAt:
          type: string
          format: date-time
        stop_status_text:
          type: string
        action:
          $ref: '#/components/schemas/AlgoStatus'
    AlgoInstanceEvent:
      type: object
      properties:
        messageClass:
          type: string
        algorithm:
          $ref: '#/components/schemas/AlgoDetails'
        emittedAt:
          type: string
          format: date-time
        change:
          $ref: '#/components/schemas/AlgoInstanceChange'
      required:
        - change
        - emittedAt
        - algorithm
    OwnOrderChangedEvent:
      type: object
      properties:
        messageClass:
          type: string
        portfolio_id:
          type: string
        delivery_area:
          type: string
        emittedAt:
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/OrderState'
        order_id:
          type: string
        action:
          $ref: '#/components/schemas/OrderAction'
    TradeChangedEvent:
      type: object
      properties:
        messageClass:
          type: string
        delivery_area:
          type: string
        sell_portfolio_id:
          type: string
        buy_portfolio_id:
          type: string
        emittedAt:
          type: string
          format: date-time
        trade_id:
          type: string
        trade_type:
          type: string
          enum:
            - INTERNAL
            - PUBLIC
        state:
          $ref: '#/components/schemas/TradeState'
        delivery_start:
          type: string
          description: Time when the delivery of this trade starts (UTC timezone)
          format: date-time
        delivery_end:
          type: string
          description: Time when the delivery of this trade ends (UTC timezone)
          format: date-time
    AlgoInstanceParameters:
      required:
        - instance_id
      type: object
      properties:
        instance_id:
          pattern: '[a-zA-Z0-9._-]+'
          type: string
          description: Unique id which needs to be provided to identify the algorithm
            instance.
        tenant_id:
          type: string
          description: master-API-key needs to specify a tenant on creation. For tenant-master-API-keys
            this field is optional, as the tenant is already specified via the key.
        portfolio_ids:
          type: array
          description: Specify the portfolios the algorithm should run in.
          items:
            type: string
        parameters:
          type: object
          properties: { }
          description: A freely defined JSON object with key/value pairs.
        resources:
          $ref: '#/components/schemas/Resources'
    Resources:
      type: object
      description: |-
        Specifies the amount of resources an algorithm receives.
      properties:
        requests:
          $ref: '#/components/schemas/Requests'
    Requests:
      type: object
      description: |-
        Specifies the amount of resources an algorithm receives.
      properties:
        cpu:
          $ref: '#/components/schemas/CPU'
        memory:
          $ref: '#/components/schemas/Memory'
    Memory:
      type: string
      description: |-
        The amount of memory that will be assigned to the algorithm. The recommended format is a number
        followed by a suffix (e.g. Mi, Gi).
      example: "256Mi"
    CPU:
      type: string
      description: |-
        The number of CPU cores that will be assigned to the algorithm provided as a decimal number,
        e.g. "0.5", or "millicpus", e.g "500m".
      example: "0.5"
    AlgoCommand:
      type: object
      properties:
        command:
          type: string
          description: The command for the algorithm-instance.
          enum:
            - START
            - STOP
    AlgoDetails:
      type: object
      properties:
        algo_id:
          type: string
          description: The id of the algorithm
        algo_name:
          type: string
          description: The name of the algorithm
        algo_description:
          type: string
          description: The description of the algorithm
        require_heartbeat_every_seconds:
          type: integer
          format: int32
          description: Information on how often the heartbeat requires a heartbeat
        on_missing_heartbeat:
          $ref: '#/components/schemas/OnMissingHeartbeat'
        image:
          type: string
          description: The image of the algorithm, this can be any valid docker image
            name with a tag. The tag can not be "latest" to avoid accidental upgrades.
        instances:
          type: array
          description: Returns the running and recently exited / stale instances
          items:
            $ref: '#/components/schemas/AlgoInstance'
        parameter_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by the algo.
        parameter_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by the algo.
        signal_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by signals.
        signal_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by signals.
        resources:
          $ref: '#/components/schemas/Resources'
    AlgoInstance:
      type: object
      properties:
        instance_id:
          type: string
          description: Unique id of the instance
        exchange:
          type: string
          description: Specifies the exchange from which the instance has been created.
        tenant_id:
          type: string
          description: The tenant for this instance.
        portfolio_ids:
          type: array
          description: The configured portfolios for this instance.
          items:
            type: string
        parameters:
          type: object
          properties: { }
          description: A freely defined JSON object with key/value pairs.
        status:
          $ref: '#/components/schemas/AlgoStatus'
        started_at:
          type: string
          description: A timestamp containing information on when the alogrithm-instance
            was started.
          format: date-time
        stopped_at:
          type: string
          description: A timestamp containing information on when the alogrithm-instance
            was stopped.
          format: date-time
        stop_status_text:
          type: string
          description: A message containing detail information on why the algorithm-instance
            was stopped.
        last_heartbeat_at:
          type: string
          description: A timestamp containing information on when the last heartbeat
            was received.
          format: date-time
        resources:
          $ref: '#/components/schemas/Resources'
        heartbeat:
          $ref: '#/components/schemas/AlgoHeartbeat'
    AlgoHeartbeat:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/InstanceHeartbeatStatus'
        status_text:
          type: string
          description: Detail information about the status
    AlgoSetup:
      required:
        - id
        - on_missing_heartbeat
        - require_heartbeat_every_seconds
      type: object
      properties:
        id:
          pattern: '[a-zA-Z0-9._-]+'
          type: string
          description: A unique id of the algorithm
        name:
          type: string
          description: The name of the algorithm
        description:
          type: string
          description: A short description of the algorithm
        require_heartbeat_every_seconds:
          type: integer
          format: int32
          minimum: 1
          description: Specifies how often the algorithm requires a heartbeat via
            POST/.../heartbeat. Floating point values will be rounded to the nearest
            integer.
        on_missing_heartbeat:
          $ref: '#/components/schemas/OnMissingHeartbeat'
        image:
          type: string
          description: The image of the algorithm, this can be any valid docker image
            name with a tag. The tag can not be "latest" to avoid accidental upgrades.
        parameter_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by the algo.
        parameter_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by the algo.
        signal_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by the algo.
        signal_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by the algo.
        resources:
          $ref: '#/components/schemas/Resources'
    ValidationSchema:
      required:
        - type
        - name
        - version
        - parameters
      type: object
      properties:
        type:
          $ref: '#/components/schemas/ValidationSchemaType'
        name:
          type: string
          description: The name of the schema.
          example: "pos_opener"
          maxLength: 255
          minLength: 1
          pattern: '[a-zA-Z0-9._\-]+'
        version:
          type: string
          description: The version of the related algorithm that uses this schema.
          example: "1.0"
          maxLength: 255
          minLength: 1
          pattern: '[a-zA-Z0-9._\-]+'
        description:
          type: string
          description: A description text detailing information regarding the schema.
          example: "An example description for a schema."
          maxLength: 1024
        parameters:
          type: object
          description: The contents of the schema
    ValidationSchemaType:
      type: string
      description: The type of a validation schema.
      enum:
        - ALGO_PARAMETER
        - SIGNAL_PARAMETER
    UpdateInstanceRequest:
      type: object
      properties:
        resources:
          $ref: '#/components/schemas/Resources'
    UpdateAlgoSetup:
      type: object
      properties:
        name:
          type: string
          description: The name of the algorithm
        description:
          type: string
          description: A short description of the algorithm
        require_heartbeat_every_seconds:
          type: integer
          format: int32
          description: Specifies how often the algorithm requires a heartbeat via
            POST/.../heartbeat. Must be > 0
        on_missing_heartbeat:
          $ref: '#/components/schemas/OnMissingHeartbeat'
        image:
          type: string
          description: The image of the algorithm, this can be any valid docker image
            name with a tag. The tag can not be "latest" to avoid accidental upgrades.
        parameter_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by the algo.
        parameter_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by the algo.
        signal_schema_name:
          type: string
          description: The JSON schema name for the payload of object parameters required by signals.
        signal_schema_version:
          type: string
          description: The JSON schema version for the payload of object parameters required by the signals.
        resources:
          $ref: '#/components/schemas/Resources'
    AtcStatus:
      required:
        - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/MarketState'
        status_text:
          type: string
        heartbeat_as_of:
          type: string
          description: The timestamp when the last heartbeat of the hub-to-hub module
            has been received (should be not older than 5 seconds)
          format: date-time
          example: 2018-04-05T10:00:00Z
    MarketStatus:
      required:
        - status
      type: object
      properties:
        server_version:
          type: string
        exchange:
          $ref: '#/components/schemas/Exchange'
        exchange_mode:
          type: string
          enum:
            - production
            - simulation
        exchange_user:
          type: string
          description: The user that is use to authenticate with the exchange
        app_id:
          type: string
        api_timestamp:
          type: string
          description: The timestamp when the status of the market was last checked.
          format: date-time
        certificate_expiration_date:
          type: string
          description: The expiration date of the client certificate
          format: date-time
        status:
          $ref: '#/components/schemas/MarketState'
        options:
          $ref: '#/components/schemas/MarketOptions'
        atc_status:
          $ref: '#/components/schemas/AtcStatus'
        urls:
          type: array
          description: The urls of the exchange's backend system the server is connected
            to
          items:
            type: string
            example: simu1.epex.m7.deutsche-boerse.com
        products:
          type: array
          deprecated: true
          description: |-
            DEPRECATED: Use `GET /delivery-areas` or `GET /delivery-area/{area_id}` instead.
            Exchange's products which the server is linked with
          items:
            type: string
            example: Intraday_Power_D
        market_area_id:
          type: string
          description: The market the server is configured to operate in
        delivery_area_id:
          type: string
          description: The default delivery area (EIC) the server is configured
            to operate in
        available_delivery_area_ids:
          type: array
          description: The available delivery areas EICs
          items:
            type: string
        inactive_delivery_area_ids:
          type: array
          description: Delivery areas that are accessible through the exchange API, but not unlocked in PowerBot.
          items:
            type: string
        exchange_limits:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeCashLimit'
        session_id:
          type: string
          description: The current session id with the exchange
          example: "23423423423"
        logged_in_since:
          type: string
          description: The timestamp (UTC) of the start of the current connection to
            the exchange.
          format: date-time
          example: 2018-04-05T10:00:00Z
        heartbeat_as_of:
          type: string
          description: The timestamp when the last heartbeat of the backend system
            has been received (should be not older than 5 seconds)
          format: date-time
          example: 2018-04-05T10:00:00Z
        heartbeat_content:
          type: string
          description: The content of the last heartbeat
        mfa_supported:
          type: boolean
          description: Indicates whether the exchange supports multi-factor authentication
        mfa_secret:
          type: string
          description: |-
            The MFA secret.

            **Note**: only set when it was generated.
        messages:
          type: array
          description: Messages explaining the state of the market
          items:
            type: string
            example: OK - trading is possible
        mode:
          type: string
          enum:
            - NORMAL
            - SAFE
        order_action_quota:
          $ref: '#/components/schemas/OrderActionQuota'
        available_account_ids:
          type: array
          description: The available exchange account IDs
          items:
            type: string
    Message:
      type: object
      properties:
        message_id:
          type: string
        api_timestamp:
          type: string
          format: date-time
        category:
          type: string
          enum:
            - INQUIRY_REQUEST
            - MANAGEMENT_REQUEST
            - RESPONSE
            - BROADCAST
        message_class:
          type: string
        content_type:
          type: string
        correlation_id:
          type: string
        direction:
          type: string
          enum:
            - IN
            - OUT
        group_id:
          type: string
        group_sequence:
          type: string
        content:
          type: object
          properties: { }
    OrderBook:
      type: object
      properties:
        product:
          type: string
          description: The orderbook's product
          example: Intraday_Power_D
        product_details:
          type: object
          properties: { }
          description: The product's details (as delivered by the backend)
        delivery_area:
          type: string
          description: The EIC of the delivery area of the order book
        price_currency:
          type: string
          description: the price currency of the underlying contracts
          example: EUR
        quantity_unit:
          type: string
          description: the quantity unit of the underlying contracts
          example: MW
        contracts:
          type: array
          description: The contracts of the orderbook
          items:
            $ref: '#/components/schemas/Contract'
    OrderBooks:
      type: object
      properties:
        delivery_area:
          type: string
        delivery_area_state:
          type: string
        market_area_state:
          type: string
        portfolios:
          type: array
          items:
            type: string
        products:
          type: array
          description: The involved products of the orderbooks
          items:
            $ref: '#/components/schemas/ProductInformation'
        contracts:
          type: array
          description: The contracts of the orderbooks
          items:
            $ref: '#/components/schemas/Contract'
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Orders'
        portfolio_risk_settings:
          type: array
          items:
            $ref: '#/components/schemas/RiskManagementSettings'
        tenant_risk_settings:
          $ref: '#/components/schemas/RiskManagementSettings'
    PortfolioStatus:
      type: object
      description: |-
        Information regarding the portfolios current state.
      properties:
        rolling_window_counts:
          type: array
          items:
            $ref: '#/components/schemas/RollingWindowCount'
    RollingWindowCount:
      type: object
      properties:
        rolling_window_seconds:
          type: integer
          description: The rolling window size defines a timeframe in seconds, where orders placed or modified are counted.
        current_order_count:
          type: integer
          description: The amount of orders added or modified in a given timeframe.
    ProductInformation:
      type: object
      properties:
        product_name:
          type: string
          description: Name of the product
          example: Intraday_Power_D
        delivery_area:
          type: string
          description: The EIC of the delivery area of the order book's product
          example: 10YDE-RWENET---I
        price_currency:
          type: string
          description: the price currency of the underlying contracts
          example: EUR
        quantity_unit:
          type: string
          description: the quantity unit of the underlying contracts
          example: MW
        duration_minutes:
          type: integer
          description: the duration of the product's contracts in minutes
          example: 15
        location_required:
          type: boolean
          description: Indicates if the product requires location information within the delivery area.
    OwnOrder:
      type: object
      required:
        - state
        - side
        - delivery_area
        - action
        - contracts
      properties:
        order_id:
          type: string
          description: |-
            The unique ID of the order. **Note** if you modify an order, the ID can change! `parent_order_id` and `initial_order_id` can be used to trace ID changes.
        parent_order_id:
          type: string
          description: |-
            The ID of the previous version of the order before modification with priority change.
        initial_order_id:
          type: string
          description: |-
            The ID of the first version of the order.
        revision_no:
          type: integer
          description: The revision number of the order. Will have to be provided
            in addition with the order_id when order is modified.
          format: int64
        api_timestamp:
          type: string
          description: the time (UTC) the last update of the order was received (by PowerBot).
          format: date-time
        state:
          $ref: '#/components/schemas/OrderState'
        delivery_area:
          type: string
          description: Defines the delivery area of the order (EIC).
        last_change_timestamp:
          type: string
          description: the time the last change of the order was received (by the exchange).
          format: date-time
        buy:
          type: boolean
          description: Set to true if the order is a BUY order, false otherwise
        sell:
          type: boolean
          description: set to true if the order is a SELL order, false otherwise
        side:
          $ref: '#/components/schemas/OrderSide'
        contracts:
          deprecated: true
          type: array
          description: 'DEPRECATED: an order can only be associated with one contract, please use the top-level fields'
          items:
            $ref: '#/components/schemas/ContractReference'
        contract_id:
          type: string
          description: the ID of the order's contract
        contract_name:
          type: string
          description: the name of the order's contract
        delivery_start:
          type: string
          description: the delivery start of the order's contract
          format: date-time
        delivery_end:
          type: string
          description: the delivery end of the order's contract
          format: date-time
        clOrdrId:
          type: string
          description: The client's order number (if set during the placement of the
            order)
        txt:
          type: string
          description: The client's custom text (if set during the placement of the
            order)
        portfolio_id:
          type: string
        price:
          type: number
          description: The price of the order in the contract's currency based on exchange product specification (typically in "Currency per MWh")
        quantity:
          type: number
          description: The quantity of the order (in the contract's quantity unit
            - usually MW)
          example: 5.0
        hidden_quantity:
          type: number
          description: Contains the hidden quantity of the iceberg order. The total
            executable quantity may be calculated by adding the hidden_quantity to
            the quantity.
        display_quantity:
          type: number
          description: Used to define display the quantity of an iceberg Order.
        peak_price_delta:
          type: number
          description: The peak price delta for iceberg orders.
        action:
          $ref: '#/components/schemas/OrderAction'
        type:
          $ref: '#/components/schemas/OrderType'
        details:
          type: object
          properties: { }
          description: DEPRECATED please do not use values in this field! Most details of the order in the style of the underlying backend system.
          deprecated: true
        user_code:
          type: string
          description: the exchange's user code
        pre_arranged:
          type: boolean
        pre_arranged_acct:
          type: string
        error_message:
          type: string
        location:
          type: string
          description: Location within the delivery area.
        valid_until:
          type: string
          description: The timestamp (UTC) until the order is valid. Only applicable
            for good for session orders.
          format: date-time
        account_id:
          type: string
          description: The exchange account this order belongs to.
    OwnOrderTradingStatistics:
      type: object
      required:
        - time_series_from
        - time_series_to
        - time_series_bucket_size_seconds
        - order_revision_series
        - trade_volume_series
        - order_revisions_total
        - trade_volume_total
      properties:
        time_series_from:
          description: Start of the time period
          example: "2024-01-01T01:00:00Z"
          type: string
          format: date-time
        time_series_to:
          description: End of the time period, if bucket size does not divide end of last full bucket
          example: "2024-01-01T01:03:00Z"
          type: string
          format: date-time
        time_series_bucket_size_seconds:
          description: Length of the time bucket in seconds
          type: integer
          example: 60
          format: int64
        order_revision_series:
          description: Order revision count per bucket
          example: [ 0, 415, 311 ]
          type: array
          items:
            type: integer
            format: int32
        trade_volume_series:
          description: Trade volume sum per bucket
          example: [ 0, 0.1, 2.1 ]
          type: array
          items:
            type: number
        order_revisions_total:
          description: Total revision count over whole range
          example: 726
          type: integer
          format: int32
        trade_volume_total:
          description: Total trade volume sum over whole range
          example: 2.2
          type: number
    PublicTrade:
      type: object
      properties:
        trade_id:
          type: string
          example: "234235234"
        buy_delivery_area:
          type: string
        sell_delivery_area:
          type: string
        api_timestamp:
          type: string
          description: The timestamp (UTC) of the information being received from
            the exchange
          format: date-time
        exec_time:
          type: string
          description: The timestamp (UTC) when the public trade was executed
          format: date-time
        contract_id:
          type: string
          description: The id of the contract on which the public trade was executed
          example: "323455323"
        price:
          type: number
          description: The price (usually in EUR, but depends on the contract) of
            the public trade
          example: 23.4
        quantity:
          type: number
          description: The quantity (usually in MW, but depends on the contract) of
            the public trade
          example: 10.3
        self_trade:
          type: boolean
        active:
          type: boolean
        state:
          type: string
          enum:
            - EXECUTED
            - RECALL_REQUESTED
            - RECALL_REQUESTED_SIDC
            - RECALL_REJECTED
            - RECALLED
            - CANCELLATION_REQUESTED
            - CANCELLATION_REJECTED
            - CANCELLED
    InternalTrade:
      type: object
      properties:
        internal_trade_id:
          type: string
        exchange:
          type: string
          description: The exchange against which the internal trade was executed.
        exec_time:
          type: string
          description: The timestamp when the trade was executed (UTC time zone)
          format: date-time
        api_timestamp:
          type: string
          format: date-time
        buy_order_id:
          type: string
          description: the order_id of the underlying buy-order. If the internal trade
            was matched with a new order, the id remains empty.
          example: "6123942030"
        buy_clOrderId:
          type: string
          description: the client order id of the buy order
        buy_txt:
          type: string
          description: the custom text of the buy order
        buy_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        buy_portfolio_id:
          type: string
        buy_delivery_area:
          type: string
          example: 10YAT-APG------L
        sell_order_id:
          type: string
          description: The seller's order id. If the internal trade was matched with
            a new order, the id remains empty.
          example: "28492342354"
        sell_clOrderId:
          type: string
          description: The sell order's client id
        sell_txt:
          type: string
          description: The sell order's custom text
        sell_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        sell_portfolio_id:
          type: string
        sell_delivery_area:
          type: string
          example: 10YAT-APG------L
        contract_id:
          type: string
          description: The contract_id against which the trade was executed
          example: "2342353242"
        contract_name:
          type: string
          description: The contract's name against which the trade was executed.
          example: 17-18
        delivery_start:
          type: string
          description: Time when the delivery of this trade starts (UTC timezone)
          format: date-time
        delivery_end:
          type: string
          description: Time when the delivery of this trade ends (UTC timezone)
          format: date-time
        price:
          type: number
          description: Price of the trade
          example: 35.0
        quantity:
          type: number
          description: Quantity in MW of the trade
          example: 5.0
        prod:
          type: string
          description: Product ID
    Trade:
      type: object
      properties:
        trade_id:
          type: string
          description: Unique trade_id
          example: "383234324234"
        state:
          $ref: '#/components/schemas/TradeState'
        exchange:
          type: string
          description: The exchange where the trade was executed
          example: epex
        delivery_area:
          type: string
          description: If you sold energy with this trade, delivery_area will contain
            the sell_delivery_area, otherwise the buy_delivery_area
          example: 10YAT-APG------L
        api_timestamp:
          type: string
          description: The timestamp when the trade was received (UTC time zone)
          format: date-time
        exec_time:
          type: string
          description: The timestamp when the trade was executed (UTC time zone)
          format: date-time
        buy:
          type: boolean
          description: true if you bought energy
        sell:
          type: boolean
          description: true if you sold energy
          example: false
        buy_order_id:
          type: string
          description: the order_id of the underlying buy-order
          example: "6123942030"
        buy_delivery_area:
          type: string
          description: The delivery area of the buy-side of the trade.
        buy_clOrderId:
          type: string
          description: the client order id of the buy order
        buy_txt:
          type: string
          description: the custom text of the buy order
        buy_user_code:
          type: string
          description: the buyer's exchange user code
        buy_member_id:
          type: string
          description: the buyer's exchange member id
        buy_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        buy_portfolio_id:
          type: string
        sell_order_id:
          type: string
          description: The seller's order id
          example: "28492342354"
        sell_delivery_area:
          type: string
          description: delivery area of the sell order
          example: 10YAT-APG------L
        sell_clOrderId:
          type: string
          description: The sell order's client id
        sell_txt:
          type: string
          description: The sell order's custom text
        sell_user_code:
          type: string
          description: The seller's exchange user code
        sell_member_id:
          type: string
          description: The seller's exchange member id
        sell_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        sell_portfolio_id:
          type: string
        contract_id:
          type: string
          description: The contract_id against which the trade was executed
          example: "2342353242"
        contract_name:
          type: string
          description: The contract's name against which the trade was executed.
          example: 17-18
        delivery_start:
          type: string
          description: Time when the delivery of this trade starts (UTC timezone)
          format: date-time
        delivery_end:
          type: string
          description: Time when the delivery of this trade ends (UTC timezone)
          format: date-time
        price:
          type: number
          description: Price of the trade
          example: 35.0
        quantity:
          type: number
          description: Quantity in MW for this trade
          example: 5.0
        prod:
          type: string
          description: Product id
        self_trade:
          type: boolean
        pre_arranged:
          type: boolean
        pre_arrange_type:
          type: string
        buy_clearing_account_type:
          type: string
          description: |-
            A label for internal use, indicating whether the order is entered on its own account ("P") or as an agent ("A"). This label does not impact exchange functionality and is primarily used for internal categorization.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
        sell_clearing_account_type:
          type: string
          description: |-
            A label for internal use, indicating whether the order is entered on its own account ("P") or as an agent ("A"). This label does not impact exchange functionality and is primarily used for internal categorization.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
        buy_account_id:
          type: string
          description: |-
            The account for which the order was entered.
        sell_account_id:
          type: string
          description: |-
            The account for which the order was entered.
        location:
          type: string
          description: |-
            Location within the delivery area.

            **Note**: At this moment only M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM) supports this field.
    ContractHistoryItem:
      type: object
      properties:
        as_of:
          type: string
          description: The timestamp as of the entry is valid
          format: date-time
          example: 2018-04-05T09:00:00Z
        revisionNo:
          type: integer
          description: The running revision number of the entry
          format: int64
          example: 12
        delivery_area:
          type: string
        contract_id:
          type: string
        vwap:
          type: number
          description: The volume weighted average price at that time
          example: 12.44
        best_bid_price:
          type: number
          description: The price of the best bid.
          example: 12.4
        best_bid_quantity:
          type: number
          description: The quantity of the best bid.
          example: 34.0
        best_ask_price:
          type: number
          description: The price of the best ask.
          example: 18.4
        best_ask_quantity:
          type: number
          description: The quantity of the best ask.
        last_price:
          type: number
          description: The price of the last trade at that time
        last_quantity:
          type: number
          description: The quantity of the last trade at that time
        total_quantity:
          type: number
          description: The total volume of the contract at that time
        revision_quantity:
          type: number
          description: The traded volume since the last revision
        auction_price:
          type: number
        high:
          type: number
          description: Highest traded price since the start of the trading period
            at the current point in time.
          example: 60.2
        low:
          type: number
          description: Lowest traded price since the start of the trading period at
            the current point in time.
          example: 60.2
        signals:
          type: array
          description: Signals valid as of the current point in time.
          items:
            $ref: '#/components/schemas/Signal'
        trades:
          type: array
          description: Lists the trades which occurred since the previous point in
            time.
          items:
            $ref: '#/components/schemas/Trade'
        internal_trades:
          type: array
          description: Lists the internal trades which occurred since the previous
            point in time.
          items:
            $ref: '#/components/schemas/InternalTrade'
        orders:
          $ref: '#/components/schemas/Orders'
    ContractReference:
      type: object
      properties:
        contract_id:
          type: string
          description: The contract's unique id
          example: "2352302523"
        name:
          type: string
          description: The name of the contract
          example: 17-18
        delivery_start:
          type: string
          description: The delivery start time (UTC) of the contract
          format: date-time
          example: 2018-04-05T09:00:00Z
        delivery_end:
          type: string
          description: The delivery end time (UTC) of the contract
          format: date-time
          example: 2018-04-05T10:00:00Z
    ContractItem:
      type: object
      properties:
        exchange:
          type: string
        product:
          type: string
        contract_id:
          type: string
          description: The contract's unique id
          example: "2352302523"
        type:
          $ref: '#/components/schemas/ContractType'
        revision_no:
          type: integer
          format: int64
        state:
          type: string
        name:
          type: string
          description: The name of the contract
          example: 17-18
        delivery_start:
          type: string
          description: The delivery start time (UTC) of the contract
          format: date-time
          example: 2018-04-05T09:00:00Z
        delivery_end:
          type: string
          description: The delivery end time (UTC) of the contract
          format: date-time
          example: 2018-04-05T10:00:00Z
        contract_details:
          type: object
          deprecated: true
          properties: { }
        delivery_areas:
          type: array
          items:
            type: string
        delivery_area_states:
          type: array
          items:
            $ref: '#/components/schemas/DeliveryAreaState'
    DeliveryAreaState:
      type: object
      properties:
        delivery_area:
          type: string
          example: 10YBE----------2
        state:
          type: string
          description: State of the delivery area
          enum:
            - ACTIVE
            - INACTIVE
            - HIBERNATE
            - STANDBY
        trading_start:
          type: string
          description: The trading start time of the contract (only available
            when the contract is active)
          format: date-time
          example: 2022-08-30T11:00:00Z
        trading_end:
          type: string
          description: The trading end time of the contract (only available
            when the contract is active)
          format: date-time
          example: 2022-08-31T10:30:00Z
    BulkContractStatistics:
      type: object
      properties:
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/ContractStatistics'
    ContractStatistics:
      type: object
      properties:
        delivery_start:
          type: string
          description: The delivery start time of the contract
          format: date-time
        delivery_end:
          type: string
          description: The delivery end time of the contract
          format: date-time
        contract_id:
          type: array
          items:
            type: string
        volume:
          type: number
          description: |-
            The total volume of all trades

            All trades of contracts with the requested delivery period are included.
            Each side of a trade is counted separately, so a trade with both sides in one of the requested delivery areas gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        average_price:
          type: number
          description: |-
            The volume weighted average price

            All trades of contracts with the requested delivery period are included.
            Each side of a trade is counted separately, so a trade with both sides in one of the requested delivery areas gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
    Contract:
      type: object
      properties:
        product:
          type: string
          description: the contract's product
          example: Intraday_Power_D
        contract_id:
          type: string
          description: The contract's unique id
          example: "2352302523"
        sequence_number:
          type: integer
          format: int64
          description: 'DEPRECATED: use revision_no instead'
          deprecated: true
        type:
          $ref: '#/components/schemas/ContractType'
        state:
          type: string
          description: State of the contract
          enum:
            - ACTI
            - IACT
        active_since:
          type: string
          description: The timestamp (UTC) since when the contract has been observed
            as active for trading in the corresponding delivery area. Is reset to
            current time after a system or market outage or after the market was hibernated.
            Can be used to determine potential low liquidity situations after activation
            of new contracts or market outages.
          format: date-time
        name:
          type: string
          description: The name of the contract
          example: 17-18
        delUnits:
          type: number
          description: Delivery unit of the respective product. In case of product
            with type User-Defined Delivery Period this attribute is stored only with
            contract.
        revision_no:
          type: integer
          description: A running number starting at 0; Every time the contract changes
            (i.e. a trade is made), this number increments.
          format: int64
          example: 1
        delivery_start:
          type: string
          description: The delivery start time (UTC) of the contract
          format: date-time
          example: 2018-04-05T09:00:00Z
        delivery_end:
          type: string
          description: The delivery end time (UTC) of the contract
          format: date-time
          example: 2018-04-05T10:00:00Z
        best_bid_price:
          type: number
          description: The price of the best bid.
          example: 18.2
        best_bid_quantity:
          type: number
          description: The quantity of the best bid.
          example: 3.0
        best_ask_price:
          type: number
          description: The price of the best ask.
          example: 20.4
        best_ask_quantity:
          type: number
          description: The quantity of the best ask.
          example: 4.0
        last_price:
          type: number
          description: |-
            The price of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 24.3
        last_quantity:
          type: number
          description: |-
            The quantity of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 15.3
        total_quantity:
          type: number
          description: |-
            The total volume of all trades

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Each side of a trade is counted separately, so a trade with both sides in the same market area gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 332.3
        auction_price:
          type: number
          description: The day-ahead auction price of this contract (only available
            on Nord Pool)
        high:
          type: number
          description: |-
            The highest traded price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 60.2
        low:
          type: number
          description: |-
            The lowest traded price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 4.3
        last_trade_time:
          type: string
          format: date-time
          description: |-
            The time of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        signals:
          type: array
          description: The signals applicable for the contract
          items:
            $ref: '#/components/schemas/Signal'
        vwap:
          type: number
          description: |-
            The volume weighted average price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Each side of a trade is counted separately, so a trade with both sides in the same market area gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 12.44
        avwa:
          type: number
          description: Volume weighted average price of all asks in the order book
          example: 12.44
        bvwa:
          type: number
          description: Volume weighted average price of all bids in the order book
          example: 12.44
        exchange_otr:
          type: number
          deprecated: true
          description: |-
            DEPRECATED: replaced by order action quota.
            Use exchange_otr from portfolio_information instead
            The OTR for this contract
        tenant_otr:
          type: number
          deprecated: true
          description: |-
            DEPRECATED: replaced by order action quota.
            use tenant_otr from portfolio_information instead
            The OTR for this contract for your tenant
        trading_start:
          type: string
          description: The trading start time of the contract (only available
            when the contract is active)
          format: date-time
        trading_end:
          type: string
          description: The trading end time of the contract (only available
            when the contract is active)
          format: date-time
        order_action_quota:
          $ref: '#/components/schemas/OrderActionQuota'
        portfolio_information:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioInformation'
    Orders:
      type: object
      properties:
        contract_id:
          type: string
        product:
          type: string
          description: the contract's product
          example: Intraday_Power_D
        delivery_area:
          type: string
        sequence_number:
          type: integer
          description: 'DEPRECATED: use revision_no instead'
          deprecated: true
          format: int64
        revision_no:
          type: integer
          format: int64
        delta:
          type: boolean
          description: if true, the underlying bid / asks need to be interpreted as
            delta to the previous revision, if false the bids/ask represent a current
            snapshot.
        bid:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookEntry'
        ask:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookEntry'
    OrderBookEntry:
      type: object
      properties:
        order_id:
          type: string
        delivery_area:
          type: string
        contract_id:
          type: string
        order_entry_time:
          type: string
          format: date-time
        price:
          type: number
        quantity:
          type: number
        exeRestriction:
          type: string
        type:
          type: string
        own_order:
          type: boolean
          description: True if the order belongs to the active exchange user. Only present for active orders.
    UpdateStatus:
      required:
        - orderModType
      type: object
      properties:
        orderModType:
          type: string
          description: |-
            * ACTI: Activates the order. Ignored if already active.
            * DEAC: Deactivates (hibernates) the order. Hibernated orders are removed from the order book but are still available for modification or activation in the own orders list.
            * DELE: Delete the order
          enum:
            - ACTI
            - DEAC
            - DELE
        inclPreArranged:
          type: boolean
          description: Include pre-arranged orders
          default: false
        prodName:
          type: array
          description: Restrict the request to the given product(s)
          items:
            type: string
            example: XBID_Hour_Power
    OrderModifyItem:
      type: object
      required:
        - order_id
        - changes
      properties:
        order_id:
          type: string
        revision_no:
          type: integer
          description: |-
            The revision of the order that should be modified. If the exchange already
            has a newer revision, the modification will be rejected.

            This field is optional if the order action is `DELE` or `DEAC`. In this case, the system
            will try to set the last known revision number.
          format: int64
        changes:
          $ref: '#/components/schemas/OrderModify'
    OrderModify:
      required:
        - action
      type: object
      properties:
        action:
          type: string
          description: |-
            * ACTI: Activates the order. Ignored if already active.
            * DEAC: Deactivates (hibernates) the order. Hibernated orders are removed from the order book but are still available for modification or activation in the own orders list.
            * MODI: Modify the order
            * DELE: Delete the order
          enum:
            - ACTI
            - DEAC
            - MODI
            - DELE
        validityRes:
          $ref: '#/components/schemas/ValidityRestriction'
        validityDate:
          type: string
          description: |-
            Set this field, if you want to update the validity date of the order. Only mandatory in case of validityRes equals "GTD". It is used to define the date until which the order is valid.
            The remaining part of the order will be removed from the order book after this point in time.
          format: date-time
        type:
          $ref: '#/components/schemas/OrderType'
        txt:
          type: string
          description: Set this field if you want to update the order's 'custom text'
          example: custom_text
        ordrExeRestriction:
          $ref: '#/components/schemas/OrderExecutionRestriction'
        quantity:
          type: number
          description: Set this field if you want to update the order's quantity.
        displayQty:
          type: number
          description: Set this field if you want to update the display quantity of
            an iceberg Order. This field is required only in the case of type="I".
        price:
          type: number
          description: Set this field if you want to update the order's description.
        ppd:
          type: number
          description: |-
            Set this field if you want to update the Peak price delta for iceberg orders.
            * The ppd of buy orders must be smaller or equal than zero.
            * The ppd of sell orders must be greater or equal than zero.
            If it is omitted the system will assume a value of `0.00`.
        expectedNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details). Optional safety feature to mitigate race
            conditions if client and backend data are not in sync. Do not use this field for block products.
        expectedMinNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing
            SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedMaxNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing
            BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details). Optional safety feature to mitigate race
            conditions if client and backend data are not in sync. Do not use this field for block products.
        expectedSellAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing
            SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedBuyAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing
            BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        location:
          type: string
          description: |-
            Location within the delivery area. Should be only set for products with locations enabled.
    OrderEntry:
      required:
        - price
        - quantity
        - portfolio_id
      type: object
      properties:
        delivery_area:
          type: string
          description: The delivery area of the orderbook's product. Mandatory in
            a multi-delivery-area configuration
        portfolio_id:
          type: string
        side:
          $ref: '#/components/schemas/OrderSide'
        prod:
          type: string
          description: The product of the order
          example: XBID_Hour_Power
        quantity:
          type: number
          description: The quantity of the order in MW.
          example: 5.0
        price:
          type: number
          description: The price of the order in the contract's currency based on exchange product specification (typically in "Currency per MWh")
          example: 35.3
        displayQty:
          type: number
          description: Used to define display quantity of an iceberg Order. This field
            is required only in the case of type="I".
        contractId:
          type: string
          description: The contractId of the order, can be omitted if contractName
            is specified instead.
        contractName:
          type: string
          description: Set a contract name instead of the contractId, and the attempt
            is made to look up the contract via it's name. If contractId is set, the
            contractName field is ignored.
        clearingAcctType:
          type: string
          description: |-
            A label for internal use, indicating whether the order is entered on its own account ("P") or as an agent ("A"). This label does not impact exchange functionality and is primarily used for internal categorization.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
          example: P
        ordrExeRestriction:
          $ref: '#/components/schemas/OrderExecutionRestriction'
        preArranged:
          type: boolean
          description: Flag which indicates if the entered order is a pre-arranged
            order or not.
          default: false
        preArrangedAcct:
          type: string
          description: Required in case of a pre-arranged order. Contains the account
            of the counterpart.
        type:
          $ref: '#/components/schemas/OrderType'
        validityRes:
          $ref: '#/components/schemas/ValidityRestriction'
        state:
          type: string
          description: |-
            * ACTI: The order is entered and immediately exposed to the market for execution. This is the default value.
            * HIBE: The order is entered into the backend system but not exposed to the market.
          enum:
            - ACTI
            - HIBE
        validityDate:
          type: string
          description: |-
            mandatory in case of validityRes equals "GTD". It is used to define the date until which the order is valid.
            The remaining part of the order will be removed from the order book after this point in time.
          format: date-time
        txt:
          type: string
          description: Text which can be retrieved at a later point (i.e. via a trade
            which was triggered by the order)
          example: myOrderMarker
        ppd:
          type: number
          description: |-
            Peak price delta for iceberg orders.
            * The ppd of buy orders must be smaller or equal than zero.
            * The ppd of sell orders must be greater or equal than zero.
            If it is omitted the system will assume a value of `0.00`.
        dlvryStart:
          type: string
          description: (optional) Start of delivery of the underlying contract.
          format: date-time
        dlvryEnd:
          type: string
          description: (optional) End of delivery of the underlying contract.
          format: date-time
        expectedNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details). Optional safety feature to mitigate race
            conditions if client and backend data are not in sync. Do not use this field for block products.
        expectedMinNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing
            SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedMaxNetPos:
          type: number
          description: |-
            The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing
            BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details). Optional safety feature to mitigate race
            conditions if client and backend data are not in sync. Do not use this field for block products.
        expectedSellAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing
            SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        expectedBuyAbsPos:
          type: number
          description: |-
            The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing
            BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and
            backend data are not in sync. Do not use this field for block products.
        location:
          type: string
          description: |-
            Location within the delivery area. Should be only set for products with locations enabled.
        account_id:
          type: string
          description: |-
            Allows to set the exchange account for this order. The default account will be used if this field is unset.
            See available_account_ids from `GET /market` for possible values.
    Credentials:
      type: object
      properties:
        username:
          type: string
          description: The username provided by the exchange
        password:
          type: string
          description: The exchange password. For Nordpool, this refers to the password from the exchange and not the secret.
          format: password
        mfa_secret:
          type: string
          description: |-
            Multi factor authentication secret. This is only required if MFA is activated.

            **Note**: At this moment only M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM) supports MFA.
    ChangedCredentials:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
    MarketOptions:
      type: object
      properties:
        internal_trading:
          type: string
          enum:
            - inactive
            - default_yes
            - default_no
            - active
          description: |-
            This setting configures the behaviour of the internal matching engine
              * `inactive`    disabled, orders get sent to the exchange without checks for cross trades
              * `default_yes` enabled by default, but can be disabled on a per-request basis
              * `default_no`  disabled by default, but can be enabled on a per-request basis
              * `active`      enabled for all requests
        block_potential_self_trades:
          type: string
          description: |-
            This setting the behaviour of orders that could potentially lead to self-trades and can't be resolved by the internal matching engine
              * `disabled`                don't check for non-resolveable potential self-trades
              * `block_all`               reject requests with orders that could lead to self-trades (own bid >= own ask)
              * `block_if_not_resolvable` reject requests with orders that could lead to self-trades that can't be resolved by the internal matching engine (e.g. across delivery areas)
          enum:
            - disabled
            - block_all
            - block_if_not_resolvable
        internal_trading_cross_area:
          type: boolean
          description: |-
            German delivery areas have unlimited cross border capacities before entering `SDAT`
            mode. If this setting is set to true, then the German delivery areas will be treated as
            one area when matching internal trades during the `CONT` trading phase.

            **Note**: NordPool does not report a contract's trading phase, so internal cross
            delivery trading area stays active until the lead time limit is reached.
        internal_trading_cross_area_lead_time:
          type: integer
          format: int64
          description: |-
            The time (in minutes) before a contract's delivery start, after which cross area
            matching gets disabled. If this option is set to '0', then cross area matching is
            enabled as long as a contract is in the trading phase `CONT`. Independent of this
            setting, cross area matching is only active during the `CONT` trading phase.

            **Note**: NordPool does not report a contract's trading phase, so only the lead time
            determines if internal cross area trading should take place.
          example: 30
          minimum: 0
        internal_trading_include_external_orders:
          type: boolean
          description: If set to true, PowerBot will also create internal trades with orders that were not created through PowerBot, for example orders from ComTrader.
        internal_trading_across_tenants:
          type: boolean
          description: Controls whether cross trade detection works across tenants. It is enabled by default.
        default_delivery_area_id:
          type: string
          description: In multi-area configurations, set this option in case you want
            a default delivery area
        restrict_safe_mode:
          type: boolean
          description: |-
            Restrict switching market mode to the master API key. If set to true, only the master API key can toggle the market mode (call PUT/market/mode).
            If set to false, all master API keys, tenant master API keys and API keys with the 'can_trade' attribute set to true can toggle the market mode.
            Safe mode (emergency stop) has the following effects
            * all algorithm instances are stopped and can't be started
            * all active orders are deleted from the market
            * order entry / modification is disabled
            * trades can still be recalled

            The default value is false.
        throttling_user_action:
          type: string
          description: |-
            This setting is only relevant for EPEX.

            The behaviour of the exchange if you get suspended for violating your order quota limit. The default setting is `DO_NOTHING`.

            **Warning**: To apply this setting, you will need to log out of the market and reconnect. In production, you will need to do this for both prod1 and prod2.

            * `DO_NOTHING`       The exchange will take no further action after suspending you for order quota limit violations.
            * `HIBERNATE_ORDERS` The exchange will hibernate all user orders after suspending you for order quota limit violations.
          enum:
            - DO_NOTHING
            - HIBERNATE_ORDERS
        enable_mfa:
          type: boolean
          description: |-
            If set to true, PowerBot will enable MFA. The MFA secret will be returned in the response.
            It is not possible to retrieve the secret later on, so make sure you save it immediately.

            **Note**: At this moment only M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM) supports MFA.
        show_all_account_orders:
          type: boolean
          description: |-
            If enabled, all orders from the exchange account get marked as `own_order: true` in the
            order book. Otherwise, only orders from accessible portfolios get marked.

            Setting this to `false` has the side effect of `own_order` being set to `false` in all
            WebSocket events, regardless of user access.

            The default setting is `true`.
    IPAllowlistEntry:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          description: IP or IP/mask
          pattern: "^([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])(\\.([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])){3}(\\/([12][0-9]?|3[0-2]))?$"
          example: "203.0.113.0/24"
        description:
          type: string
          description: description for the IP address
          maxLength: 512
          example: "company network"
    MarketMode:
      required:
        - mode
      type: object
      properties:
        mode:
          type: string
          enum:
            - NORMAL
            - SAFE
    Notification:
      type: object
      properties:
        msg_id:
          type: string
        type:
          type: string
          enum:
            - PUBLIC
            - PRIVATE
        code:
          type: integer
          format: int32
        exchange_timestamp:
          type: string
          format: date-time
        api_timestamp:
          type: string
          format: date-time
        text:
          type: string
        severity:
          type: string
    Signal:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the signal (within the namespace of the emitting
            source)
          example: etrm_signal_2018-04-05T09:13:77Z
        source:
          type: string
          description: The identifier of the system which emitted the signal
          example: ETRMSystem
        received_at:
          type: string
          description: The timestamp when the signal was received
          format: date-time
          example: 2018-04-05T09:14:17Z
        updated_at:
          type: string
          description: The timestamp when the signal was last updated
          format: date-time
          example: 2018-04-05T09:14:17Z
        minutes_to_delivery:
          description: The offset in minutes until delivery start, after which the signal becomes valid
          type: integer
        revision:
          type: integer
          description: The number of times the signal has been updated. If the signal
            has never received any updates, then revision is 0
        delivery_start:
          type: string
          description: Together with delivery_start and delivery_end specify the delivery
            period in which the signal is valid
          format: date-time
          example: 2018-04-05T09:14:17Z
        delivery_end:
          type: string
          description: Together with delivery_start and delivery_end specify the delivery
            period in which the signal is valid
          format: date-time
          example: 2018-04-05T09:14:17Z
        delivery_areas:
          deprecated: true
          type: array
          description: DEPRECATED, use 'delivery_area' instead.
            The EIC of the delivery areas for which the signal is applicable
          items:
            type: string
        portfolio_ids:
          deprecated: true
          type: array
          description: DEPRECATED, use 'portfolio_id' instead. The portfolios for which the signal is applicable
          items:
            type: string
        delivery_area:
          description: The EIC of the delivery area for which the signal is applicable
          type: string
        portfolio_id:
          description: The portfolio for which the signal is applicable
          type: string
        tenant_id:
          type: string
          deprecated: true
        deleted:
          description: Indicates that the time slice was deleted.
          type: boolean
        active:
          description: Indicates that the time slice is active.
          type: boolean
        position_short:
          type: number
          description: Indicates the deficiency in MW that should or can be bought at the market (equal or greater than zero)
        position_long:
          type: number
          description: Indicates the surplus in MW that should or can be sold at the market (equal or greater than zero)
        locked:
          type: boolean
          description: Locked signals can not be modified, unless the `ignore_lock` parameter is set to `true`
        value:
          type: object
          properties: { }
          description: The custom content of the signal, posted as key/value pairs
          example:
            {
              "value1": "value1",
              "value2": "value2"
            }
    LogEntry:
      required:
        - as_of
        - text
      type: object
      properties:
        id:
          type: string
          description: The unique id of the log entry
          readOnly: true
        received:
          type: string
          description: The timestamp when the trading API has received the log entry.
            UTC timezone is used.
          format: date-time
          readOnly: true
        text:
          type: string
          description: The content of your log entry
          example: Trading algorithm is starting...
        as_of:
          type: string
          description: Should be set to the time (UTC) when the log entry was emitted
            by your system
          format: date-time
        category:
          type: string
          description: An optional category of the log entry
          example: Trading-Algorithm
        severity:
          $ref: '#/components/schemas/Severity'
        portfolio_id:
          type: string
          description: The portfolio for which the log entry is applicable
    LogEntryAdded:
      type: object
      properties:
        messageClass:
          type: string
        emittedAt:
          type: string
          format: date-time
        logEntry:
          $ref: '#/components/schemas/LogEntry'
    AuditLogEntry:
      type: object
      properties:
        id:
          type: string
          description: The unique id of the log entry
        received:
          type: string
          description: The timestamp when the trading API has received the log entry.
            UTC timezone is used.
          format: date-time
        api_key_name:
          type: string
          description: The api_key from which the audit log was generated
        ip_address:
          type: string
          description: The IP-address from which the audit log was generated
        tenant_id:
          type: string
          description: The tenant for which the log entry is applicable
        portfolio_id:
          type: string
          description: |
            DEPRECATED: replaced by portfolio ids.
            The portfolio for which the log entry is applicable
          deprecated: true
        portfolio_ids:
          type: array
          items:
            type: string
          description: The portfolios for which the log entry is applicable
        comment:
          type: string
          description: information about the cause of the change
        object_name:
          type: string
          description: the changed object
        old_value:
          type: object
          description: The old value of the changed entry
        new_value:
          type: object
          description: The new value of the changed entry
    Settings:
      type: object
      description: General settings for portfolios
      properties:
        default_account_ids:
          type: array
          items:
            $ref: '#/components/schemas/DefaultAccountMapping'
    DefaultAccountMapping:
      type: object
      required: [ exchange, mapping ]
      description: |-
        Default exchange account mapping by exchange and delivery area.

        This mapping will be used to determine what exchange account gets used for orders if
        none is explicitly specified.

        Possible values for account IDs can be found with `GET /market` in `available_account_ids`
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        mapping:
          type: object
          description: |-
            A 1:1 map of delivery areas codes to account IDs
          additionalProperties:
            type: string
    RiskManagementSettings:
      type: object
      description: |-
        Controls the applied risk management settings.
        If a limit is set on multiple levels (e.g. tenant and portfolio), the stricter limit is applied.
      properties:
        id:
          type: string
          readOnly: true
        trading_areas:
          type: array
          items:
            $ref: '#/components/schemas/TradingArea'
        position_limits:
          type: array
          items:
            $ref: '#/components/schemas/PositionLimit'
        cash_limits:
          type: array
          items:
            $ref: '#/components/schemas/CashLimit'
          example:
            - exchange: epex
              direction: NEG
              currency: EUR
              limit: -1000
            - exchange: epex
              direction: POS
              currency: EUR
              limit: 1000
        otr_limits:
          type: array
          items:
            $ref: '#/components/schemas/OtrLimit'
        order_action_quota_limit:
          type: array
          items:
            $ref: '#/components/schemas/OrderActionQuotaLimit'
        order_count_limit:
          type: array
          description: There can be multiple limits for an exchange to define e.g. a limit for the last minute and another one for the last 15 minutes.
          items:
            $ref: '#/components/schemas/OrderCountLimit'
        auction_limits:
          type: array
          items:
            $ref: '#/components/schemas/AuctionLimits'
    AuctionOrderConfirmation:
      description: |-
        The default behavior when orders are entered. Depending on the setting chosen, orders are
        either directly entered at the exchange or only registered internally, awaiting confirmation.
      type: string
      enum:
        - REQUIRED
        - NOT_REQUIRED
    AuctionLimits:
      description: |-
        The auction limits currently used by a tenant or portfolio regarding order entry. Limits are
        calculated and applied to, per minimum settlement period, currently 15 minutes. If an order
        entry exceeds a given limit for this overlapping time frame, the order will be rejected.
      type: object
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        delivery_area:
          type: string
          description: The delivery area to which the limits apply to.
        max_netpos_limit:
          type: number
          description: |-
            The maximum position, e.g. buy position allowed for a single contract of an auction.
          minimum: 0
          example:
            100
        min_netpos_limit:
          type: number
          description: |-
            The minimum position, e.g. sell position, allowed for a single contract of an auction.
          maximum: 0
          example:
            -100
    AuctionSettings:
      description: The settings currently used.
      type: object
      properties:
        order_confirmation:
          $ref: '#/components/schemas/AuctionOrderConfirmation'
    SaveSettings:
      description: The model used to save settings. Only the fields that are set will be updated.
      type: object
      properties:
        order_confirmation:
          $ref: '#/components/schemas/AuctionOrderConfirmation'
    TradingArea:
      required:
        - delivery_area
        - exchange
      type: object
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        delivery_area:
          type: string
          description: The Energy Identification Code (EIC).
    NewTenant:
      required:
        - id
        - name
        - risk_management
      type: object
      properties:
        id:
          pattern: '[a-zA-Z0-9._-]{1,5}'
          type: string
          description: A unique id (max 5 alphanumeric characters) of the tenant
        name:
          type: string
          description: The name of the tenant
        risk_management:
          $ref: '#/components/schemas/RiskManagementSettings'
    UpdatedTenant:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: The name of the tenant
    Tenant:
      required:
        - id
        - name
      type: object
      properties:
        id:
          maxLength: 5
          type: string
          description: A unique id (max 5 alphanumeric characters) of the tenant
        name:
          type: string
          description: The name of the tenant
    Portfolio:
      required:
        - id
        - name
        - type
        - tenant_id
        - tenant_name
        - settings
      type: object
      properties:
        id:
          maxLength: 5
          type: string
          description: A unique id (max 5 alphanumeric characters) of the portfolio
        name:
          type: string
          description: The name of the portfolio
        type:
          $ref: '#/components/schemas/PortfolioType'
        tenant_id:
          type: string
          description: The tenant the portfolio belongs to
        tenant_name:
          type: string
          description: The name of the tenant
        risk_management:
          $ref: '#/components/schemas/RiskManagementSettings'
        settings:
          $ref: '#/components/schemas/Settings'
    NewPortfolio:
      required:
        - id
        - name
        - risk_management
        - tenant_id
      type: object
      properties:
        id:
          maxLength: 5
          pattern: '[a-zA-Z0-9._-]{1,5}'
          type: string
          description: A unique id (max 5 alphanumeric characters) of the portfolio
        name:
          type: string
          description: The name of the portfolio
        type:
          $ref: '#/components/schemas/PortfolioType'
        tenant_id:
          type: string
          description: The tenant the portfolio belongs to
        settings:
          $ref: '#/components/schemas/Settings'
        risk_management:
          $ref: '#/components/schemas/RiskManagementSettings'
    UpdatedPortfolio:
      type: object
      properties:
        name:
          type: string
          description: The name of the portfolio
        settings:
          $ref: '#/components/schemas/Settings'
    NewApiKey:
      type: object
      required:
        - name
        - type
      properties:
        name:
          pattern: '[a-zA-Z0-9._-]+'
          type: string
          description: An identifier for the API key, i.e. "K1"
          example: K1
        description:
          type: string
        type:
          $ref: '#/components/schemas/ApiKeyType'
        tenantId:
          type: string
        portfolio_ids:
          type: array
          description: The IDs of the portfolios the API key is allowed to access.
            This property is mutually exclusive with `inherit_tenant_portfolios`.
          example: [ "P1", "P2" ]
          items:
            type: string
        inherit_tenant_portfolios:
          type: boolean
          default: false
          description: If true, all tenant portfolios will be accessible.
            This property is mutually exclusive with the `portfolio_ids` property.
        can_read:
          type: boolean
          description: Set to true, if the API key should be able to read data from
            the exchange (orderbook, trades, etc.)
          default: true
        can_trade:
          type: boolean
          description: Set to true, if the API key should be able to trade.
          default: false
        can_signal:
          type: boolean
          description: Set to true, if the API key should be allowed to submit signals
          default: false
    UpdatedApiKey:
      type: object
      properties:
        description:
          type: string
    ApiKeyDetails:
      type: object
      required:
        - type
        - name
        - inherit_tenant_portfolios
        - can_read
        - can_signal
        - can_trade
      properties:
        name:
          type: string
          description: A name for the API key, i.e. "K1"
          example: K1
        description:
          type: string
          example: Trading API key 1
        type:
          $ref: '#/components/schemas/ApiKeyType'
        tenant_id:
          type: string
        tenant_name:
          type: string
        inherit_tenant_portfolios:
          type: boolean
          description: If true, all tenant portfolios are accessible.
        portfolios:
          type: array
          items:
            $ref: '#/components/schemas/Portfolio'
        tenant_risk_settings:
          $ref: '#/components/schemas/RiskManagementSettings'
        can_read:
          type: boolean
          description: Set to true, if the API key should be able to read data from
            the exchange (order-book, trades, etc.)
        can_trade:
          type: boolean
          description: Set to true, if the API key should be able to trade.
        can_signal:
          type: boolean
          description: Set to true, if the API key should be allowed to submit signals
    PositionLimit:
      required:
        - delivery_area
        - exchange
      type: object
      description: Controls the allowed net position per timeframe of a particular contract (XBID and LOCAL Contract) over a tenant/portfolio.
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        delivery_area:
          type: string
          description: The Energy Identification Code (EIC).
        min_netpos_limit:
          type: number
          description: The minimum net position limit defines how much the currently traded net position (in MW)
            can go below zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be less than or equal to zero.
          multipleOf: 0.1
          maximum: 0
          exclusiveMaximum: false
        max_netpos_limit:
          type: number
          description: The maximum net position limit defines how much the currently traded net position (in MW)
            can go above zero per timeframe of a particular contract (XBID and LOCAL Contract). This number has to be greater than or equal to zero.
          multipleOf: 0.1
          minimum: 0
          exclusiveMinimum: false
        abspos_limit:
          type: number
          description: The absolute position defines the total quantity (in MW) that can possibly be traded.
            Calculated per timeframe of a particular contract (XBID and LOCAL Contract).
          multipleOf: 0.1
          minimum: 0
          exclusiveMinimum: false
    OtrLimit:
      required:
        - delivery_area
        - exchange
        - otr_limit
      type: object
      deprecated: true
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        delivery_area:
          type: string
          description: The Energy Identification Code (EIC).
        otr_limit:
          type: number
          description: The order-to-trade-ratio limit for the particular exchange and delivery-area.
            It is calculated for each timeframe of a particular contract (XBID and LOCAL Contract).
    OrderActionQuotaLimit:
      required:
        - exchange
        - order_quota_limit
      type: object
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        order_quota_limit:
          type: number
          minimum: 0
          maximum: 1
          description: The order action quota limit allows to restrict the order action quota of a tenant/portfolio. Without a limit set, orders can be placed until 100% of the quota set by the exchange is used.
    CashLimit:
      required:
        - currency
        - direction
        - limit
        - exchange
      type: object
      description: |-
        Cash limits are configured per currency and allow you to control the daily net cash position (e.g. - 50.000 EUR to +100.000 EUR) on a trading day.
        The scope is spanning across all exchanges on a tenant/portfolio-level for the date of the contract (converted to local time).
      properties:
        direction:
          type: string
          enum:
            - NEG
            - POS
        currency:
          type: string
          description: The currency to limit
          example: EUR
        limit:
          type: number
          multipleOf: 0.01
          description: The limit for the currency. Calculated over all contracts per day (converted to local time).
          example: -100000.0
        exchange:
          $ref: '#/components/schemas/Exchange'
    OrderCountLimit:
      required:
        - exchange
        - rolling_window_seconds
        - allowed_order_count
      type: object
      description: |-
        A rolling window is defined to limit the number of orders being placed or modified by the user in that time window.
        E.g. if an allowed count of 1000 and a rolling window of 86400 seconds (24 hours) is defined,
        1000 orders can be placed or modified during that time frame.
        The window is defined as a timespan from now minus the defined length in seconds.
        As the window moves along, placement capacities are freed again.
      properties:
        exchange:
          $ref: '#/components/schemas/Exchange'
        rolling_window_seconds:
          type: integer
          minimum: 1
          maximum: 86400
          description: The rolling window size defines a timeframe in seconds, where orders placed or modified are counted.
          example: 60
        allowed_order_count:
          type: integer
          minimum: 1
          description: The amount of allowed orders added or modified in a given timeframe.
          example: 5
    ExchangeCashLimit:
      required:
        - currency
      type: object
      properties:
        currency:
          type: string
          description: The currency to limit
          example: EUR
        current_limit:
          type: number
          multipleOf: 0.01
          description: The current limit for the currency
          example: 100000.0
        configured_limit:
          type: number
          multipleOf: 0.01
          description: The configured limit for the currency
          example: 100000.0
    RiskSettingsAndPortfolioInformation:
      type: object
      properties:
        portfolio_information:
          type: array
          items:
            $ref: '#/components/schemas/PortfolioInformation'
        portfolio_risk_settings:
          type: array
          items:
            $ref: '#/components/schemas/RiskManagementSettings'
        tenant_risk_settings:
          $ref: '#/components/schemas/RiskManagementSettings'
    PortfolioInformation:
      type: object
      properties:
        portfolio_id:
          type: string
        currency:
          type: string
          description: the currency used for the request context
        exchange_otr:
          type: number
          deprecated: true
          description: |-
            DEPRECATED: replaced by order action quota.
            The exchange order-to-trade-ratio for the timeframe of the particular contract.
            The scope is spanning across all portfolios and tenants for this exchange.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        tenant_otr:
          type: number
          deprecated: true
          description: |-
            DEPRECATED: replaced by order action quota.
            The tenant order-to-trade-ratio for the timeframe of the particular contract.
            The scope is spanning across all portfolios for this exchange and tenant.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        portfolio_otr:
          type: number
          deprecated: true
          description: |-
            DEPRECATED: replaced by order action quota.
            The portfolio order-to-trade-ratio for the timeframe of the particular contract.
            The scope is this portfolio for this exchange and tenant.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        net_cash_pos:
          type: number
          description: |-
            The portfolio related net cash position without standing orders.
            The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time).
            It is calculated by the sum of all trades increasing the cash-position minus the sum all trades decreasing the cash-position.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        trades_spending:
          type: number
          description: |-
            Sum of the costs of all trades for the given portfolio which are decreasing the cash position.
            Orders decreasing the cash position are BUY-Trades with a price greater than 0 and SELL-Trades with a price less than 0.
            The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time).
            Please note that the timeframe includes both XBID and LOCAL contracts.
        trades_earnings:
          type: number
          description: |-
            Sum of the costs of all trades for the given portfolio which are increasing the cash position.
            Orders increasing the cash position are SELL-Trades with a price greater than 0 and BUY-Trades with a price less than 0.
            The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time).
            Please note that the timeframe includes both XBID and LOCAL contracts.
        orders_spending:
          type: number
          description: |-
            The cash-position of all standing orders (excluding trades) for the given portfolio decreasing the net cash position.
            Orders decreasing the cash position are BUY-Orders with a price greater than 0 and SELL-Orders with a price less than 0.
            The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time).
            Please note that the timeframe includes both XBID and LOCAL contracts.
            For an iceberg order the maximum spending will be calculated and used to determine if the order can be placed.
        orders_earnings:
          type: number
          description: |-
            The cash-position of all standing orders (excluding trades) for the given portfolio increasing the net cash position.
            Orders increasing the cash position are SELL-Orders with a price greater than 0 and BUY-Orders with a price less than 0.
            The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time).
            Please note that the timeframe includes both XBID and LOCAL contracts.
            For an iceberg order the maximum earning will be calculated and used to determine if the order can be placed.
        net_pos:
          type: number
          description: |-
            The net position (quantity of BUY-Trades minus SELL-Trades) without standing orders for the timeframe of the particular contract, portfolio and exchange.
            Contracts with a timeframe that falls into the timeframe of this particular contract are not included (e.g., quarterhourly contracts do not affect the net_pos of the hourly contract).
            Please note that the timeframe includes both XBID and LOCAL contracts.
        net_pos_aggregate:
          type: number
          description: |-
            The aggregated net position of all contracts which fully overlap with the delivery period of this contract (e.g., for quarterhourly contracts this will include the net_pos of the quarter-hourly, the half-hourly and the hourly contracts).
            Please note that the timeframe includes both XBID and LOCAL contracts.
        max_net_pos_buy_with_orders:
          type: number
          description: |-
            The net_pos, including standing BUY orders for the timeframe of the particular contract, portfolio and exchange.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        min_net_pos_sell_with_orders:
          type: number
          description: |-
            The net_pos, including standing SELL orders for the timeframe of the particular contract, portfolio and exchange.
            Please note that the timeframe includes both XBID and LOCAL contracts.
        abs_pos:
          type: number
          description: |-
            The absolute position (Sum of all traded quantities) without standing orders for the timeframe of the particular contract, delivery area, portfolio and exchange.
            Contracts with a timeframe that falls into the timeframe of this particular contract are not included (e.g., quarterhourly contracts do not affect the abs_pos of the hourly contract).
            Please note that the timeframe includes both XBID and LOCAL contracts.
        sell_abs_pos:
          type: number
          description: |-
            The abs_pos plus the absolute quantity of all standing SELL-Orders for the respective contract.
        buy_abs_pos:
          type: number
          description: |-
            The abs_pos plus the absolute quantity of all standing BUY-Orders for the respective contract.
        order_action_quota:
          $ref: '#/components/schemas/OrderActionQuota'
        auction_positions:
          $ref: '#/components/schemas/AuctionPositions'
    AuctionPositions:
      type: object
      properties:
        net_pos:
          type: number
        min_net_pos:
          type: number
        max_net_pos:
          type: number
        abs_pos:
          type: number
        net_cash:
          type: number
        trades_spending:
          type: number
        trades_earnings:
          type: number
    ApiKey:
      required:
        - value
      type: object
      properties:
        name:
          type: string
          example: MY_TRADING_API_KEY
        value:
          type: string
          example: 63c7f8fe-5b67-4d36-96b2-56613e67a25d
    BulkSignal:
      required:
        - source
      type: object
      properties:
        source:
          type: string
          description: The identifier of the system which emitted the signal
          example: ETRMSystem
        delivery_start:
          type: string
          description: delivery_start together with delivery_end define the contracts
            for which the signal is valid for
          format: date-time
        delivery_end:
          type: string
          description: delivery_start together with delivery_end define the contracts
            for which the signal is valid for
          format: date-time
        delivery_areas:
          type: array
          description: The EIC of the delivery areas for which the signal is
            applicable
          items:
            type: string
        portfolio_ids:
          type: array
          description: The portfolios for which the signal is applicable
          items:
            type: string
        position_long:
          type: number
          description: Indicates the surplus in MW that should or can be sold at the market (equal or greater than zero)
        position_short:
          type: number
          description: Indicates the deficiency in MW that should or can be bought at the market (equal or greater than zero)
        locked:
          type: boolean
          description: |-
            Setting this value to true marks this signal as locked. Locked signals can't be modified, unless the `ignore_lock` parameter is set to `true`.
            This can be useful if a signal needs to be manually adjusted, and you don't want automated signal posting programs to overwrite it again.
        value:
          type: object
          properties: { }
          description: The custom content of the signal, posted as key/value pairs
          example:
            imbalance: 7
    BulkSignalResponse:
      type: object
      properties:
        id:
          type: string
        source:
          type: string
        status:
          type: string
          enum:
            - OK
            - ERROR
        status_text:
          type: string
    SignalEntry:
      type: object
      required:
        - source
        - delivery_area
        - portfolio_id
        - delivery_start
        - delivery_end
      properties:
        source:
          type: string
          description: The identifier of the system which emitted the signal.
          example: ETRMSystem
        delivery_area:
          description: The EIC of the delivery area for which the signal is applicable.
          type: string
          example: 10YDE-RWENET---I
          minLength: 16
        portfolio_id:
          description: The portfolio for which the signal is applicable.
          type: string
          example: P1
        delivery_start:
          description: The parameters delivery_start together with delivery_end define the contracts
            for which the signal is valid for.
          type: string
          format: date-time
          example: 2023-01-01T09:15:00Z
        delivery_end:
          description: The parameters delivery_start together with delivery_end define the contracts
            for which the signal is valid for.
          type: string
          format: date-time
          example: 2023-01-01T09:30:00Z
        time_slices:
          type: array
          description:
            The list of time slices. The creation of multiple time slices allows you to pre-schedule
            updates to the signal based on the time to delivery start of a contract.
          minItems: 1
          items:
            $ref: '#/components/schemas/TimeSliceEntry'
    TimeSliceEntry:
      required:
        - minutes_to_delivery
        - parameters
      type: object
      properties:
        minutes_to_delivery:
          type: integer
          description: |-
            The offset in minutes until delivery start, after which the signal becomes active.
            This is used to pre-schedule signal that should become active at some point after being
            posted. Set it to a fixed constant (e.g. 2880 for 48 hours) if you don't intend on using
            pre-scheduled signals.
          example: 2880
        locked:
          type: boolean
          description: |-
            Setting this value to `true` marks this signal as locked. Locked signals can't be modified, unless the `ignore_lock` parameter is set to `true`.
            This can be useful if a signal needs to be manually adjusted and you don't want automated signal posting programs to overwrite it again.
        parameters:
          type: object
          description:
            The content of the signal. This can be any JSON object. If the top level fields `position_long` and `position_short` are present,
            they will be factored into the position calculation.
          properties: { }
          example: {
            "value1": "value1",
            "value2": "value2",
            "position_long": 10.0,
            "position_short": 0.0
          }
      example:
        {
          "minutes_to_delivery": 100,
          "locked": false,
          "parameters": {
            "value1": "value1",
            "value2": "value2",
            "position_long": 10.0,
            "position_short": 0.0
          }
        }
    SignalEntryResponse:
      type: object
      properties:
        results:
          type: array
          description: Contains an entry for each signal that was applied (modified/created) or had an error. Signals without changes are omitted.
          items:
            $ref: '#/components/schemas/SignalEntryResult'
    SignalEntryResult:
      type: object
      description: The object containing information regarding the result of an trading signal insertion request.
      properties:
        source:
          type: string
        delivery_area:
          type: string
        portfolio_id:
          type: string
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
        minutes_to_delivery:
          type: integer
        status:
          type: string
          enum:
            - OK
            - ERROR
        status_text:
          type: string
    SignalSearchResult:
      type: object
      properties:
        signals:
          type: array
          description:
            The object containing the found trading signals by 'findTradingSignals'. These trading
            signals are grouped by source, delivery area, portfolio ID and delivery period.
          items:
            $ref: '#/components/schemas/SignalSearchItem'
    SignalSource:
      type: string
    SignalSearchItem:
      type: object
      properties:
        source:
          description: The identifier of the system which emitted the signal.
          type: string
          example: ETRMSystem
        delivery_area:
          description: The EIC of the delivery area for which the signal is applicable.
          type: string
        portfolio_id:
          description: The portfolio for which the signal is applicable.
          type: string
        delivery_start:
          description: Together with delivery_start and delivery_end specify the delivery
            period for which the signal is designated.
          type: string
          format: date-time
          example: 2023-01-01T09:15:31Z
        delivery_end:
          description: Together with delivery_start and delivery_end specify the delivery
            period for which the signal is designated.
          type: string
          format: date-time
          example: 2023-01-01T09:15:31Z
        time_slices:
          type: array
          items:
            $ref: '#/components/schemas/SignalTimeSlice'
    SignalTimeSlice:
      type: object
      properties:
        active:
          type: boolean
          description: Indicates that this time slice is currently active.
        historic:
          description: |-
            Indicates that the time slice has been overwritten by a newer revision.
          type: boolean
        deleted:
          description: Indicates that the time slice was deleted.
          type: boolean
        received_at:
          description: The timestamp when the signal was received.
          type: string
          format: date-time
          example: 2023-01-01T09:15:31Z
        updated_at:
          description:
            The timestamp when the signal was last updated. If an identical signal is received,
            this value will be updated without increasing the revision.
          type: string
          format: date-time
          example: 2023-01-01T09:30:31Z
        minutes_to_delivery:
          description: The offset in minutes until delivery start, after which the signal becomes valid.
          type: integer
        revision:
          description: The number of times the trading signal has been updated. If the signal
            has never received any updates, then revision is 0.
          type: integer
        locked:
          description: Locked signals can not be modified, unless the `ignore_lock` parameter is set to `true`.
          type: boolean
        parameters:
          description: The content of the signal, as key/value pairs.
          type: object
          properties: { }
          example:
            {
              "value1": "value1",
              "value2": "value2",
              "position_long": 10.0,
              "position_short": 3.0
            }
    SignalSourceDurations:
      type: object
      properties:
        source:
          description: The unique signal source
          type: string
        durations:
          description: The durations of the source with their respective delivery period.
          type: array
          items:
            type: integer
            format: int64
    NewInternalTrade:
      required:
        - exec_time
        - price
        - quantity
      type: object
      properties:
        exchange:
          type: string
          description: The exchange where the trade was executed
          example: epex
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
        exec_time:
          type: string
          description: The timestamp when the trade was executed (UTC time zone)
          format: date-time
        buy_delivery_area:
          type: string
          example: 10YAT-APG------L
        buy_txt:
          type: string
          description: The custom text of the buy order
        buy_portfolio_id:
          type: string
        buy_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        sell_delivery_area:
          type: string
          example: 10YAT-APG------L
        sell_txt:
          type: string
          description: the custom text of the sell order
        sell_portfolio_id:
          type: string
        sell_aggressor_indicator:
          $ref: '#/components/schemas/AggressorIndicator'
        contract_id:
          type: string
          description: The contract_id against which the trade was executed
          example: "2342353242"
        price:
          type: number
          description: Price of the trade
        quantity:
          type: number
    Report:
      type: object
      properties:
        api_timestamp:
          type: string
          format: date-time
        clOrdrId:
          type: string
        txt:
          type: string
        net_cash_position:
          type: number
        currency:
          type: string
        reportElements:
          type: array
          items:
            $ref: '#/components/schemas/ReportElement'
    Capacity:
      type: object
      properties:
        api_timestamp:
          deprecated: true
          type: string
          description: |-
            DEPRECATED: Use timestamp instead.
            The timestamp of the entry being received by the PowerBot API
          format: date-time
        timestamp:
          type: string
          description: The timestamp when the data was sent from the capacity system of the exchange
          format: date-time
        from_delivery_area:
          type: string
          description: EIC of the outgoing area
        to_delivery_area:
          type: string
          description: EIC of the incoming area
        revision:
          type: integer
          description: Revision number of the entry
          format: int64
        delivery_start:
          type: string
          format: date-time
          description: Delivery start date-time
        delivery_end:
          type: string
          format: date-time
          description: Delivery end date-time
        in:
          description: The ATC value from "to_delivery_area" to "from_delivery_area"
          type: number
        out:
          type: number
          description: The ATC value from "from_delivery_area" to "to_delivery_area"
      required:
        - from_delivery_area
        - to_delivery_area
        - delivery_start
        - delivery_end
        - in
        - out
    ReportElement:
      type: object
      properties:
        delivery_start:
          type: string
          format: date-time
          example: 2018-11-05T10:00:00Z
        delivery_end:
          type: string
          format: date-time
          example: 2018-11-05T10:15:00Z
        net_position:
          type: number
        absolute_position:
          type: number
        net_cash_position:
          type: number
        buy_quantity:
          type: number
          description: Total buy quantity for this time period in MW
        sell_quantity:
          type: number
          description: Total sell quantity for this time period in MW
        average_buy_price:
          type: number
        average_sell_price:
          type: number
        trades:
          type: array
          items:
            $ref: '#/components/schemas/Trade'
        internal_trades:
          type: array
          items:
            $ref: '#/components/schemas/InternalTrade'
        position_short:
          type: number
        position_long:
          type: number
        position_sources:
          type: array
          items:
            $ref: '#/components/schemas/PositionSource'
    PositionSource:
      type: object
      properties:
        source:
          type: string
        positions:
          type: array
          items:
            $ref: '#/components/schemas/PositionSourceValue'
    PositionSourceValue:
      type: object
      properties:
        duration:
          type: integer
          description: signal duration in minutes
        delivery_start:
          type: string
          format: date-time
        delivery_end:
          type: string
          format: date-time
        position_long:
          type: number
        position_short:
          type: number
    Initialization:
      type: object
      properties:
        messageClass:
          type: string
        type:
          type: string
          enum:
            - ORDERBOOK
        orderBooks:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookChanges'
    ErrorResponse:
      required:
        - message
      type: object
      properties:
        message:
          type: string
          description: The reason for the error
          example: Something happened
    ApiKeyPortfolioUpdate:
      type: object
      properties:
        portfolio_ids:
          type: array
          description: The IDs of the portfolios the API key is allowed to access.
            This property is mutually exclusive with `inherit_tenant_portfolios`.
          example: [ "P1", "P2" ]
          items:
            type: string
        inherit_tenant_portfolios:
          type: boolean
          default: false
          description: If true, all tenant portfolios will be accessible.
            This property is mutually exclusive with the `portfolio_ids` property.
    DeliveryArea:
      required:
        - eic
        - name
        - state
        - products
      type: object
      properties:
        eic:
          type: string
          description: The Energy Identification Code of the delivery area
          example: 10YDE-VE-------2
        market_eic:
          type: string
          description: |-
            The Energy Identification Code of the market area.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
          example: 10Y1001A1001A82H
        name:
          type: string
          description: The name of the delivery area
          example: 50HzT
        long_name:
          type: string
          description: |-
            The long name of the delivery area.

            **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).
          example: 50Hertz Transmission GmbH
        state:
          type: string
          enum:
            - ACTI
            - SUSP
            - DELE
          description: |-
            The state of the delivery area, possible values are
             * ACTI: The delivery area is active. It is possible to trade in that area.
             * SUS: The delivery area is deactivated (hibernated). Trading in that delivery area is not possible.
             * DELE: The delivery area was deleted. Trading is not possible.
        time_zone:
          type: string
          description: |-
            The tz database ID of the delivery area.
            (`null` if the user doesn't have access to any of the delivery area products)
          example: CET
        currency:
          type: string
          description: |-
            ISO 4217 currency code of the delivery area.
            (`null` if the user doesn't have access to any of the delivery area products)
          example: EUR
        products:
          type: array
          items:
            type: string
          description: Products of the delivery area
          example: [ Intraday_Hour_Power, Intraday_Half_Hour_Power, Intraday_Quarter_Hour_Power ]
        product_details:
          type: array
          items:
            $ref: '#/components/schemas/ProductInformation'
          description: Products of the delivery area the exchange user has access to.
          example: [
            {
              "product_name": "XBID_Hour_Power",
              "price_currency": "EUR",
              "quantity_unit": "MW",
              "duration_minutes": 60,
            }
          ]
    OrderBookBulkStatistics:
      type: object
      properties:
        api_timestamp:
          type: string
          format: date-time
          description: The timestamp at which the calculation took place (UTC time zone).
          example: 2023-01-01T09:15:00Z
        delivery_area:
          type: string
          example: 10YDE-RWENET---I
        statistics:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookStatistics'
          example: [ {
            "delivery_start": "2023-01-01T09:15:00Z",
            "delivery_end": "2023-01-01T09:30:00Z",
            "contracts": [ {
                "contract_id": "123456",
                "product": "Intraday_Quarter_Hour_Power",
                "best_bid_price": 50,
                "best_bid_quantity": 1.9,
                "best_ask_price": 170.3,
                "best_ask_quantity": 4.7,
                "last_price": 165.2,
                "last_quantity": 0.8,
                "total_quantity": 45.6,
                "high": 500,
                "low": 3,
                "vwap": 130.22,
                "depth_values": [
                    {
                    "depth": 5,
                    "average_bid": 17.04,
                    "average_ask": 69.34
                    },
                    {
                      "depth": 10,
                      "average_bid": 8.52,
                      "average_ask": 34.67
                    }
                ]
              } ]
            } ]
    OrderBookStatistics:
      type: object
      properties:
        delivery_start:
          type: string
          description: The delivery start time of the contract.
          format: date-time
        delivery_end:
          type: string
          description: The delivery end time of the contract.
          format: date-time
        contracts:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookStatisticsContract'
    OrderBookStatisticsContract:
      type: object
      properties:
        contract_id:
          type: string
        product:
          type: string
        best_bid_price:
          type: number
          description: The price of the best bid.
        best_bid_quantity:
          type: number
          description: The quantity of the best bid.
        best_ask_price:
          type: number
          description: The price of the best ask.
        best_ask_quantity:
          type: number
          description: The quantity of the best ask.
        last_price:
          type: number
          description: |-
            The price of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 24.3
        last_quantity:
          type: number
          description: |-
            The quantity of the last trade

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
          example: 15.3
        total_quantity:
          type: number
          description: |-
            The total volume of all trades

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Each side of a trade is counted separately, so a trade with both sides in the same market area gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        high:
          type: number
          description: |-
            The highest traded price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        low:
          type: number
          description: |-
            The lowest traded price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        vwap:
          type: number
          description: |-
            The volume weighted average price

            All trades in the market area of the contract's delivery area are included.
            Trades for the XBID contract of the same delivery period as a local contract and vice versa will also be included.
            Each side of a trade is counted separately, so a trade with both sides in the same market area gets counted twice.
            Self trades registered at the exchange and internal trades registered by PowerBot are excluded.
        depth_values:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookDepthValue'
        average_bid:
          type: number
        average_ask:
          type: number
    OrderBookDepthValue:
      type: object
      properties:
        depth:
          type: number
        average_bid:
          description: The average bid price for the given orderbook depth.
          type: number
        average_ask:
          description: The average ask price for the given orderbook depth.
          type: number
    HistoricTradesResponse:
      type: object
      properties:
        next_page_token:
          description: |-
            Provide this value as the 'page_token' parameter to retrieve the next page of results.

            If this header is blank, there is no more data to retrieve.
          type: string
        trades:
          type: array
          items:
            $ref: '#/components/schemas/PublicTrade'
    HistoricOrdersResponse:
      type: object
      required:
        - contract_id
        - delivery_area
        - revisions
      properties:
        next_page_token:
          description: |-
            Provide this value as the 'page_token' parameter to retrieve the next page of results.

            If this header is blank, there is no more data to retrieve.
          type: string
        contract_id:
          type: string
        delivery_area:
          type: string
        revisions:
          type: array
          items:
            $ref: '#/components/schemas/OrderBookRevision'
    OrderBookRevision:
      type: object
      description: |-
        This object represent one revision of the order book. It only includes changes, so orders
        will only show up when they are modified (created, updated or deleted).
      required:
        - time
        - revision
        - buy_orders
        - sell_orders
      properties:
        time:
          type: string
          format: date-time
          description: The time of the last order update that is included in this revision
        revision_number:
          type: integer
          format: int64
          description: |-
            The revision number of this revision. Note that this can reset to zero so don't rely on
            it increasing monotonically. Use the `time` field instead and only fall back to
            `revision_number` if two revisions have the same time.
        buy_orders:
          type: array
          description: Changes to buy orders in this order book revision
          items:
            $ref: '#/components/schemas/PublicOrderRevision'
        sell_orders:
          type: array
          description: Changes to sell orders in this order book revision
          items:
            $ref: '#/components/schemas/PublicOrderRevision'
    PublicOrderRevision:
      type: object
      required:
        - order_id
        - revision
        - price
        - quantity
        - created_at
        - updated_at
      properties:
        order_id:
          description: The unique ID of this order.
          type: string
        price:
          type: number
        quantity:
          description: |-
            The quantity of the orders. A value of zero means that the order was deleted, hibernated
            or fully executed.
          type: number
        created_at:
          description: The time when the order first appeared.
          type: string
          format: date-time
        updated_at:
          description: |-
            The time when the order was last modified. This can be earlier than the `time` field of
            the order book revision because the exchange batches multiple order changes into one
            revision.
          type: string
          format: date-time
    ScheduleFormat:
      type: string
      default: ESS_2_3
      enum:
        - CIM_5_2
        - ESS_2_3
      description: Specifies the standard for the created xml document.
  securitySchemes:
    api_key_security:
      type: apiKey
      name: api_key
      in: header
  parameters:
    AuctionId:
      name: auction_id
      in: path
      description: The ID of the auction.
      required: true
      schema:
        type: string
    ExchangeId:
      name: exchange_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/Exchange"
    PortfolioIdPath:
      name: portfolio_id
      in: path
      required: true
      description: The ID of the portfolio.
      schema:
        type: string
    DeliveryArea:
      name: delivery_area
      in: query
      description: The delivery area used for the request.
      schema:
        type: string
    DeliveryAreaPath:
      name: delivery_area
      in: path
      required: true
      description: The delivery area used for the request.
      schema:
        type: string
    IgnoreOrderActionQuota:
      in: query
      name: ignore_order_action_quota
      schema:
        type: boolean
        default: false
      description: |-
        The behavior on this parameter is depending on the current exchange.
        * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2.
        * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
    FailOnLimitViolation:
      in: query
      name: fail_on_limit_violations
      schema:
        type: boolean
        default: true
      description: |-
        If set to true, a single limit violation will prevent sending all orders to the exchange.
        If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.

        Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
    InternalTrading:
      in: query
      name: internal_trading
      schema:
        type: boolean
      description: |-
        If set to true, cross-trade recognition will be performed before submitting the orders to the exchange.
        Set it to false if you don't want internal trading.
        If left blank, default market options will apply.
        If internal trading is set to "inactive" in the market options, an error is returned when sending orders with "internal_trading" set to true.

        **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
    PortfolioId:
      in: query
      name: portfolio_id
      style: form
      explode: false
      schema:
        type: array
        items:
          type: string
    Offset:
      in: query
      name: offset
      schema:
        type: integer
        format: int32
        default: 0
        minimum: 0
      description: Offset when loading a list of items
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        format: int32
        default: 150
        minimum: 1
        maximum: 500
      description: Limits the number of loaded items
    ByPassValidation:
      name: bypass_validation
      in: query
      description: When set to true, the specified parameters will not be validated against the json schema of the algorithm.
      schema:
        type: boolean
        default: false
      required: false
    IncludeHistoricData:
      name: includeHistoricData
      in: query
      schema:
        type: boolean
        default: false
      required: false
      description: If this option is enabled, statistics will also be calculated for expired contracts that match the given delivery period.
    IgnoreLock:
      name: ignore_lock
      in: query
      description: Setting this parameter to true allows for modification of locked signals. Unlocking a signal also requires this parameter to be true.
      schema:
        type: boolean
        default: false
    SignalDeliveryStart:
      name: delivery_start
      in: query
      description: filter by delivery_start, use UTC timezone
      schema:
        type: string
        format: date-time
    SignalDeliveryEnd:
      name: delivery_end
      in: query
      description: filter by delivery_end, use UTC timezone
      schema:
        type: string
        format: date-time
    SignalDeliveryFrom:
      name: delivery_from
      in: query
      description: limit signals to those that have a delivery start greater or equal to the given value
      schema:
        type: string
        format: date-time
    SignalDeliveryTo:
      name: delivery_to
      in: query
      description: limit signals to those that have a delivery end less than or equal to the given value
      schema:
        type: string
        format: date-time
    SignalReceivedFrom:
      name: received_from
      in: query
      description: from timestamp is 'inclusive' (i.e. >=), use UTC timezone
      schema:
        type: string
        format: date-time
    SignalReceivedTo:
      name: received_to
      in: query
      description: to timestamp is 'exclusive' (i.e. <), use UTC timezone
      schema:
        type: string
        format: date-time
    SignalRevisionFrom:
      name: revision_from
      in: query
      description: The starting revision from 0
      schema:
        type: integer
    SignalRevisionTo:
      name: revision_to
      in: query
      description: The ending revision (non-inclusive)
      schema:
        type: integer
    SignalSourceInPath:
      name: source
      in: path
      required: true
      description: The source of the signal
      schema:
        type: string
    SignalDeliveryAreaInPath:
      name: delivery_area
      in: path
      required: true
      description: The delivery area of the signal
      schema:
        type: string
    SignalPortfolioIdInPath:
      name: portfolio_id
      in: path
      required: true
      description: The portfolio ID of the signal
      schema:
        type: string
    SignalDeliveryStartInPath:
      name: delivery_start
      in: path
      required: true
      description: The delivery start of the signal
      schema:
        type: string
        format: date-time
    SignalDeliveryEndInPath:
      name: delivery_end
      in: path
      required: true
      description: The delivery end of the signal
      schema:
        type: string
        format: date-time
    SignalMinutesToDelivery:
      name: minutes_to_delivery
      in: path
      required: true
      description: The offset until delivery start
      schema:
        type: integer
    TradingSignalSource:
      name: source
      in: query
      description: The source of the trading signal.
      schema:
        type: string
    TradingSignalDeliveryArea:
      name: delivery_area
      in: query
      description: The delivery area of the trading signal.
      schema:
        type: string
      required: true
    TradingSignalPortfolioId:
      name: portfolio_id
      in: query
      description: The portfolio ID of the trading signal.
      schema:
        type: string
      required: true
    TradingSignalMinutesToDeliveryGte:
      name: minutes_to_delivery_gte
      in: query
      description:
        The value of `minutes_to_delivery` which is greater than or equal to input parameter.
        Has to be used together with `minutes_to_delivery_lte` and cannot be combined with `active_only`.
      schema:
        type: integer
    TradingSignalMinutesToDeliveryLte:
      name: minutes_to_delivery_lte
      in: query
      description:
        The value of `minutes_to_delivery` which is less than or equal to input parameter.
        Has to be used together with `minutes_to_delivery_gte` and cannot be combined with `active_only`.
      schema:
        type: integer
    TradingSignalDeliveryStart:
      name: delivery_start
      in: query
      description:
        The 'delivery_start' of the signal in UTC. Has be used together with 'delivery_end' and
        cannot be combined with 'delivery_from' or 'delivery_to'.
      schema:
        type: string
        format: date-time
    TradingSignalDeliveryEnd:
      name: delivery_end
      in: query
      description:
        The 'delivery_end' of the signal in UTC. Has be used together with 'delivery_start' and
        cannot be combined with 'delivery_from' or 'delivery_to'.
      schema:
        type: string
        format: date-time
    TradingSignalDeliveryFrom:
      name: delivery_from
      in: query
      description:
        Limit trading signals to those that have a 'delivery_start' greater or equal to the given value.
        Has be used together with 'delivery_to' and cannot be combined with 'delivery_start' or 'delivery_end'.
        The maximum timespan is limited to 48 hours.
      schema:
        type: string
        format: date-time
    TradingSignalDeliveryTo:
      name: delivery_to
      in: query
      description:
        Limit trading signals to those that have a delivery end less than or equal to the given value.
        Has be used together with 'delivery_from' and cannot be combined with 'delivery_start' or 'delivery_end'.
        The maximum timespan is limited to 48 hours.
      schema:
        type: string
        format: date-time
    TradingSignalIncludeDeleted:
      name: include_deleted
      in: query
      description: Setting this to `true` will also return deleted time slices. Cannot be combined with `active_only=true`.
      schema:
        type: boolean
        default: false

# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from powerbot_client.models.auction_positions import AuctionPositions
from typing import Optional, Set
from typing_extensions import Self

class PortfolioInformation(BaseModel):
    """
    PortfolioInformation
    """ # noqa: E501
    portfolio_id: Optional[StrictStr] = None
    currency: Optional[StrictStr] = Field(default=None, description="the currency used for the request context")
    exchange_otr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED: replaced by order action quota. The exchange order-to-trade-ratio for the timeframe of the particular contract. The scope is spanning across all portfolios and tenants for this exchange. Please note that the timeframe includes both XBID and LOCAL contracts.")
    tenant_otr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED: replaced by order action quota. The tenant order-to-trade-ratio for the timeframe of the particular contract. The scope is spanning across all portfolios for this exchange and tenant. Please note that the timeframe includes both XBID and LOCAL contracts.")
    portfolio_otr: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="DEPRECATED: replaced by order action quota. The portfolio order-to-trade-ratio for the timeframe of the particular contract. The scope is this portfolio for this exchange and tenant. Please note that the timeframe includes both XBID and LOCAL contracts.")
    net_cash_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The portfolio related net cash position without standing orders. The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time). It is calculated by the sum of all trades increasing the cash-position minus the sum all trades decreasing the cash-position. Please note that the timeframe includes both XBID and LOCAL contracts.")
    trades_spending: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of the costs of all trades for the given portfolio which are decreasing the cash position. Orders decreasing the cash position are BUY-Trades with a price greater than 0 and SELL-Trades with a price less than 0. The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time). Please note that the timeframe includes both XBID and LOCAL contracts.")
    trades_earnings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Sum of the costs of all trades for the given portfolio which are increasing the cash position. Orders increasing the cash position are SELL-Trades with a price greater than 0 and BUY-Trades with a price less than 0. The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time). Please note that the timeframe includes both XBID and LOCAL contracts.")
    orders_spending: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cash-position of all standing orders (excluding trades) for the given portfolio decreasing the net cash position. Orders decreasing the cash position are BUY-Orders with a price greater than 0 and SELL-Orders with a price less than 0. The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time). Please note that the timeframe includes both XBID and LOCAL contracts. For an iceberg order the maximum spending will be calculated and used to determine if the order can be placed.")
    orders_earnings: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The cash-position of all standing orders (excluding trades) for the given portfolio increasing the net cash position. Orders increasing the cash position are SELL-Orders with a price greater than 0 and BUY-Orders with a price less than 0. The scope is spanning across all exchanges on a portfolio-level for the date of the contract (converted to local time). Please note that the timeframe includes both XBID and LOCAL contracts. For an iceberg order the maximum earning will be calculated and used to determine if the order can be placed.")
    net_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net position (quantity of BUY-Trades minus SELL-Trades) without standing orders for the timeframe of the particular contract, portfolio and exchange. Contracts with a timeframe that falls into the timeframe of this particular contract are not included (e.g., quarterhourly contracts do not affect the net_pos of the hourly contract). Please note that the timeframe includes both XBID and LOCAL contracts.")
    net_pos_aggregate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The aggregated net position of all contracts which fully overlap with the delivery period of this contract (e.g., for quarterhourly contracts this will include the net_pos of the quarter-hourly, the half-hourly and the hourly contracts). Please note that the timeframe includes both XBID and LOCAL contracts.")
    max_net_pos_buy_with_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net_pos, including standing BUY orders for the timeframe of the particular contract, portfolio and exchange. Please note that the timeframe includes both XBID and LOCAL contracts.")
    min_net_pos_sell_with_orders: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The net_pos, including standing SELL orders for the timeframe of the particular contract, portfolio and exchange. Please note that the timeframe includes both XBID and LOCAL contracts.")
    abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The absolute position (Sum of all traded quantities) without standing orders for the timeframe of the particular contract, delivery area, portfolio and exchange. Contracts with a timeframe that falls into the timeframe of this particular contract are not included (e.g., quarterhourly contracts do not affect the abs_pos of the hourly contract). Please note that the timeframe includes both XBID and LOCAL contracts.")
    sell_abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The abs_pos plus the absolute quantity of all standing SELL-Orders for the respective contract.")
    buy_abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The abs_pos plus the absolute quantity of all standing BUY-Orders for the respective contract.")
    order_action_quota: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Only supported for EPEX, Nord Pool, IBEX and CROPEX**  The percentage (0.0 - 1.0) of consumed order entry/modification quota calculated depending on the underlying exchange.  This value is calculated based on the following formula:  `max{short_usage/short_limit, long_usage/long_limit}`")
    auction_positions: Optional[AuctionPositions] = None
    __properties: ClassVar[List[str]] = ["portfolio_id", "currency", "exchange_otr", "tenant_otr", "portfolio_otr", "net_cash_pos", "trades_spending", "trades_earnings", "orders_spending", "orders_earnings", "net_pos", "net_pos_aggregate", "max_net_pos_buy_with_orders", "min_net_pos_sell_with_orders", "abs_pos", "sell_abs_pos", "buy_abs_pos", "order_action_quota", "auction_positions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PortfolioInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of auction_positions
        if self.auction_positions:
            _dict['auction_positions'] = self.auction_positions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PortfolioInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "portfolio_id": obj.get("portfolio_id"),
            "currency": obj.get("currency"),
            "exchange_otr": obj.get("exchange_otr"),
            "tenant_otr": obj.get("tenant_otr"),
            "portfolio_otr": obj.get("portfolio_otr"),
            "net_cash_pos": obj.get("net_cash_pos"),
            "trades_spending": obj.get("trades_spending"),
            "trades_earnings": obj.get("trades_earnings"),
            "orders_spending": obj.get("orders_spending"),
            "orders_earnings": obj.get("orders_earnings"),
            "net_pos": obj.get("net_pos"),
            "net_pos_aggregate": obj.get("net_pos_aggregate"),
            "max_net_pos_buy_with_orders": obj.get("max_net_pos_buy_with_orders"),
            "min_net_pos_sell_with_orders": obj.get("min_net_pos_sell_with_orders"),
            "abs_pos": obj.get("abs_pos"),
            "sell_abs_pos": obj.get("sell_abs_pos"),
            "buy_abs_pos": obj.get("buy_abs_pos"),
            "order_action_quota": obj.get("order_action_quota"),
            "auction_positions": AuctionPositions.from_dict(obj["auction_positions"]) if obj.get("auction_positions") is not None else None
        })
        return _obj



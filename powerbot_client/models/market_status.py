# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from powerbot_client.models.atc_status import AtcStatus
from powerbot_client.models.exchange import Exchange
from powerbot_client.models.exchange_cash_limit import ExchangeCashLimit
from powerbot_client.models.market_options import MarketOptions
from powerbot_client.models.market_state import MarketState
from typing import Optional, Set
from typing_extensions import Self

class MarketStatus(BaseModel):
    """
    MarketStatus
    """ # noqa: E501
    server_version: Optional[StrictStr] = None
    exchange: Optional[Exchange] = None
    exchange_mode: Optional[StrictStr] = None
    exchange_user: Optional[StrictStr] = Field(default=None, description="The user that is use to authenticate with the exchange")
    app_id: Optional[StrictStr] = None
    api_timestamp: Optional[datetime] = Field(default=None, description="The timestamp when the status of the market was last checked.")
    certificate_expiration_date: Optional[datetime] = Field(default=None, description="The expiration date of the client certificate")
    status: MarketState
    options: Optional[MarketOptions] = None
    atc_status: Optional[AtcStatus] = None
    urls: Optional[List[StrictStr]] = Field(default=None, description="The urls of the exchange's backend system the server is connected to")
    products: Optional[List[StrictStr]] = Field(default=None, description="DEPRECATED: Use `GET /delivery-areas` or `GET /delivery-area/{area_id}` instead. Exchange's products which the server is linked with")
    market_area_id: Optional[StrictStr] = Field(default=None, description="The market the server is configured to operate in")
    delivery_area_id: Optional[StrictStr] = Field(default=None, description="The default delivery area (EIC) the server is configured to operate in")
    available_delivery_area_ids: Optional[List[StrictStr]] = Field(default=None, description="The available delivery areas EICs")
    inactive_delivery_area_ids: Optional[List[StrictStr]] = Field(default=None, description="Delivery areas that are accessible through the exchange API, but not unlocked in PowerBot.")
    exchange_limits: Optional[List[ExchangeCashLimit]] = None
    session_id: Optional[StrictStr] = Field(default=None, description="The current session id with the exchange")
    logged_in_since: Optional[datetime] = Field(default=None, description="The timestamp (UTC) of the start of the current connection to the exchange.")
    heartbeat_as_of: Optional[datetime] = Field(default=None, description="The timestamp when the last heartbeat of the backend system has been received (should be not older than 5 seconds)")
    heartbeat_content: Optional[StrictStr] = Field(default=None, description="The content of the last heartbeat")
    mfa_supported: Optional[StrictBool] = Field(default=None, description="Indicates whether the exchange supports multi-factor authentication")
    mfa_secret: Optional[StrictStr] = Field(default=None, description="The MFA secret.  **Note**: only set when it was generated.")
    messages: Optional[List[StrictStr]] = Field(default=None, description="Messages explaining the state of the market")
    mode: Optional[StrictStr] = None
    order_action_quota: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="**Only supported for EPEX, Nord Pool, IBEX and CROPEX**  The percentage (0.0 - 1.0) of consumed order entry/modification quota calculated depending on the underlying exchange.  This value is calculated based on the following formula:  `max{short_usage/short_limit, long_usage/long_limit}`")
    available_account_ids: Optional[List[StrictStr]] = Field(default=None, description="The available exchange account IDs")
    __properties: ClassVar[List[str]] = ["server_version", "exchange", "exchange_mode", "exchange_user", "app_id", "api_timestamp", "certificate_expiration_date", "status", "options", "atc_status", "urls", "products", "market_area_id", "delivery_area_id", "available_delivery_area_ids", "inactive_delivery_area_ids", "exchange_limits", "session_id", "logged_in_since", "heartbeat_as_of", "heartbeat_content", "mfa_supported", "mfa_secret", "messages", "mode", "order_action_quota", "available_account_ids"]

    @field_validator('exchange_mode')
    def exchange_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['production', 'simulation']):
            raise ValueError("must be one of enum values ('production', 'simulation')")
        return value

    @field_validator('mode')
    def mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['NORMAL', 'SAFE']):
            raise ValueError("must be one of enum values ('NORMAL', 'SAFE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of atc_status
        if self.atc_status:
            _dict['atc_status'] = self.atc_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in exchange_limits (list)
        _items = []
        if self.exchange_limits:
            for _item in self.exchange_limits:
                if _item:
                    _items.append(_item.to_dict())
            _dict['exchange_limits'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "server_version": obj.get("server_version"),
            "exchange": obj.get("exchange"),
            "exchange_mode": obj.get("exchange_mode"),
            "exchange_user": obj.get("exchange_user"),
            "app_id": obj.get("app_id"),
            "api_timestamp": obj.get("api_timestamp"),
            "certificate_expiration_date": obj.get("certificate_expiration_date"),
            "status": obj.get("status"),
            "options": MarketOptions.from_dict(obj["options"]) if obj.get("options") is not None else None,
            "atc_status": AtcStatus.from_dict(obj["atc_status"]) if obj.get("atc_status") is not None else None,
            "urls": obj.get("urls"),
            "products": obj.get("products"),
            "market_area_id": obj.get("market_area_id"),
            "delivery_area_id": obj.get("delivery_area_id"),
            "available_delivery_area_ids": obj.get("available_delivery_area_ids"),
            "inactive_delivery_area_ids": obj.get("inactive_delivery_area_ids"),
            "exchange_limits": [ExchangeCashLimit.from_dict(_item) for _item in obj["exchange_limits"]] if obj.get("exchange_limits") is not None else None,
            "session_id": obj.get("session_id"),
            "logged_in_since": obj.get("logged_in_since"),
            "heartbeat_as_of": obj.get("heartbeat_as_of"),
            "heartbeat_content": obj.get("heartbeat_content"),
            "mfa_supported": obj.get("mfa_supported"),
            "mfa_secret": obj.get("mfa_secret"),
            "messages": obj.get("messages"),
            "mode": obj.get("mode"),
            "order_action_quota": obj.get("order_action_quota"),
            "available_account_ids": obj.get("available_account_ids")
        })
        return _obj



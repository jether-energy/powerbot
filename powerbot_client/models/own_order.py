# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from powerbot_client.models.contract_reference import ContractReference
from powerbot_client.models.order_action import OrderAction
from powerbot_client.models.order_side import OrderSide
from powerbot_client.models.order_state import OrderState
from powerbot_client.models.order_type import OrderType
from typing import Optional, Set
from typing_extensions import Self

class OwnOrder(BaseModel):
    """
    OwnOrder
    """ # noqa: E501
    order_id: Optional[StrictStr] = Field(default=None, description="The unique ID of the order. **Note** if you modify an order, the ID can change! `parent_order_id` and `initial_order_id` can be used to trace ID changes.")
    parent_order_id: Optional[StrictStr] = Field(default=None, description="The ID of the previous version of the order before modification with priority change.")
    initial_order_id: Optional[StrictStr] = Field(default=None, description="The ID of the first version of the order.")
    revision_no: Optional[StrictInt] = Field(default=None, description="The revision number of the order. Will have to be provided in addition with the order_id when order is modified.")
    api_timestamp: Optional[datetime] = Field(default=None, description="the time (UTC) the last update of the order was received (by PowerBot).")
    state: OrderState
    delivery_area: StrictStr = Field(description="Defines the delivery area of the order (EIC).")
    last_change_timestamp: Optional[datetime] = Field(default=None, description="the time the last change of the order was received (by the exchange).")
    buy: Optional[StrictBool] = Field(default=None, description="Set to true if the order is a BUY order, false otherwise")
    sell: Optional[StrictBool] = Field(default=None, description="set to true if the order is a SELL order, false otherwise")
    side: OrderSide
    contracts: List[ContractReference] = Field(description="DEPRECATED: an order can only be associated with one contract, please use the top-level fields")
    contract_id: Optional[StrictStr] = Field(default=None, description="the ID of the order's contract")
    contract_name: Optional[StrictStr] = Field(default=None, description="the name of the order's contract")
    delivery_start: Optional[datetime] = Field(default=None, description="the delivery start of the order's contract")
    delivery_end: Optional[datetime] = Field(default=None, description="the delivery end of the order's contract")
    cl_ordr_id: Optional[StrictStr] = Field(default=None, description="The client's order number (if set during the placement of the order)", alias="clOrdrId")
    txt: Optional[StrictStr] = Field(default=None, description="The client's custom text (if set during the placement of the order)")
    portfolio_id: Optional[StrictStr] = None
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The price of the order in the contract's currency based on exchange product specification (typically in \"Currency per MWh\")")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The quantity of the order (in the contract's quantity unit - usually MW)")
    hidden_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Contains the hidden quantity of the iceberg order. The total executable quantity may be calculated by adding the hidden_quantity to the quantity.")
    display_quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used to define display the quantity of an iceberg Order.")
    peak_price_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The peak price delta for iceberg orders.")
    action: OrderAction
    type: Optional[OrderType] = None
    details: Optional[Dict[str, Any]] = Field(default=None, description="DEPRECATED please do not use values in this field! Most details of the order in the style of the underlying backend system.")
    user_code: Optional[StrictStr] = Field(default=None, description="the exchange's user code")
    pre_arranged: Optional[StrictBool] = None
    pre_arranged_acct: Optional[StrictStr] = None
    error_message: Optional[StrictStr] = None
    location: Optional[StrictStr] = Field(default=None, description="Location within the delivery area.")
    valid_until: Optional[datetime] = Field(default=None, description="The timestamp (UTC) until the order is valid. Only applicable for good for session orders.")
    account_id: Optional[StrictStr] = Field(default=None, description="The exchange account this order belongs to.")
    __properties: ClassVar[List[str]] = ["order_id", "parent_order_id", "initial_order_id", "revision_no", "api_timestamp", "state", "delivery_area", "last_change_timestamp", "buy", "sell", "side", "contracts", "contract_id", "contract_name", "delivery_start", "delivery_end", "clOrdrId", "txt", "portfolio_id", "price", "quantity", "hidden_quantity", "display_quantity", "peak_price_delta", "action", "type", "details", "user_code", "pre_arranged", "pre_arranged_acct", "error_message", "location", "valid_until", "account_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OwnOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in contracts (list)
        _items = []
        if self.contracts:
            for _item in self.contracts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['contracts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OwnOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "order_id": obj.get("order_id"),
            "parent_order_id": obj.get("parent_order_id"),
            "initial_order_id": obj.get("initial_order_id"),
            "revision_no": obj.get("revision_no"),
            "api_timestamp": obj.get("api_timestamp"),
            "state": obj.get("state"),
            "delivery_area": obj.get("delivery_area"),
            "last_change_timestamp": obj.get("last_change_timestamp"),
            "buy": obj.get("buy"),
            "sell": obj.get("sell"),
            "side": obj.get("side"),
            "contracts": [ContractReference.from_dict(_item) for _item in obj["contracts"]] if obj.get("contracts") is not None else None,
            "contract_id": obj.get("contract_id"),
            "contract_name": obj.get("contract_name"),
            "delivery_start": obj.get("delivery_start"),
            "delivery_end": obj.get("delivery_end"),
            "clOrdrId": obj.get("clOrdrId"),
            "txt": obj.get("txt"),
            "portfolio_id": obj.get("portfolio_id"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "hidden_quantity": obj.get("hidden_quantity"),
            "display_quantity": obj.get("display_quantity"),
            "peak_price_delta": obj.get("peak_price_delta"),
            "action": obj.get("action"),
            "type": obj.get("type"),
            "details": obj.get("details"),
            "user_code": obj.get("user_code"),
            "pre_arranged": obj.get("pre_arranged"),
            "pre_arranged_acct": obj.get("pre_arranged_acct"),
            "error_message": obj.get("error_message"),
            "location": obj.get("location"),
            "valid_until": obj.get("valid_until"),
            "account_id": obj.get("account_id")
        })
        return _obj



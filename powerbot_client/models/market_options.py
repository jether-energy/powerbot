# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class MarketOptions(BaseModel):
    """
    MarketOptions
    """ # noqa: E501
    internal_trading: Optional[StrictStr] = Field(default=None, description="This setting configures the behaviour of the internal matching engine   * `inactive`    disabled, orders get sent to the exchange without checks for cross trades   * `default_yes` enabled by default, but can be disabled on a per-request basis   * `default_no`  disabled by default, but can be enabled on a per-request basis   * `active`      enabled for all requests")
    block_potential_self_trades: Optional[StrictStr] = Field(default=None, description="This setting the behaviour of orders that could potentially lead to self-trades and can't be resolved by the internal matching engine   * `disabled`                don't check for non-resolveable potential self-trades   * `block_all`               reject requests with orders that could lead to self-trades (own bid >= own ask)   * `block_if_not_resolvable` reject requests with orders that could lead to self-trades that can't be resolved by the internal matching engine (e.g. across delivery areas)")
    internal_trading_cross_area: Optional[StrictBool] = Field(default=None, description="German delivery areas have unlimited cross border capacities before entering `SDAT` mode. If this setting is set to true, then the German delivery areas will be treated as one area when matching internal trades during the `CONT` trading phase.  **Note**: NordPool does not report a contract's trading phase, so internal cross delivery trading area stays active until the lead time limit is reached.")
    internal_trading_cross_area_lead_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The time (in minutes) before a contract's delivery start, after which cross area matching gets disabled. If this option is set to '0', then cross area matching is enabled as long as a contract is in the trading phase `CONT`. Independent of this setting, cross area matching is only active during the `CONT` trading phase.  **Note**: NordPool does not report a contract's trading phase, so only the lead time determines if internal cross area trading should take place.")
    internal_trading_include_external_orders: Optional[StrictBool] = Field(default=None, description="If set to true, PowerBot will also create internal trades with orders that were not created through PowerBot, for example orders from ComTrader.")
    internal_trading_across_tenants: Optional[StrictBool] = Field(default=None, description="Controls whether cross trade detection works across tenants. It is enabled by default.")
    default_delivery_area_id: Optional[StrictStr] = Field(default=None, description="In multi-area configurations, set this option in case you want a default delivery area")
    restrict_safe_mode: Optional[StrictBool] = Field(default=None, description="Restrict switching market mode to the master API key. If set to true, only the master API key can toggle the market mode (call PUT/market/mode). If set to false, all master API keys, tenant master API keys and API keys with the 'can_trade' attribute set to true can toggle the market mode. Safe mode (emergency stop) has the following effects * all algorithm instances are stopped and can't be started * all active orders are deleted from the market * order entry / modification is disabled * trades can still be recalled  The default value is false.")
    throttling_user_action: Optional[StrictStr] = Field(default=None, description="This setting is only relevant for EPEX.  The behaviour of the exchange if you get suspended for violating your order quota limit. The default setting is `DO_NOTHING`.  **Warning**: To apply this setting, you will need to log out of the market and reconnect. In production, you will need to do this for both prod1 and prod2.  * `DO_NOTHING`       The exchange will take no further action after suspending you for order quota limit violations. * `HIBERNATE_ORDERS` The exchange will hibernate all user orders after suspending you for order quota limit violations.")
    enable_mfa: Optional[StrictBool] = Field(default=None, description="If set to true, PowerBot will enable MFA. The MFA secret will be returned in the response. It is not possible to retrieve the secret later on, so make sure you save it immediately.  **Note**: At this moment only M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM) supports MFA.")
    show_all_account_orders: Optional[StrictBool] = Field(default=None, description="If enabled, all orders from the exchange account get marked as `own_order: true` in the order book. Otherwise, only orders from accessible portfolios get marked.  Setting this to `false` has the side effect of `own_order` being set to `false` in all WebSocket events, regardless of user access.  The default setting is `true`.")
    __properties: ClassVar[List[str]] = ["internal_trading", "block_potential_self_trades", "internal_trading_cross_area", "internal_trading_cross_area_lead_time", "internal_trading_include_external_orders", "internal_trading_across_tenants", "default_delivery_area_id", "restrict_safe_mode", "throttling_user_action", "enable_mfa", "show_all_account_orders"]

    @field_validator('internal_trading')
    def internal_trading_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['inactive', 'default_yes', 'default_no', 'active']):
            raise ValueError("must be one of enum values ('inactive', 'default_yes', 'default_no', 'active')")
        return value

    @field_validator('block_potential_self_trades')
    def block_potential_self_trades_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['disabled', 'block_all', 'block_if_not_resolvable']):
            raise ValueError("must be one of enum values ('disabled', 'block_all', 'block_if_not_resolvable')")
        return value

    @field_validator('throttling_user_action')
    def throttling_user_action_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['DO_NOTHING', 'HIBERNATE_ORDERS']):
            raise ValueError("must be one of enum values ('DO_NOTHING', 'HIBERNATE_ORDERS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "internal_trading": obj.get("internal_trading"),
            "block_potential_self_trades": obj.get("block_potential_self_trades"),
            "internal_trading_cross_area": obj.get("internal_trading_cross_area"),
            "internal_trading_cross_area_lead_time": obj.get("internal_trading_cross_area_lead_time"),
            "internal_trading_include_external_orders": obj.get("internal_trading_include_external_orders"),
            "internal_trading_across_tenants": obj.get("internal_trading_across_tenants"),
            "default_delivery_area_id": obj.get("default_delivery_area_id"),
            "restrict_safe_mode": obj.get("restrict_safe_mode"),
            "throttling_user_action": obj.get("throttling_user_action"),
            "enable_mfa": obj.get("enable_mfa"),
            "show_all_account_orders": obj.get("show_all_account_orders")
        })
        return _obj



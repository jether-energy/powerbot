# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from powerbot_client.models.order_execution_restriction import OrderExecutionRestriction
from powerbot_client.models.order_side import OrderSide
from powerbot_client.models.order_type import OrderType
from powerbot_client.models.validity_restriction import ValidityRestriction
from typing import Optional, Set
from typing_extensions import Self

class OrderEntry(BaseModel):
    """
    OrderEntry
    """ # noqa: E501
    delivery_area: Optional[StrictStr] = Field(default=None, description="The delivery area of the orderbook's product. Mandatory in a multi-delivery-area configuration")
    portfolio_id: StrictStr
    side: Optional[OrderSide] = None
    prod: Optional[StrictStr] = Field(default=None, description="The product of the order")
    quantity: Union[StrictFloat, StrictInt] = Field(description="The quantity of the order in MW.")
    price: Union[StrictFloat, StrictInt] = Field(description="The price of the order in the contract's currency based on exchange product specification (typically in \"Currency per MWh\")")
    display_qty: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Used to define display quantity of an iceberg Order. This field is required only in the case of type=\"I\".", alias="displayQty")
    contract_id: Optional[StrictStr] = Field(default=None, description="The contractId of the order, can be omitted if contractName is specified instead.", alias="contractId")
    contract_name: Optional[StrictStr] = Field(default=None, description="Set a contract name instead of the contractId, and the attempt is made to look up the contract via it's name. If contractId is set, the contractName field is ignored.", alias="contractName")
    clearing_acct_type: Optional[StrictStr] = Field(default=None, description="A label for internal use, indicating whether the order is entered on its own account (\"P\") or as an agent (\"A\"). This label does not impact exchange functionality and is primarily used for internal categorization.  **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).", alias="clearingAcctType")
    ordr_exe_restriction: Optional[OrderExecutionRestriction] = Field(default=OrderExecutionRestriction.NON, alias="ordrExeRestriction")
    pre_arranged: Optional[StrictBool] = Field(default=False, description="Flag which indicates if the entered order is a pre-arranged order or not.", alias="preArranged")
    pre_arranged_acct: Optional[StrictStr] = Field(default=None, description="Required in case of a pre-arranged order. Contains the account of the counterpart.", alias="preArrangedAcct")
    type: Optional[OrderType] = None
    validity_res: Optional[ValidityRestriction] = Field(default=None, alias="validityRes")
    state: Optional[StrictStr] = Field(default=None, description="* ACTI: The order is entered and immediately exposed to the market for execution. This is the default value. * HIBE: The order is entered into the backend system but not exposed to the market.")
    validity_date: Optional[datetime] = Field(default=None, description="mandatory in case of validityRes equals \"GTD\". It is used to define the date until which the order is valid. The remaining part of the order will be removed from the order book after this point in time.", alias="validityDate")
    txt: Optional[StrictStr] = Field(default=None, description="Text which can be retrieved at a later point (i.e. via a trade which was triggered by the order)")
    ppd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Peak price delta for iceberg orders. * The ppd of buy orders must be smaller or equal than zero. * The ppd of sell orders must be greater or equal than zero. If it is omitted the system will assume a value of `0.00`.")
    dlvry_start: Optional[datetime] = Field(default=None, description="(optional) Start of delivery of the underlying contract.", alias="dlvryStart")
    dlvry_end: Optional[datetime] = Field(default=None, description="(optional) End of delivery of the underlying contract.", alias="dlvryEnd")
    expected_net_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected net_pos (see portfolio information for more details). Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedNetPos")
    expected_min_net_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedMinNetPos")
    expected_max_net_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected net_pos (see portfolio information for more details) plus the absolute quantity of all standing BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedMaxNetPos")
    expected_abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected abs_pos (see portfolio information for more details). Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedAbsPos")
    expected_sell_abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing SELL-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedSellAbsPos")
    expected_buy_abs_pos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The expected abs_pos (see portfolio information for more details) plus the absolute quantity of all standing BUY-Orders for the respective contract. Optional safety feature to mitigate race conditions if client and backend data are not in sync. Do not use this field for block products.", alias="expectedBuyAbsPos")
    location: Optional[StrictStr] = Field(default=None, description="Location within the delivery area. Should be only set for products with locations enabled.")
    account_id: Optional[StrictStr] = Field(default=None, description="Allows to set the exchange account for this order. The default account will be used if this field is unset. See available_account_ids from `GET /market` for possible values.")
    __properties: ClassVar[List[str]] = ["delivery_area", "portfolio_id", "side", "prod", "quantity", "price", "displayQty", "contractId", "contractName", "clearingAcctType", "ordrExeRestriction", "preArranged", "preArrangedAcct", "type", "validityRes", "state", "validityDate", "txt", "ppd", "dlvryStart", "dlvryEnd", "expectedNetPos", "expectedMinNetPos", "expectedMaxNetPos", "expectedAbsPos", "expectedSellAbsPos", "expectedBuyAbsPos", "location", "account_id"]

    @field_validator('state')
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ACTI', 'HIBE']):
            raise ValueError("must be one of enum values ('ACTI', 'HIBE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderEntry from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderEntry from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "delivery_area": obj.get("delivery_area"),
            "portfolio_id": obj.get("portfolio_id"),
            "side": obj.get("side"),
            "prod": obj.get("prod"),
            "quantity": obj.get("quantity"),
            "price": obj.get("price"),
            "displayQty": obj.get("displayQty"),
            "contractId": obj.get("contractId"),
            "contractName": obj.get("contractName"),
            "clearingAcctType": obj.get("clearingAcctType"),
            "ordrExeRestriction": obj.get("ordrExeRestriction") if obj.get("ordrExeRestriction") is not None else OrderExecutionRestriction.NON,
            "preArranged": obj.get("preArranged") if obj.get("preArranged") is not None else False,
            "preArrangedAcct": obj.get("preArrangedAcct"),
            "type": obj.get("type"),
            "validityRes": obj.get("validityRes"),
            "state": obj.get("state"),
            "validityDate": obj.get("validityDate"),
            "txt": obj.get("txt"),
            "ppd": obj.get("ppd"),
            "dlvryStart": obj.get("dlvryStart"),
            "dlvryEnd": obj.get("dlvryEnd"),
            "expectedNetPos": obj.get("expectedNetPos"),
            "expectedMinNetPos": obj.get("expectedMinNetPos"),
            "expectedMaxNetPos": obj.get("expectedMaxNetPos"),
            "expectedAbsPos": obj.get("expectedAbsPos"),
            "expectedSellAbsPos": obj.get("expectedSellAbsPos"),
            "expectedBuyAbsPos": obj.get("expectedBuyAbsPos"),
            "location": obj.get("location"),
            "account_id": obj.get("account_id")
        })
        return _obj



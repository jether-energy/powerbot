# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from powerbot_client.models.aggressor_indicator import AggressorIndicator
from powerbot_client.models.trade_state import TradeState
from typing import Optional, Set
from typing_extensions import Self

class Trade(BaseModel):
    """
    Trade
    """ # noqa: E501
    trade_id: Optional[StrictStr] = Field(default=None, description="Unique trade_id")
    state: Optional[TradeState] = TradeState.ACTI
    exchange: Optional[StrictStr] = Field(default=None, description="The exchange where the trade was executed")
    delivery_area: Optional[StrictStr] = Field(default=None, description="If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area")
    api_timestamp: Optional[datetime] = Field(default=None, description="The timestamp when the trade was received (UTC time zone)")
    exec_time: Optional[datetime] = Field(default=None, description="The timestamp when the trade was executed (UTC time zone)")
    buy: Optional[StrictBool] = Field(default=None, description="true if you bought energy")
    sell: Optional[StrictBool] = Field(default=None, description="true if you sold energy")
    buy_order_id: Optional[StrictStr] = Field(default=None, description="the order_id of the underlying buy-order")
    buy_delivery_area: Optional[StrictStr] = Field(default=None, description="The delivery area of the buy-side of the trade.")
    buy_cl_order_id: Optional[StrictStr] = Field(default=None, description="the client order id of the buy order", alias="buy_clOrderId")
    buy_txt: Optional[StrictStr] = Field(default=None, description="the custom text of the buy order")
    buy_user_code: Optional[StrictStr] = Field(default=None, description="the buyer's exchange user code")
    buy_member_id: Optional[StrictStr] = Field(default=None, description="the buyer's exchange member id")
    buy_aggressor_indicator: Optional[AggressorIndicator] = None
    buy_portfolio_id: Optional[StrictStr] = None
    sell_order_id: Optional[StrictStr] = Field(default=None, description="The seller's order id")
    sell_delivery_area: Optional[StrictStr] = Field(default=None, description="delivery area of the sell order")
    sell_cl_order_id: Optional[StrictStr] = Field(default=None, description="The sell order's client id", alias="sell_clOrderId")
    sell_txt: Optional[StrictStr] = Field(default=None, description="The sell order's custom text")
    sell_user_code: Optional[StrictStr] = Field(default=None, description="The seller's exchange user code")
    sell_member_id: Optional[StrictStr] = Field(default=None, description="The seller's exchange member id")
    sell_aggressor_indicator: Optional[AggressorIndicator] = None
    sell_portfolio_id: Optional[StrictStr] = None
    contract_id: Optional[StrictStr] = Field(default=None, description="The contract_id against which the trade was executed")
    contract_name: Optional[StrictStr] = Field(default=None, description="The contract's name against which the trade was executed.")
    delivery_start: Optional[datetime] = Field(default=None, description="Time when the delivery of this trade starts (UTC timezone)")
    delivery_end: Optional[datetime] = Field(default=None, description="Time when the delivery of this trade ends (UTC timezone)")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Price of the trade")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Quantity in MW for this trade")
    prod: Optional[StrictStr] = Field(default=None, description="Product id")
    self_trade: Optional[StrictBool] = None
    pre_arranged: Optional[StrictBool] = None
    pre_arrange_type: Optional[StrictStr] = None
    buy_clearing_account_type: Optional[StrictStr] = Field(default=None, description="A label for internal use, indicating whether the order is entered on its own account (\"P\") or as an agent (\"A\"). This label does not impact exchange functionality and is primarily used for internal categorization.  **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).")
    sell_clearing_account_type: Optional[StrictStr] = Field(default=None, description="A label for internal use, indicating whether the order is entered on its own account (\"P\") or as an agent (\"A\"). This label does not impact exchange functionality and is primarily used for internal categorization.  **Note**: Only relevant for M7 based exchanges (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM).")
    buy_account_id: Optional[StrictStr] = Field(default=None, description="The account for which the order was entered.")
    sell_account_id: Optional[StrictStr] = Field(default=None, description="The account for which the order was entered.")
    location: Optional[StrictStr] = Field(default=None, description="Location within the delivery area.  **Note**: At this moment only M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM) supports this field.")
    __properties: ClassVar[List[str]] = ["trade_id", "state", "exchange", "delivery_area", "api_timestamp", "exec_time", "buy", "sell", "buy_order_id", "buy_delivery_area", "buy_clOrderId", "buy_txt", "buy_user_code", "buy_member_id", "buy_aggressor_indicator", "buy_portfolio_id", "sell_order_id", "sell_delivery_area", "sell_clOrderId", "sell_txt", "sell_user_code", "sell_member_id", "sell_aggressor_indicator", "sell_portfolio_id", "contract_id", "contract_name", "delivery_start", "delivery_end", "price", "quantity", "prod", "self_trade", "pre_arranged", "pre_arrange_type", "buy_clearing_account_type", "sell_clearing_account_type", "buy_account_id", "sell_account_id", "location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Trade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Trade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trade_id": obj.get("trade_id"),
            "state": obj.get("state") if obj.get("state") is not None else TradeState.ACTI,
            "exchange": obj.get("exchange"),
            "delivery_area": obj.get("delivery_area"),
            "api_timestamp": obj.get("api_timestamp"),
            "exec_time": obj.get("exec_time"),
            "buy": obj.get("buy"),
            "sell": obj.get("sell"),
            "buy_order_id": obj.get("buy_order_id"),
            "buy_delivery_area": obj.get("buy_delivery_area"),
            "buy_clOrderId": obj.get("buy_clOrderId"),
            "buy_txt": obj.get("buy_txt"),
            "buy_user_code": obj.get("buy_user_code"),
            "buy_member_id": obj.get("buy_member_id"),
            "buy_aggressor_indicator": obj.get("buy_aggressor_indicator"),
            "buy_portfolio_id": obj.get("buy_portfolio_id"),
            "sell_order_id": obj.get("sell_order_id"),
            "sell_delivery_area": obj.get("sell_delivery_area"),
            "sell_clOrderId": obj.get("sell_clOrderId"),
            "sell_txt": obj.get("sell_txt"),
            "sell_user_code": obj.get("sell_user_code"),
            "sell_member_id": obj.get("sell_member_id"),
            "sell_aggressor_indicator": obj.get("sell_aggressor_indicator"),
            "sell_portfolio_id": obj.get("sell_portfolio_id"),
            "contract_id": obj.get("contract_id"),
            "contract_name": obj.get("contract_name"),
            "delivery_start": obj.get("delivery_start"),
            "delivery_end": obj.get("delivery_end"),
            "price": obj.get("price"),
            "quantity": obj.get("quantity"),
            "prod": obj.get("prod"),
            "self_trade": obj.get("self_trade"),
            "pre_arranged": obj.get("pre_arranged"),
            "pre_arrange_type": obj.get("pre_arrange_type"),
            "buy_clearing_account_type": obj.get("buy_clearing_account_type"),
            "sell_clearing_account_type": obj.get("sell_clearing_account_type"),
            "buy_account_id": obj.get("buy_account_id"),
            "sell_account_id": obj.get("sell_account_id"),
            "location": obj.get("location")
        })
        return _obj



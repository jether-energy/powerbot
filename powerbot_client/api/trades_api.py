# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from powerbot_client.models.internal_trade import InternalTrade
from powerbot_client.models.new_internal_trade import NewInternalTrade
from powerbot_client.models.trade import Trade

from powerbot_client.api_client import ApiClient, RequestSerialized
from powerbot_client.api_response import ApiResponse
from powerbot_client.rest import RESTResponseType


class TradesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_internal_trade(
        self,
        new_internal_trade: NewInternalTrade,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> InternalTrade:
        """Add internal trade

        This method allows you to manually register an internal trade between two portfolios. Internal trades are usually created by the system to prevent cross-trades, but this method allows you to register them manually.

        :param new_internal_trade: (required)
        :type new_internal_trade: NewInternalTrade
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_internal_trade_serialize(
            new_internal_trade=new_internal_trade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InternalTrade",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_internal_trade_with_http_info(
        self,
        new_internal_trade: NewInternalTrade,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[InternalTrade]:
        """Add internal trade

        This method allows you to manually register an internal trade between two portfolios. Internal trades are usually created by the system to prevent cross-trades, but this method allows you to register them manually.

        :param new_internal_trade: (required)
        :type new_internal_trade: NewInternalTrade
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_internal_trade_serialize(
            new_internal_trade=new_internal_trade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InternalTrade",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_internal_trade_without_preload_content(
        self,
        new_internal_trade: NewInternalTrade,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Add internal trade

        This method allows you to manually register an internal trade between two portfolios. Internal trades are usually created by the system to prevent cross-trades, but this method allows you to register them manually.

        :param new_internal_trade: (required)
        :type new_internal_trade: NewInternalTrade
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_internal_trade_serialize(
            new_internal_trade=new_internal_trade,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "InternalTrade",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_internal_trade_serialize(
        self,
        new_internal_trade,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if new_internal_trade is not None:
            _body_params = new_internal_trade


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/internal-trades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_internal_trades(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        internal_trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Optional[datetime] = None,
        delivery_within_end: Optional[datetime] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[InternalTrade]:
        """List internal trades

        List the internal trades you have carried out. Internal trades occur when the server detects a cross-trade between two of your orders and the option \"internal trading\" in market options is activated (either \"default_yes\" or \"default_no\").  The server checks for cross-trades before an order is sent to the market. If the order matches with one of your orders at the market, this order is (partially) taken from the market and the server registers an internal trade, for which an internal_trade_id is created.  It depends on the field \"internal trading\" being true for the orders involved and the setting internal_trading in market options not being set to inactive, if the server detects cross-trades.  As with GET /trades, this method allows you to filter for a wide range of parameters and uses pagination. Please be aware that you may see only one leg of the internal trade, if the other leg belongs to another tenant or portfolio.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param internal_trade_id: Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)
        :type internal_trade_id: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param from_api_timestamp: from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start:
        :type delivery_within_start: datetime
        :param delivery_within_end:
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_internal_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            internal_trade_id=internal_trade_id,
            contract_id=contract_id,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InternalTrade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_internal_trades_with_http_info(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        internal_trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Optional[datetime] = None,
        delivery_within_end: Optional[datetime] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[InternalTrade]]:
        """List internal trades

        List the internal trades you have carried out. Internal trades occur when the server detects a cross-trade between two of your orders and the option \"internal trading\" in market options is activated (either \"default_yes\" or \"default_no\").  The server checks for cross-trades before an order is sent to the market. If the order matches with one of your orders at the market, this order is (partially) taken from the market and the server registers an internal trade, for which an internal_trade_id is created.  It depends on the field \"internal trading\" being true for the orders involved and the setting internal_trading in market options not being set to inactive, if the server detects cross-trades.  As with GET /trades, this method allows you to filter for a wide range of parameters and uses pagination. Please be aware that you may see only one leg of the internal trade, if the other leg belongs to another tenant or portfolio.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param internal_trade_id: Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)
        :type internal_trade_id: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param from_api_timestamp: from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start:
        :type delivery_within_start: datetime
        :param delivery_within_end:
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_internal_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            internal_trade_id=internal_trade_id,
            contract_id=contract_id,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InternalTrade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_internal_trades_without_preload_content(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        internal_trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Optional[datetime] = None,
        delivery_within_end: Optional[datetime] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List internal trades

        List the internal trades you have carried out. Internal trades occur when the server detects a cross-trade between two of your orders and the option \"internal trading\" in market options is activated (either \"default_yes\" or \"default_no\").  The server checks for cross-trades before an order is sent to the market. If the order matches with one of your orders at the market, this order is (partially) taken from the market and the server registers an internal trade, for which an internal_trade_id is created.  It depends on the field \"internal trading\" being true for the orders involved and the setting internal_trading in market options not being set to inactive, if the server detects cross-trades.  As with GET /trades, this method allows you to filter for a wide range of parameters and uses pagination. Please be aware that you may see only one leg of the internal trade, if the other leg belongs to another tenant or portfolio.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param internal_trade_id: Filters request to only show the internal trade with this id (i.e. shows a single internal trade or none)
        :type internal_trade_id: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param from_api_timestamp: from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start:
        :type delivery_within_start: datetime
        :param delivery_within_end:
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_internal_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            internal_trade_id=internal_trade_id,
            contract_id=contract_id,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[InternalTrade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_internal_trades_serialize(
        self,
        portfolio_id,
        offset,
        limit,
        internal_trade_id,
        contract_id,
        from_execution_time,
        to_execution_time,
        from_api_timestamp,
        to_api_timestamp,
        delivery_within_start,
        delivery_within_end,
        delivery_area,
        sort_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
            'contract_id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if internal_trade_id is not None:
            
            _query_params.append(('internal_trade_id', internal_trade_id))
            
        if contract_id is not None:
            
            _query_params.append(('contract_id', contract_id))
            
        if from_execution_time is not None:
            if isinstance(from_execution_time, datetime):
                _query_params.append(
                    (
                        'from_execution_time',
                        from_execution_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from_execution_time', from_execution_time))
            
        if to_execution_time is not None:
            if isinstance(to_execution_time, datetime):
                _query_params.append(
                    (
                        'to_execution_time',
                        to_execution_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to_execution_time', to_execution_time))
            
        if from_api_timestamp is not None:
            if isinstance(from_api_timestamp, datetime):
                _query_params.append(
                    (
                        'from_api_timestamp',
                        from_api_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from_api_timestamp', from_api_timestamp))
            
        if to_api_timestamp is not None:
            if isinstance(to_api_timestamp, datetime):
                _query_params.append(
                    (
                        'to_api_timestamp',
                        to_api_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to_api_timestamp', to_api_timestamp))
            
        if delivery_within_start is not None:
            if isinstance(delivery_within_start, datetime):
                _query_params.append(
                    (
                        'delivery_within_start',
                        delivery_within_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_within_start', delivery_within_start))
            
        if delivery_within_end is not None:
            if isinstance(delivery_within_end, datetime):
                _query_params.append(
                    (
                        'delivery_within_end',
                        delivery_within_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_within_end', delivery_within_end))
            
        if delivery_area is not None:
            
            _query_params.append(('delivery_area', delivery_area))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/internal-trades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_trades(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the trade with this trade_id (shows a single trade or none)")] = None,
        ord_id: Annotated[Optional[StrictStr], Field(description="Limit the trades to those which are related to a particular order_id")] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Show only those trades which are active (no rejected, recalled or cancelled trades)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_end")] = None,
        delivery_within_end: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_start")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange's user code")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Trade]:
        """List external trades

        Allows you to retrieve the trades (deals) you have executed at the exchange. Each trade at the exchange consists of a buy and sell leg (based on the buy and sell order that were involved in the trade), whereby usually only one leg belongs to you and is therefore visible. In case of a cros-trade, both legs are visible.  This method provides a wide range of filtering options (array of portfolios, trade_id, order_id, txt etc). Please note that this method uses pagination. To fetch trades executed in a given time window, please use from_execution_time and to_execution_time (UTC), not api_timestamp (which indicates the time the server has received the trade confirmation, which can be delayed and might be updated).  Please be aware that some exchange systems may report executed trades slightly delayed. If you would like to know in real time if you have made a trade or not, we recommend to rely on the execution status of orders instead of trades or to use the NetPos attribute.  The option \"active_only\" (default yes) filters for trades that are market active by the exchange system, meaning no recalled or cancelled trades are delivered. The filter \"txt\" allows you to filter for trades that involve an order with a custom text in the txt attribute.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param trade_id: Filters request to only show the trade with this trade_id (shows a single trade or none)
        :type trade_id: str
        :param ord_id: Limit the trades to those which are related to a particular order_id
        :type ord_id: str
        :param active_only: Show only those trades which are active (no rejected, recalled or cancelled trades)
        :type active_only: bool
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time
        :type txt: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_api_timestamp: from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start: can only be used together with delivery_within_end
        :type delivery_within_start: datetime
        :param delivery_within_end: can only be used together with delivery_within_start
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param user_code: the exchange's user code
        :type user_code: str
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            trade_id=trade_id,
            ord_id=ord_id,
            active_only=active_only,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            user_code=user_code,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_trades_with_http_info(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the trade with this trade_id (shows a single trade or none)")] = None,
        ord_id: Annotated[Optional[StrictStr], Field(description="Limit the trades to those which are related to a particular order_id")] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Show only those trades which are active (no rejected, recalled or cancelled trades)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_end")] = None,
        delivery_within_end: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_start")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange's user code")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Trade]]:
        """List external trades

        Allows you to retrieve the trades (deals) you have executed at the exchange. Each trade at the exchange consists of a buy and sell leg (based on the buy and sell order that were involved in the trade), whereby usually only one leg belongs to you and is therefore visible. In case of a cros-trade, both legs are visible.  This method provides a wide range of filtering options (array of portfolios, trade_id, order_id, txt etc). Please note that this method uses pagination. To fetch trades executed in a given time window, please use from_execution_time and to_execution_time (UTC), not api_timestamp (which indicates the time the server has received the trade confirmation, which can be delayed and might be updated).  Please be aware that some exchange systems may report executed trades slightly delayed. If you would like to know in real time if you have made a trade or not, we recommend to rely on the execution status of orders instead of trades or to use the NetPos attribute.  The option \"active_only\" (default yes) filters for trades that are market active by the exchange system, meaning no recalled or cancelled trades are delivered. The filter \"txt\" allows you to filter for trades that involve an order with a custom text in the txt attribute.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param trade_id: Filters request to only show the trade with this trade_id (shows a single trade or none)
        :type trade_id: str
        :param ord_id: Limit the trades to those which are related to a particular order_id
        :type ord_id: str
        :param active_only: Show only those trades which are active (no rejected, recalled or cancelled trades)
        :type active_only: bool
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time
        :type txt: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_api_timestamp: from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start: can only be used together with delivery_within_end
        :type delivery_within_start: datetime
        :param delivery_within_end: can only be used together with delivery_within_start
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param user_code: the exchange's user code
        :type user_code: str
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            trade_id=trade_id,
            ord_id=ord_id,
            active_only=active_only,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            user_code=user_code,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_trades_without_preload_content(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded items")] = None,
        trade_id: Annotated[Optional[StrictStr], Field(description="Filters request to only show the trade with this trade_id (shows a single trade or none)")] = None,
        ord_id: Annotated[Optional[StrictStr], Field(description="Limit the trades to those which are related to a particular order_id")] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Show only those trades which are active (no rejected, recalled or cancelled trades)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time")] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Show only those trades related to a specific contract")] = None,
        from_api_timestamp: Annotated[Optional[datetime], Field(description="from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_api_timestamp: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        delivery_within_start: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_end")] = None,
        delivery_within_end: Annotated[Optional[datetime], Field(description="can only be used together with delivery_within_start")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The delivery area.")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange's user code")] = None,
        from_execution_time: Annotated[Optional[datetime], Field(description="from timestamp is 'inclusive' (i.e. >=)")] = None,
        to_execution_time: Annotated[Optional[datetime], Field(description="to timestamp is 'exclusive' (i.e. <)")] = None,
        sort_by: Annotated[Optional[StrictStr], Field(description="Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List external trades

        Allows you to retrieve the trades (deals) you have executed at the exchange. Each trade at the exchange consists of a buy and sell leg (based on the buy and sell order that were involved in the trade), whereby usually only one leg belongs to you and is therefore visible. In case of a cros-trade, both legs are visible.  This method provides a wide range of filtering options (array of portfolios, trade_id, order_id, txt etc). Please note that this method uses pagination. To fetch trades executed in a given time window, please use from_execution_time and to_execution_time (UTC), not api_timestamp (which indicates the time the server has received the trade confirmation, which can be delayed and might be updated).  Please be aware that some exchange systems may report executed trades slightly delayed. If you would like to know in real time if you have made a trade or not, we recommend to rely on the execution status of orders instead of trades or to use the NetPos attribute.  The option \"active_only\" (default yes) filters for trades that are market active by the exchange system, meaning no recalled or cancelled trades are delivered. The filter \"txt\" allows you to filter for trades that involve an order with a custom text in the txt attribute.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded items
        :type limit: int
        :param trade_id: Filters request to only show the trade with this trade_id (shows a single trade or none)
        :type trade_id: str
        :param ord_id: Limit the trades to those which are related to a particular order_id
        :type ord_id: str
        :param active_only: Show only those trades which are active (no rejected, recalled or cancelled trades)
        :type active_only: bool
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point in time
        :type txt: str
        :param contract_id: Show only those trades related to a specific contract
        :type contract_id: List[str]
        :param from_api_timestamp: from timestamp when system has received the trade; from timestamp is 'inclusive' (i.e. >=)
        :type from_api_timestamp: datetime
        :param to_api_timestamp: to timestamp is 'exclusive' (i.e. <)
        :type to_api_timestamp: datetime
        :param delivery_within_start: can only be used together with delivery_within_end
        :type delivery_within_start: datetime
        :param delivery_within_end: can only be used together with delivery_within_start
        :type delivery_within_end: datetime
        :param delivery_area: The delivery area.
        :type delivery_area: str
        :param user_code: the exchange's user code
        :type user_code: str
        :param from_execution_time: from timestamp is 'inclusive' (i.e. >=)
        :type from_execution_time: datetime
        :param to_execution_time: to timestamp is 'exclusive' (i.e. <)
        :type to_execution_time: datetime
        :param sort_by: Sorts by the given field and order. Separate multiple sorting options with a comma (\",\")
        :type sort_by: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_trades_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            trade_id=trade_id,
            ord_id=ord_id,
            active_only=active_only,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            from_api_timestamp=from_api_timestamp,
            to_api_timestamp=to_api_timestamp,
            delivery_within_start=delivery_within_start,
            delivery_within_end=delivery_within_end,
            delivery_area=delivery_area,
            user_code=user_code,
            from_execution_time=from_execution_time,
            to_execution_time=to_execution_time,
            sort_by=sort_by,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_trades_serialize(
        self,
        portfolio_id,
        offset,
        limit,
        trade_id,
        ord_id,
        active_only,
        cl_ordr_id,
        txt,
        contract_id,
        from_api_timestamp,
        to_api_timestamp,
        delivery_within_start,
        delivery_within_end,
        delivery_area,
        user_code,
        from_execution_time,
        to_execution_time,
        sort_by,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
            'contract_id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if trade_id is not None:
            
            _query_params.append(('trade_id', trade_id))
            
        if ord_id is not None:
            
            _query_params.append(('ordId', ord_id))
            
        if active_only is not None:
            
            _query_params.append(('active_only', active_only))
            
        if cl_ordr_id is not None:
            
            _query_params.append(('clOrdrId', cl_ordr_id))
            
        if txt is not None:
            
            _query_params.append(('txt', txt))
            
        if contract_id is not None:
            
            _query_params.append(('contract_id', contract_id))
            
        if from_api_timestamp is not None:
            if isinstance(from_api_timestamp, datetime):
                _query_params.append(
                    (
                        'from_api_timestamp',
                        from_api_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from_api_timestamp', from_api_timestamp))
            
        if to_api_timestamp is not None:
            if isinstance(to_api_timestamp, datetime):
                _query_params.append(
                    (
                        'to_api_timestamp',
                        to_api_timestamp.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to_api_timestamp', to_api_timestamp))
            
        if delivery_within_start is not None:
            if isinstance(delivery_within_start, datetime):
                _query_params.append(
                    (
                        'delivery_within_start',
                        delivery_within_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_within_start', delivery_within_start))
            
        if delivery_within_end is not None:
            if isinstance(delivery_within_end, datetime):
                _query_params.append(
                    (
                        'delivery_within_end',
                        delivery_within_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_within_end', delivery_within_end))
            
        if delivery_area is not None:
            
            _query_params.append(('delivery_area', delivery_area))
            
        if user_code is not None:
            
            _query_params.append(('user_code', user_code))
            
        if from_execution_time is not None:
            if isinstance(from_execution_time, datetime):
                _query_params.append(
                    (
                        'from_execution_time',
                        from_execution_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('from_execution_time', from_execution_time))
            
        if to_execution_time is not None:
            if isinstance(to_execution_time, datetime):
                _query_params.append(
                    (
                        'to_execution_time',
                        to_execution_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('to_execution_time', to_execution_time))
            
        if sort_by is not None:
            
            _query_params.append(('sort_by', sort_by))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/trades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def recall_trade(
        self,
        trade_id: Annotated[StrictStr, Field(description="The unique trade_id of the trade you would like to recall")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[Trade]:
        """Recall external trade

        Attempts to recall a trade. Note that this may fail depending on the conditions set by the market operations. Check the trade's state after attempting to recall a trade.  Please be aware of the exchange market rules on trade recall. Usually, trade recalls are limited to a short time frame and are subject to high fees.

        :param trade_id: The unique trade_id of the trade you would like to recall (required)
        :type trade_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recall_trade_serialize(
            trade_id=trade_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def recall_trade_with_http_info(
        self,
        trade_id: Annotated[StrictStr, Field(description="The unique trade_id of the trade you would like to recall")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[Trade]]:
        """Recall external trade

        Attempts to recall a trade. Note that this may fail depending on the conditions set by the market operations. Check the trade's state after attempting to recall a trade.  Please be aware of the exchange market rules on trade recall. Usually, trade recalls are limited to a short time frame and are subject to high fees.

        :param trade_id: The unique trade_id of the trade you would like to recall (required)
        :type trade_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recall_trade_serialize(
            trade_id=trade_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def recall_trade_without_preload_content(
        self,
        trade_id: Annotated[StrictStr, Field(description="The unique trade_id of the trade you would like to recall")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Recall external trade

        Attempts to recall a trade. Note that this may fail depending on the conditions set by the market operations. Check the trade's state after attempting to recall a trade.  Please be aware of the exchange market rules on trade recall. Usually, trade recalls are limited to a short time frame and are subject to high fees.

        :param trade_id: The unique trade_id of the trade you would like to recall (required)
        :type trade_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._recall_trade_serialize(
            trade_id=trade_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[Trade]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _recall_trade_serialize(
        self,
        trade_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if trade_id is not None:
            _path_params['trade_id'] = trade_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/trade/{trade_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



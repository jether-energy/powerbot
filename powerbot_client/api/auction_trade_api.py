# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from powerbot_client.models.auction_trade import AuctionTrade
from powerbot_client.models.auction_trade_state import AuctionTradeState
from powerbot_client.models.exchange import Exchange

from powerbot_client.api_client import ApiClient, RequestSerialized
from powerbot_client.api_response import ApiResponse
from powerbot_client.rest import RESTResponseType


class AuctionTradeApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def find_auction_trades(
        self,
        exchange_id: Exchange,
        portfolio_ids: Annotated[List[StrictStr], Field(description="At least one portfolio has to be provided.")],
        auction_ids: Optional[List[StrictStr]] = None,
        delivery_areas: Optional[List[StrictStr]] = None,
        delivery_from: Optional[datetime] = None,
        delivery_to: Optional[datetime] = None,
        state: Optional[AuctionTradeState] = None,
        processed_from: Optional[datetime] = None,
        processed_to: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AuctionTrade]:
        """Find trades

        Return a list of auction trades for the search criteria.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param portfolio_ids: At least one portfolio has to be provided. (required)
        :type portfolio_ids: List[str]
        :param auction_ids:
        :type auction_ids: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_auction_trades_serialize(
            exchange_id=exchange_id,
            portfolio_ids=portfolio_ids,
            auction_ids=auction_ids,
            delivery_areas=delivery_areas,
            delivery_from=delivery_from,
            delivery_to=delivery_to,
            state=state,
            processed_from=processed_from,
            processed_to=processed_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def find_auction_trades_with_http_info(
        self,
        exchange_id: Exchange,
        portfolio_ids: Annotated[List[StrictStr], Field(description="At least one portfolio has to be provided.")],
        auction_ids: Optional[List[StrictStr]] = None,
        delivery_areas: Optional[List[StrictStr]] = None,
        delivery_from: Optional[datetime] = None,
        delivery_to: Optional[datetime] = None,
        state: Optional[AuctionTradeState] = None,
        processed_from: Optional[datetime] = None,
        processed_to: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AuctionTrade]]:
        """Find trades

        Return a list of auction trades for the search criteria.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param portfolio_ids: At least one portfolio has to be provided. (required)
        :type portfolio_ids: List[str]
        :param auction_ids:
        :type auction_ids: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_auction_trades_serialize(
            exchange_id=exchange_id,
            portfolio_ids=portfolio_ids,
            auction_ids=auction_ids,
            delivery_areas=delivery_areas,
            delivery_from=delivery_from,
            delivery_to=delivery_to,
            state=state,
            processed_from=processed_from,
            processed_to=processed_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def find_auction_trades_without_preload_content(
        self,
        exchange_id: Exchange,
        portfolio_ids: Annotated[List[StrictStr], Field(description="At least one portfolio has to be provided.")],
        auction_ids: Optional[List[StrictStr]] = None,
        delivery_areas: Optional[List[StrictStr]] = None,
        delivery_from: Optional[datetime] = None,
        delivery_to: Optional[datetime] = None,
        state: Optional[AuctionTradeState] = None,
        processed_from: Optional[datetime] = None,
        processed_to: Optional[datetime] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Find trades

        Return a list of auction trades for the search criteria.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param portfolio_ids: At least one portfolio has to be provided. (required)
        :type portfolio_ids: List[str]
        :param auction_ids:
        :type auction_ids: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param delivery_from:
        :type delivery_from: datetime
        :param delivery_to:
        :type delivery_to: datetime
        :param state:
        :type state: AuctionTradeState
        :param processed_from:
        :type processed_from: datetime
        :param processed_to:
        :type processed_to: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._find_auction_trades_serialize(
            exchange_id=exchange_id,
            portfolio_ids=portfolio_ids,
            auction_ids=auction_ids,
            delivery_areas=delivery_areas,
            delivery_from=delivery_from,
            delivery_to=delivery_to,
            state=state,
            processed_from=processed_from,
            processed_to=processed_to,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _find_auction_trades_serialize(
        self,
        exchange_id,
        portfolio_ids,
        auction_ids,
        delivery_areas,
        delivery_from,
        delivery_to,
        state,
        processed_from,
        processed_to,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_ids': 'multi',
            'auction_ids': 'csv',
            'delivery_areas': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if exchange_id is not None:
            _path_params['exchange_id'] = exchange_id.value
        # process the query parameters
        if auction_ids is not None:
            
            _query_params.append(('auction_ids', auction_ids))
            
        if delivery_areas is not None:
            
            _query_params.append(('delivery_areas', delivery_areas))
            
        if portfolio_ids is not None:
            
            _query_params.append(('portfolio_ids', portfolio_ids))
            
        if delivery_from is not None:
            if isinstance(delivery_from, datetime):
                _query_params.append(
                    (
                        'delivery_from',
                        delivery_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_from', delivery_from))
            
        if delivery_to is not None:
            if isinstance(delivery_to, datetime):
                _query_params.append(
                    (
                        'delivery_to',
                        delivery_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_to', delivery_to))
            
        if state is not None:
            
            _query_params.append(('state', state.value))
            
        if processed_from is not None:
            if isinstance(processed_from, datetime):
                _query_params.append(
                    (
                        'processed_from',
                        processed_from.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('processed_from', processed_from))
            
        if processed_to is not None:
            if isinstance(processed_to, datetime):
                _query_params.append(
                    (
                        'processed_to',
                        processed_to.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('processed_to', processed_to))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auction/{exchange_id}/trades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_auction_trades(
        self,
        exchange_id: Exchange,
        auction_id: Annotated[StrictStr, Field(description="The ID of the auction.")],
        delivery_area: Annotated[StrictStr, Field(description="The delivery area used for the request.")],
        portfolio_id: Annotated[StrictStr, Field(description="The ID of the portfolio.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[AuctionTrade]:
        """Get trades for auction

        Return a list of trades for the given auction, delivery area and portfolio.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auction_trades_serialize(
            exchange_id=exchange_id,
            auction_id=auction_id,
            delivery_area=delivery_area,
            portfolio_id=portfolio_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_auction_trades_with_http_info(
        self,
        exchange_id: Exchange,
        auction_id: Annotated[StrictStr, Field(description="The ID of the auction.")],
        delivery_area: Annotated[StrictStr, Field(description="The delivery area used for the request.")],
        portfolio_id: Annotated[StrictStr, Field(description="The ID of the portfolio.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[AuctionTrade]]:
        """Get trades for auction

        Return a list of trades for the given auction, delivery area and portfolio.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auction_trades_serialize(
            exchange_id=exchange_id,
            auction_id=auction_id,
            delivery_area=delivery_area,
            portfolio_id=portfolio_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_auction_trades_without_preload_content(
        self,
        exchange_id: Exchange,
        auction_id: Annotated[StrictStr, Field(description="The ID of the auction.")],
        delivery_area: Annotated[StrictStr, Field(description="The delivery area used for the request.")],
        portfolio_id: Annotated[StrictStr, Field(description="The ID of the portfolio.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get trades for auction

        Return a list of trades for the given auction, delivery area and portfolio.

        :param exchange_id: (required)
        :type exchange_id: Exchange
        :param auction_id: The ID of the auction. (required)
        :type auction_id: str
        :param delivery_area: The delivery area used for the request. (required)
        :type delivery_area: str
        :param portfolio_id: The ID of the portfolio. (required)
        :type portfolio_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_auction_trades_serialize(
            exchange_id=exchange_id,
            auction_id=auction_id,
            delivery_area=delivery_area,
            portfolio_id=portfolio_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[AuctionTrade]",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_auction_trades_serialize(
        self,
        exchange_id,
        auction_id,
        delivery_area,
        portfolio_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if exchange_id is not None:
            _path_params['exchange_id'] = exchange_id.value
        if auction_id is not None:
            _path_params['auction_id'] = auction_id
        if delivery_area is not None:
            _path_params['delivery_area'] = delivery_area
        if portfolio_id is not None:
            _path_params['portfolio_id'] = portfolio_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/auction/{exchange_id}/{auction_id}/{delivery_area}/{portfolio_id}/trades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from powerbot_client.models.exchange import Exchange
from powerbot_client.models.historic_orders_response import HistoricOrdersResponse
from powerbot_client.models.historic_trades_response import HistoricTradesResponse
from powerbot_client.models.self_trade_selector import SelfTradeSelector

from powerbot_client.api_client import ApiClient, RequestSerialized
from powerbot_client.api_response import ApiResponse
from powerbot_client.rest import RESTResponseType


class HistoricDataApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_historic_orders(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The delivery area of the target contract.")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of order book revisions to return in one page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        delivery_start: Annotated[Optional[datetime], Field(description="The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.")] = None,
        delivery_end: Annotated[Optional[datetime], Field(description="The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.")] = None,
        product: Annotated[Optional[StrictStr], Field(description="The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.")] = None,
        contract_id: Annotated[Optional[StrictStr], Field(description="The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HistoricOrdersResponse:
        """Get order book revisions for historic contracts

        Allows to retrieve all order revisions of historic contracts.  Note that this endpoint returns order revisions, and not orders. This means that the same order ID will appear multiple times, once for each update (creation, update or deletion).

        :param delivery_area: The delivery area of the target contract. (required)
        :type delivery_area: str
        :param page_size: The number of order book revisions to return in one page.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param delivery_start: The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_start: datetime
        :param delivery_end: The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_end: datetime
        :param product: The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.
        :type product: str
        :param contract_id: The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_orders_serialize(
            delivery_area=delivery_area,
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            delivery_start=delivery_start,
            delivery_end=delivery_end,
            product=product,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_historic_orders_with_http_info(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The delivery area of the target contract.")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of order book revisions to return in one page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        delivery_start: Annotated[Optional[datetime], Field(description="The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.")] = None,
        delivery_end: Annotated[Optional[datetime], Field(description="The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.")] = None,
        product: Annotated[Optional[StrictStr], Field(description="The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.")] = None,
        contract_id: Annotated[Optional[StrictStr], Field(description="The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HistoricOrdersResponse]:
        """Get order book revisions for historic contracts

        Allows to retrieve all order revisions of historic contracts.  Note that this endpoint returns order revisions, and not orders. This means that the same order ID will appear multiple times, once for each update (creation, update or deletion).

        :param delivery_area: The delivery area of the target contract. (required)
        :type delivery_area: str
        :param page_size: The number of order book revisions to return in one page.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param delivery_start: The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_start: datetime
        :param delivery_end: The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_end: datetime
        :param product: The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.
        :type product: str
        :param contract_id: The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_orders_serialize(
            delivery_area=delivery_area,
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            delivery_start=delivery_start,
            delivery_end=delivery_end,
            product=product,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_historic_orders_without_preload_content(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The delivery area of the target contract.")],
        page_size: Annotated[Optional[StrictInt], Field(description="The number of order book revisions to return in one page.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        delivery_start: Annotated[Optional[datetime], Field(description="The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.")] = None,
        delivery_end: Annotated[Optional[datetime], Field(description="The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.")] = None,
        product: Annotated[Optional[StrictStr], Field(description="The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.")] = None,
        contract_id: Annotated[Optional[StrictStr], Field(description="The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get order book revisions for historic contracts

        Allows to retrieve all order revisions of historic contracts.  Note that this endpoint returns order revisions, and not orders. This means that the same order ID will appear multiple times, once for each update (creation, update or deletion).

        :param delivery_area: The delivery area of the target contract. (required)
        :type delivery_area: str
        :param page_size: The number of order book revisions to return in one page.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param delivery_start: The delivery start time of the target contract. Must be used together with `delivery_end` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_start: datetime
        :param delivery_end: The delivery end time of the target contract. Must be used together with `delivery_start` and `product`. Alternatively, `contract_id` can be used.
        :type delivery_end: datetime
        :param product: The product of the target contract. Must be used together with  `delivery_start` and `delivery_end`. Alternatively, `contract_id` can be used.
        :type product: str
        :param contract_id: The ID of the target contract. Alternatively, `delivery_start`, `delivery_end` and `contract_id` can be used.
        :type contract_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_orders_serialize(
            delivery_area=delivery_area,
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            delivery_start=delivery_start,
            delivery_end=delivery_end,
            product=product,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricOrdersResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_historic_orders_serialize(
        self,
        delivery_area,
        page_size,
        page_token,
        exchange,
        delivery_start,
        delivery_end,
        product,
        contract_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if exchange is not None:
            
            _query_params.append(('exchange', exchange.value))
            
        if delivery_area is not None:
            
            _query_params.append(('delivery_area', delivery_area))
            
        if delivery_start is not None:
            if isinstance(delivery_start, datetime):
                _query_params.append(
                    (
                        'delivery_start',
                        delivery_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_start', delivery_start))
            
        if delivery_end is not None:
            if isinstance(delivery_end, datetime):
                _query_params.append(
                    (
                        'delivery_end',
                        delivery_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_end', delivery_end))
            
        if product is not None:
            
            _query_params.append(('product', product))
            
        if contract_id is not None:
            
            _query_params.append(('contract_id', contract_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/historic/publicorders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_historic_trades(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        period_start: Annotated[Optional[datetime], Field(description="The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`")] = None,
        period_end: Annotated[Optional[datetime], Field(description="The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`")] = None,
        period_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.")] = None,
        delivery_period_duration_minutes: Optional[StrictInt] = None,
        delivery_area_buy: Optional[StrictStr] = None,
        delivery_area_sell: Optional[StrictStr] = None,
        delivery_area_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.")] = None,
        contract_ids: Optional[List[StrictStr]] = None,
        products: Optional[List[StrictStr]] = None,
        execution_from_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`")] = None,
        execution_to_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`")] = None,
        self_trades: Optional[SelfTradeSelector] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> HistoricTradesResponse:
        """Get trades for historic contracts


        :param page_size: The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param period_start: The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`
        :type period_start: datetime
        :param period_end: The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`
        :type period_end: datetime
        :param period_match_exact: If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.
        :type period_match_exact: bool
        :param delivery_period_duration_minutes:
        :type delivery_period_duration_minutes: int
        :param delivery_area_buy:
        :type delivery_area_buy: str
        :param delivery_area_sell:
        :type delivery_area_sell: str
        :param delivery_area_match_exact: If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.
        :type delivery_area_match_exact: bool
        :param contract_ids:
        :type contract_ids: List[str]
        :param products:
        :type products: List[str]
        :param execution_from_offset_minutes: Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`
        :type execution_from_offset_minutes: int
        :param execution_to_offset_minutes: Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`
        :type execution_to_offset_minutes: int
        :param self_trades:
        :type self_trades: SelfTradeSelector
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_trades_serialize(
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            period_start=period_start,
            period_end=period_end,
            period_match_exact=period_match_exact,
            delivery_period_duration_minutes=delivery_period_duration_minutes,
            delivery_area_buy=delivery_area_buy,
            delivery_area_sell=delivery_area_sell,
            delivery_area_match_exact=delivery_area_match_exact,
            contract_ids=contract_ids,
            products=products,
            execution_from_offset_minutes=execution_from_offset_minutes,
            execution_to_offset_minutes=execution_to_offset_minutes,
            self_trades=self_trades,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricTradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_historic_trades_with_http_info(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        period_start: Annotated[Optional[datetime], Field(description="The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`")] = None,
        period_end: Annotated[Optional[datetime], Field(description="The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`")] = None,
        period_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.")] = None,
        delivery_period_duration_minutes: Optional[StrictInt] = None,
        delivery_area_buy: Optional[StrictStr] = None,
        delivery_area_sell: Optional[StrictStr] = None,
        delivery_area_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.")] = None,
        contract_ids: Optional[List[StrictStr]] = None,
        products: Optional[List[StrictStr]] = None,
        execution_from_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`")] = None,
        execution_to_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`")] = None,
        self_trades: Optional[SelfTradeSelector] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[HistoricTradesResponse]:
        """Get trades for historic contracts


        :param page_size: The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param period_start: The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`
        :type period_start: datetime
        :param period_end: The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`
        :type period_end: datetime
        :param period_match_exact: If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.
        :type period_match_exact: bool
        :param delivery_period_duration_minutes:
        :type delivery_period_duration_minutes: int
        :param delivery_area_buy:
        :type delivery_area_buy: str
        :param delivery_area_sell:
        :type delivery_area_sell: str
        :param delivery_area_match_exact: If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.
        :type delivery_area_match_exact: bool
        :param contract_ids:
        :type contract_ids: List[str]
        :param products:
        :type products: List[str]
        :param execution_from_offset_minutes: Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`
        :type execution_from_offset_minutes: int
        :param execution_to_offset_minutes: Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`
        :type execution_to_offset_minutes: int
        :param self_trades:
        :type self_trades: SelfTradeSelector
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_trades_serialize(
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            period_start=period_start,
            period_end=period_end,
            period_match_exact=period_match_exact,
            delivery_period_duration_minutes=delivery_period_duration_minutes,
            delivery_area_buy=delivery_area_buy,
            delivery_area_sell=delivery_area_sell,
            delivery_area_match_exact=delivery_area_match_exact,
            contract_ids=contract_ids,
            products=products,
            execution_from_offset_minutes=execution_from_offset_minutes,
            execution_to_offset_minutes=execution_to_offset_minutes,
            self_trades=self_trades,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricTradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_historic_trades_without_preload_content(
        self,
        page_size: Annotated[Optional[StrictInt], Field(description="The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.")] = None,
        page_token: Annotated[Optional[StrictStr], Field(description="Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.")] = None,
        exchange: Annotated[Optional[Exchange], Field(description="This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.")] = None,
        period_start: Annotated[Optional[datetime], Field(description="The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`")] = None,
        period_end: Annotated[Optional[datetime], Field(description="The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`")] = None,
        period_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.")] = None,
        delivery_period_duration_minutes: Optional[StrictInt] = None,
        delivery_area_buy: Optional[StrictStr] = None,
        delivery_area_sell: Optional[StrictStr] = None,
        delivery_area_match_exact: Annotated[Optional[StrictBool], Field(description="If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.")] = None,
        contract_ids: Optional[List[StrictStr]] = None,
        products: Optional[List[StrictStr]] = None,
        execution_from_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`")] = None,
        execution_to_offset_minutes: Annotated[Optional[StrictInt], Field(description="Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`")] = None,
        self_trades: Optional[SelfTradeSelector] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Get trades for historic contracts


        :param page_size: The number of trades to return in one page. Setting this field to `0` will return all trades if `period_match_exact` is set to `true` or only one contract ID is provided.
        :type page_size: int
        :param page_token: Used for request pagination. If a response has the field `next_page_token` set, you can provide that value as the `page_token` parameter to retrieve the next page of results. The first request does not need to have the `page_token` parameter set.
        :type page_token: str
        :param exchange: This value can be used to retrieve data from other exchanges. This is only possible for exchanges you are actively using, or have used in the past.  It defaults to the current exchange if no value is specified.
        :type exchange: Exchange
        :param period_start: The lower limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_start` exactly with `period_match_exact`
        :type period_start: datetime
        :param period_end: The upper limit (inclusive) of contract delivery periods. Can be set to match contract `delivery_end` exactly with `period_match_exact`
        :type period_end: datetime
        :param period_match_exact: If set to true, only trades for contract with a delivery period that exactly matches `period_start` and `period_end` will be returned. Otherwise, trades for all contracts with a delivery period that fully falls between `period_start` and `period_end` will be considered.
        :type period_match_exact: bool
        :param delivery_period_duration_minutes:
        :type delivery_period_duration_minutes: int
        :param delivery_area_buy:
        :type delivery_area_buy: str
        :param delivery_area_sell:
        :type delivery_area_sell: str
        :param delivery_area_match_exact: If set to true, only trades where the buy **and** sell delivery areas exactly match `delivery_area_buy` and `delivery_area_sell` will be returned. Otherwise, trades where the buy **or** sell delivery areas match `delivery_area_buy` or `delivery_area_sell` will be returned.
        :type delivery_area_match_exact: bool
        :param contract_ids:
        :type contract_ids: List[str]
        :param products:
        :type products: List[str]
        :param execution_from_offset_minutes: Excludes trades that were executed before `delivery_period_start - execution_from_offset_minutes`
        :type execution_from_offset_minutes: int
        :param execution_to_offset_minutes: Excludes trades that were executed after `delivery_period_start - execution_to_offset_minutes`
        :type execution_to_offset_minutes: int
        :param self_trades:
        :type self_trades: SelfTradeSelector
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_historic_trades_serialize(
            page_size=page_size,
            page_token=page_token,
            exchange=exchange,
            period_start=period_start,
            period_end=period_end,
            period_match_exact=period_match_exact,
            delivery_period_duration_minutes=delivery_period_duration_minutes,
            delivery_area_buy=delivery_area_buy,
            delivery_area_sell=delivery_area_sell,
            delivery_area_match_exact=delivery_area_match_exact,
            contract_ids=contract_ids,
            products=products,
            execution_from_offset_minutes=execution_from_offset_minutes,
            execution_to_offset_minutes=execution_to_offset_minutes,
            self_trades=self_trades,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "HistoricTradesResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_historic_trades_serialize(
        self,
        page_size,
        page_token,
        exchange,
        period_start,
        period_end,
        period_match_exact,
        delivery_period_duration_minutes,
        delivery_area_buy,
        delivery_area_sell,
        delivery_area_match_exact,
        contract_ids,
        products,
        execution_from_offset_minutes,
        execution_to_offset_minutes,
        self_trades,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'contract_ids': 'multi',
            'products': 'multi',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if page_size is not None:
            
            _query_params.append(('page_size', page_size))
            
        if page_token is not None:
            
            _query_params.append(('page_token', page_token))
            
        if exchange is not None:
            
            _query_params.append(('exchange', exchange.value))
            
        if period_start is not None:
            if isinstance(period_start, datetime):
                _query_params.append(
                    (
                        'period_start',
                        period_start.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('period_start', period_start))
            
        if period_end is not None:
            if isinstance(period_end, datetime):
                _query_params.append(
                    (
                        'period_end',
                        period_end.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('period_end', period_end))
            
        if period_match_exact is not None:
            
            _query_params.append(('period_match_exact', period_match_exact))
            
        if delivery_period_duration_minutes is not None:
            
            _query_params.append(('delivery_period_duration_minutes', delivery_period_duration_minutes))
            
        if delivery_area_buy is not None:
            
            _query_params.append(('delivery_area_buy', delivery_area_buy))
            
        if delivery_area_sell is not None:
            
            _query_params.append(('delivery_area_sell', delivery_area_sell))
            
        if delivery_area_match_exact is not None:
            
            _query_params.append(('delivery_area_match_exact', delivery_area_match_exact))
            
        if contract_ids is not None:
            
            _query_params.append(('contract_ids', contract_ids))
            
        if products is not None:
            
            _query_params.append(('products', products))
            
        if execution_from_offset_minutes is not None:
            
            _query_params.append(('execution_from_offset_minutes', execution_from_offset_minutes))
            
        if execution_to_offset_minutes is not None:
            
            _query_params.append(('execution_to_offset_minutes', execution_to_offset_minutes))
            
        if self_trades is not None:
            
            _query_params.append(('self_trades', self_trades.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/historic/publictrades',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



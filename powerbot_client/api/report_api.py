# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import date
from pydantic import Field, StrictBool, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from powerbot_client.models.report import Report
from powerbot_client.models.schedule_format import ScheduleFormat
from powerbot_client.models.text_matching_mode import TextMatchingMode

from powerbot_client.api_client import ApiClient, RequestSerialized
from powerbot_client.api_response import ApiResponse
from powerbot_client.rest import RESTResponseType


class ReportApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def get_report_csv_for_period(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report is for (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report is for (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        column_separator: Optional[StrictStr] = None,
        comma_separator: Optional[StrictStr] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Create CSV trading report

        Creates a detailed trading report in CSV format for a delivery area and a given delivery period. However, as the CSV format is two-dimensional, this report delivers less data compared to the regular report method.  As the generation of the report requires a lot of calculations, please use wisely. The maximum period you can request is limited to 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will thus not show up, if you request data from more than one portfolio. The report can use filters for clOrdrId and txt, which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report is for (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report is for (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param column_separator:
        :type column_separator: str
        :param comma_separator:
        :type comma_separator: str
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_csv_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            column_separator=column_separator,
            comma_separator=comma_separator,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_report_csv_for_period_with_http_info(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report is for (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report is for (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        column_separator: Optional[StrictStr] = None,
        comma_separator: Optional[StrictStr] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Create CSV trading report

        Creates a detailed trading report in CSV format for a delivery area and a given delivery period. However, as the CSV format is two-dimensional, this report delivers less data compared to the regular report method.  As the generation of the report requires a lot of calculations, please use wisely. The maximum period you can request is limited to 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will thus not show up, if you request data from more than one portfolio. The report can use filters for clOrdrId and txt, which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report is for (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report is for (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param column_separator:
        :type column_separator: str
        :param comma_separator:
        :type comma_separator: str
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_csv_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            column_separator=column_separator,
            comma_separator=comma_separator,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_report_csv_for_period_without_preload_content(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report is for (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report is for (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        column_separator: Optional[StrictStr] = None,
        comma_separator: Optional[StrictStr] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create CSV trading report

        Creates a detailed trading report in CSV format for a delivery area and a given delivery period. However, as the CSV format is two-dimensional, this report delivers less data compared to the regular report method.  As the generation of the report requires a lot of calculations, please use wisely. The maximum period you can request is limited to 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will thus not show up, if you request data from more than one portfolio. The report can use filters for clOrdrId and txt, which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report is for (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report is for (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param cl_ordr_id: Show only those trades related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Show only those trades related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param column_separator:
        :type column_separator: str
        :param comma_separator:
        :type comma_separator: str
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_csv_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            column_separator=column_separator,
            comma_separator=comma_separator,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_report_csv_for_period_serialize(
        self,
        delivery_area,
        delivery_day_from,
        delivery_day_to,
        portfolio_id,
        cl_ordr_id,
        txt,
        column_separator,
        comma_separator,
        txt_matching_mode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if delivery_area is not None:
            _path_params['delivery_area'] = delivery_area
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if delivery_day_from is not None:
            if isinstance(delivery_day_from, date):
                _query_params.append(
                    (
                        'delivery_day_from',
                        delivery_day_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_day_from', delivery_day_from))
            
        if delivery_day_to is not None:
            if isinstance(delivery_day_to, date):
                _query_params.append(
                    (
                        'delivery_day_to',
                        delivery_day_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_day_to', delivery_day_to))
            
        if cl_ordr_id is not None:
            
            _query_params.append(('clOrdrId', cl_ordr_id))
            
        if txt is not None:
            
            _query_params.append(('txt', txt))
            
        if column_separator is not None:
            
            _query_params.append(('column_separator', column_separator))
            
        if comma_separator is not None:
            
            _query_params.append(('comma_separator', comma_separator))
            
        if txt_matching_mode is not None:
            
            _query_params.append(('txt_matching_mode', txt_matching_mode.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'text/csv'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/report/{delivery_area}/csv',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_report_for_period(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report starts (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report ends (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        delivery_day_from_starting_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The starting hour of the report (0 = midnight)")] = None,
        delivery_day_to_ending_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The ending hour of the report (0 = midnight)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        with_trades: Optional[StrictBool] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> Report:
        """Create JSON trading report

        Creates a detailed trading report for a delivery area and a given delivery period, which contains all relevant information.  As the generation of the report requires a lot of calculations, please use wisely. The time period you can request is limited to 48 hours at once going back a maximum of 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will therefore not show up, if you request data from more than one portfolio. Optionally, the report can include the trades for the portfolio(s) that have a delivery period within the report period. In addition, the report can use filters for 'clOrdrId' and 'txt', which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report starts (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report ends (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param delivery_day_from_starting_hour: The starting hour of the report (0 = midnight)
        :type delivery_day_from_starting_hour: int
        :param delivery_day_to_ending_hour: The ending hour of the report (0 = midnight)
        :type delivery_day_to_ending_hour: int
        :param cl_ordr_id: Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param with_trades:
        :type with_trades: bool
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            delivery_day_from_starting_hour=delivery_day_from_starting_hour,
            delivery_day_to_ending_hour=delivery_day_to_ending_hour,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            with_trades=with_trades,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Report",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_report_for_period_with_http_info(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report starts (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report ends (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        delivery_day_from_starting_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The starting hour of the report (0 = midnight)")] = None,
        delivery_day_to_ending_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The ending hour of the report (0 = midnight)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        with_trades: Optional[StrictBool] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[Report]:
        """Create JSON trading report

        Creates a detailed trading report for a delivery area and a given delivery period, which contains all relevant information.  As the generation of the report requires a lot of calculations, please use wisely. The time period you can request is limited to 48 hours at once going back a maximum of 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will therefore not show up, if you request data from more than one portfolio. Optionally, the report can include the trades for the portfolio(s) that have a delivery period within the report period. In addition, the report can use filters for 'clOrdrId' and 'txt', which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report starts (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report ends (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param delivery_day_from_starting_hour: The starting hour of the report (0 = midnight)
        :type delivery_day_from_starting_hour: int
        :param delivery_day_to_ending_hour: The ending hour of the report (0 = midnight)
        :type delivery_day_to_ending_hour: int
        :param cl_ordr_id: Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param with_trades:
        :type with_trades: bool
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            delivery_day_from_starting_hour=delivery_day_from_starting_hour,
            delivery_day_to_ending_hour=delivery_day_to_ending_hour,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            with_trades=with_trades,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Report",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_report_for_period_without_preload_content(
        self,
        delivery_area: Annotated[StrictStr, Field(description="The EIC of the delivery area")],
        delivery_day_from: Annotated[date, Field(description="The day the report starts (example \"2018-10-23\")")],
        delivery_day_to: Annotated[date, Field(description="The day the report ends (example \"2018-10-30\")")],
        portfolio_id: Optional[List[StrictStr]] = None,
        delivery_day_from_starting_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The starting hour of the report (0 = midnight)")] = None,
        delivery_day_to_ending_hour: Annotated[Optional[Annotated[int, Field(le=23, strict=True, ge=0)]], Field(description="The ending hour of the report (0 = midnight)")] = None,
        cl_ordr_id: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order")] = None,
        txt: Annotated[Optional[StrictStr], Field(description="Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point")] = None,
        with_trades: Optional[StrictBool] = None,
        txt_matching_mode: Optional[TextMatchingMode] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create JSON trading report

        Creates a detailed trading report for a delivery area and a given delivery period, which contains all relevant information.  As the generation of the report requires a lot of calculations, please use wisely. The time period you can request is limited to 48 hours at once going back a maximum of 31 days. The request retrieves an array of portfolios and can thus deliver data for one or more portfolios at the same time. However, some data (e.g. positions) cannot be aggregated for portfolios and will therefore not show up, if you request data from more than one portfolio. Optionally, the report can include the trades for the portfolio(s) that have a delivery period within the report period. In addition, the report can use filters for 'clOrdrId' and 'txt', which means that only trades for which the filter is valid are included in the report.

        :param delivery_area: The EIC of the delivery area (required)
        :type delivery_area: str
        :param delivery_day_from: The day the report starts (example \"2018-10-23\") (required)
        :type delivery_day_from: date
        :param delivery_day_to: The day the report ends (example \"2018-10-30\") (required)
        :type delivery_day_to: date
        :param portfolio_id:
        :type portfolio_id: List[str]
        :param delivery_day_from_starting_hour: The starting hour of the report (0 = midnight)
        :type delivery_day_from_starting_hour: int
        :param delivery_day_to_ending_hour: The ending hour of the report (0 = midnight)
        :type delivery_day_to_ending_hour: int
        :param cl_ordr_id: Use only trades in the calculation of the report, which are related to orders with a specific 'client order id' (something like 'your reference' which you can submit) together with an order
        :type cl_ordr_id: str
        :param txt: Use only trades in the calculation of the report, which are related to orders with a specific 'custom text'. Similar to the clOrdrId, you can submit a string inside the 'txt' attribute of an order which helps you to identify trades originating from a specific order at a later point
        :type txt: str
        :param with_trades:
        :type with_trades: bool
        :param txt_matching_mode:
        :type txt_matching_mode: TextMatchingMode
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_report_for_period_serialize(
            delivery_area=delivery_area,
            delivery_day_from=delivery_day_from,
            delivery_day_to=delivery_day_to,
            portfolio_id=portfolio_id,
            delivery_day_from_starting_hour=delivery_day_from_starting_hour,
            delivery_day_to_ending_hour=delivery_day_to_ending_hour,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            with_trades=with_trades,
            txt_matching_mode=txt_matching_mode,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Report",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_report_for_period_serialize(
        self,
        delivery_area,
        delivery_day_from,
        delivery_day_to,
        portfolio_id,
        delivery_day_from_starting_hour,
        delivery_day_to_ending_hour,
        cl_ordr_id,
        txt,
        with_trades,
        txt_matching_mode,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if delivery_area is not None:
            _path_params['delivery_area'] = delivery_area
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if delivery_day_from is not None:
            if isinstance(delivery_day_from, date):
                _query_params.append(
                    (
                        'delivery_day_from',
                        delivery_day_from.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_day_from', delivery_day_from))
            
        if delivery_day_to is not None:
            if isinstance(delivery_day_to, date):
                _query_params.append(
                    (
                        'delivery_day_to',
                        delivery_day_to.strftime(
                            self.api_client.configuration.date_format
                        )
                    )
                )
            else:
                _query_params.append(('delivery_day_to', delivery_day_to))
            
        if delivery_day_from_starting_hour is not None:
            
            _query_params.append(('delivery_day_from_starting_hour', delivery_day_from_starting_hour))
            
        if delivery_day_to_ending_hour is not None:
            
            _query_params.append(('delivery_day_to_ending_hour', delivery_day_to_ending_hour))
            
        if cl_ordr_id is not None:
            
            _query_params.append(('clOrdrId', cl_ordr_id))
            
        if txt is not None:
            
            _query_params.append(('txt', txt))
            
        if with_trades is not None:
            
            _query_params.append(('with_trades', with_trades))
            
        if txt_matching_mode is not None:
            
            _query_params.append(('txt_matching_mode', txt_matching_mode.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/report/{delivery_area}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_schedule_xml(
        self,
        delivery_area: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the delivery area.")],
        delivery_day: Annotated[date, Field(description="The day the schedule is for.")],
        member_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange member.")],
        exchange_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange.")],
        receiver_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="Receiver EIC")],
        process_type: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Process Type Code")],
        sender_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Sender Role Code")],
        receiver_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Receiver Role Code")],
        schedule_format: Optional[ScheduleFormat] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> str:
        """Create Schedule XML

        Create a delivery area internal schedule XML file for the nomination toward the TSO. Supported formats are ESS (v2.3) and CIM (v5.2), only including the schedule between the exchange member and the member. The revision will be increased with every request performed. You need to provide the EIC of the exchange member as well as the EIC of the exchange.  For a detailed documentation and example values for different countries, please refer to the [Knowledge Base](https://docs.powerbot-trading.com/docs/features/nomination-schedules/).

        :param delivery_area: The EIC of the delivery area. (required)
        :type delivery_area: str
        :param delivery_day: The day the schedule is for. (required)
        :type delivery_day: date
        :param member_eic: The EIC of the exchange member. (required)
        :type member_eic: str
        :param exchange_eic: The EIC of the exchange. (required)
        :type exchange_eic: str
        :param receiver_eic: Receiver EIC (required)
        :type receiver_eic: str
        :param process_type: Process Type Code (required)
        :type process_type: str
        :param sender_role: Sender Role Code (required)
        :type sender_role: str
        :param receiver_role: Receiver Role Code (required)
        :type receiver_role: str
        :param schedule_format:
        :type schedule_format: ScheduleFormat
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_schedule_xml_serialize(
            delivery_area=delivery_area,
            delivery_day=delivery_day,
            member_eic=member_eic,
            exchange_eic=exchange_eic,
            receiver_eic=receiver_eic,
            process_type=process_type,
            sender_role=sender_role,
            receiver_role=receiver_role,
            schedule_format=schedule_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_schedule_xml_with_http_info(
        self,
        delivery_area: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the delivery area.")],
        delivery_day: Annotated[date, Field(description="The day the schedule is for.")],
        member_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange member.")],
        exchange_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange.")],
        receiver_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="Receiver EIC")],
        process_type: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Process Type Code")],
        sender_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Sender Role Code")],
        receiver_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Receiver Role Code")],
        schedule_format: Optional[ScheduleFormat] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[str]:
        """Create Schedule XML

        Create a delivery area internal schedule XML file for the nomination toward the TSO. Supported formats are ESS (v2.3) and CIM (v5.2), only including the schedule between the exchange member and the member. The revision will be increased with every request performed. You need to provide the EIC of the exchange member as well as the EIC of the exchange.  For a detailed documentation and example values for different countries, please refer to the [Knowledge Base](https://docs.powerbot-trading.com/docs/features/nomination-schedules/).

        :param delivery_area: The EIC of the delivery area. (required)
        :type delivery_area: str
        :param delivery_day: The day the schedule is for. (required)
        :type delivery_day: date
        :param member_eic: The EIC of the exchange member. (required)
        :type member_eic: str
        :param exchange_eic: The EIC of the exchange. (required)
        :type exchange_eic: str
        :param receiver_eic: Receiver EIC (required)
        :type receiver_eic: str
        :param process_type: Process Type Code (required)
        :type process_type: str
        :param sender_role: Sender Role Code (required)
        :type sender_role: str
        :param receiver_role: Receiver Role Code (required)
        :type receiver_role: str
        :param schedule_format:
        :type schedule_format: ScheduleFormat
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_schedule_xml_serialize(
            delivery_area=delivery_area,
            delivery_day=delivery_day,
            member_eic=member_eic,
            exchange_eic=exchange_eic,
            receiver_eic=receiver_eic,
            process_type=process_type,
            sender_role=sender_role,
            receiver_role=receiver_role,
            schedule_format=schedule_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_schedule_xml_without_preload_content(
        self,
        delivery_area: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the delivery area.")],
        delivery_day: Annotated[date, Field(description="The day the schedule is for.")],
        member_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange member.")],
        exchange_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="The EIC of the exchange.")],
        receiver_eic: Annotated[str, Field(min_length=16, strict=True, max_length=16, description="Receiver EIC")],
        process_type: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Process Type Code")],
        sender_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Sender Role Code")],
        receiver_role: Annotated[str, Field(min_length=3, strict=True, max_length=3, description="Receiver Role Code")],
        schedule_format: Optional[ScheduleFormat] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create Schedule XML

        Create a delivery area internal schedule XML file for the nomination toward the TSO. Supported formats are ESS (v2.3) and CIM (v5.2), only including the schedule between the exchange member and the member. The revision will be increased with every request performed. You need to provide the EIC of the exchange member as well as the EIC of the exchange.  For a detailed documentation and example values for different countries, please refer to the [Knowledge Base](https://docs.powerbot-trading.com/docs/features/nomination-schedules/).

        :param delivery_area: The EIC of the delivery area. (required)
        :type delivery_area: str
        :param delivery_day: The day the schedule is for. (required)
        :type delivery_day: date
        :param member_eic: The EIC of the exchange member. (required)
        :type member_eic: str
        :param exchange_eic: The EIC of the exchange. (required)
        :type exchange_eic: str
        :param receiver_eic: Receiver EIC (required)
        :type receiver_eic: str
        :param process_type: Process Type Code (required)
        :type process_type: str
        :param sender_role: Sender Role Code (required)
        :type sender_role: str
        :param receiver_role: Receiver Role Code (required)
        :type receiver_role: str
        :param schedule_format:
        :type schedule_format: ScheduleFormat
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_schedule_xml_serialize(
            delivery_area=delivery_area,
            delivery_day=delivery_day,
            member_eic=member_eic,
            exchange_eic=exchange_eic,
            receiver_eic=receiver_eic,
            process_type=process_type,
            sender_role=sender_role,
            receiver_role=receiver_role,
            schedule_format=schedule_format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_schedule_xml_serialize(
        self,
        delivery_area,
        delivery_day,
        member_eic,
        exchange_eic,
        receiver_eic,
        process_type,
        sender_role,
        receiver_role,
        schedule_format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if delivery_area is not None:
            _path_params['delivery_area'] = delivery_area
        if delivery_day is not None:
            _path_params['delivery_day'] = delivery_day
        # process the query parameters
        if member_eic is not None:
            
            _query_params.append(('member_eic', member_eic))
            
        if exchange_eic is not None:
            
            _query_params.append(('exchange_eic', exchange_eic))
            
        if receiver_eic is not None:
            
            _query_params.append(('receiver_eic', receiver_eic))
            
        if process_type is not None:
            
            _query_params.append(('process_type', process_type))
            
        if sender_role is not None:
            
            _query_params.append(('sender_role', sender_role))
            
        if receiver_role is not None:
            
            _query_params.append(('receiver_role', receiver_role))
            
        if schedule_format is not None:
            
            _query_params.append(('schedule_format', schedule_format.value))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/xml', 
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/schedule/{delivery_area}/{delivery_day}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



# coding: utf-8

"""
    PowerBot - Webservice for algotrading

    # TERMS AND CONDITIONS The PowerBot system provides B2B services for trading at intraday power markets. By using the PowerBot service, each user agrees to the terms and conditions of this licence: 1. The user confirms that they are familiar with the exchanges trading system and all relevant rules, is professionally qualified and in possession of a trading license for the relevant exchange. 2. The user will comply with the exchanges market rules (e.g. [EPEX Spot Market Rules](https://www.epexspot.com/en/downloads#rules-fees-processes) or [Nord Pool Market Rules](https://www.nordpoolgroup.com/trading/Rules-and-regulations/)) and will not endanger the exchange system at any time with heavy load from trading algorithms or by other use. 3. The user is aware of limits imposed by the exchange. 4. The user is solely liable for actions resulting from the use of PowerBot.   # INTRODUCTION PowerBot is a web-based software service enabling algorithmic trading on intraday power exchanges such as EPEX, Nord Pool, HUPX, BSP Southpool, TGE, OPCOM or ETPA. The service is straightforward to integrate in an existing software environment and provides a variety of programming interfaces for development of individual trading algorithms and software tools. Besides enabling fully automated intraday trading, it can be used to create tools for human traders providing relevant information and trading opportunities or can be integrated in existing software tools. For further details see https://www.powerbot-trading.com  ## Knowledge Base In addition to this API guide, please find the documentation at https://docs.powerbot-trading.com - the password will be provided by the PowerBot team. If not, please reach out to us at support@powerbot-trading.com  ## Endpoints The PowerBot service is available at the following REST endpoints:  | Instance      | Base URL for REST Endpoints                                      | |---------------|------------------------------------------------------------------| | EPEX          | https://staging.powerbot-trading.com/playground/epex/v2/api      | | Nord Pool     | https://staging.powerbot-trading.com/playground/nordpool/v2/api  | | HUPX          | https://staging.powerbot-trading.com/playground/hupx/v2/api      | | BSP Southpool | https://staging.powerbot-trading.com/playground/southpool/v2/api | | TGE           | https://staging.powerbot-trading.com/playground/tge/v2/api       | | IBEX          | https://staging.powerbot-trading.com/playground/ibex/v2/api      | | CROPEX        | https://staging.powerbot-trading.com/playground/cropex/v2/api    | | OPCOM         | https://staging.powerbot-trading.com/playground/opcom/v2/api     | | ETPA          | https://staging.powerbot-trading.com/playground/etpa/v2/api      | | BRM           | https://staging.powerbot-trading.com/playground/brm/v2/api       |  Access to endpoints is secured via an API Key, which needs to be passed as an \"api_key\" header in each request.   Notes on API Keys:  * API keys are specific to Test, Staging or Production.  * API keys are generated by the system administrator and need to be requested.  ## How to generate API clients (libraries) This OpenAPI specification can be used to generate API clients (programming libraries) for a wide range of programming languages using tools like [OpenAPI Generator](https://openapi-generator.tech/). A detailed guide can be found in the [knowledge base](https://docs.powerbot-trading.com/articles/getting-started/generating-clients/).  ## PowerBot Python client For Python, a ready-made client is also available on PyPI and can be downloaded locally via:  ```shell   pip install powerbot-client ```  ## Errors The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be in JSON format as follows:  ``` {   \"message\": \"... an error message ...\" } ```  ## Paging The API uses offset and limit parameters for paged operations. An X-Total-Count header is added to responses to indicate the total number of items in a paged response.  ## Cross-Origin Resource Sharing This API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/). This allows cross-domain communication from the browser. All responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.  ## API Rate Limiting The API limits the number of concurrent calls to 50 - when that limit is reached, the client will receive 503 http status codes (service unavailable) with the following text:  ``` {   \"message\": \"API rate limit exceeded\" } ``` Clients should ensure that they stay within the limit for concurrent API calls.    ## Additional code samples Additional information and code samples demonstrating the use of the API can be found at in our [knowledge base](https://docs.powerbot-trading.com/docs/programmatic-access/)

    The version of the OpenAPI document: 2.16.1
    Contact: office@powerbot-trading.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictInt, StrictStr
from typing import List, Optional
from typing_extensions import Annotated
from powerbot_client.models.execution_instruction import ExecutionInstruction
from powerbot_client.models.order_entry import OrderEntry
from powerbot_client.models.order_modify import OrderModify
from powerbot_client.models.order_modify_item import OrderModifyItem
from powerbot_client.models.own_order import OwnOrder
from powerbot_client.models.update_status import UpdateStatus

from powerbot_client.api_client import ApiClient, RequestSerialized
from powerbot_client.api_response import ApiResponse
from powerbot_client.rest import RESTResponseType


class OrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def add_orders(
        self,
        order: List[OrderEntry],
        exec_instruction: Optional[ExecutionInstruction] = None,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        include_errors: Annotated[Optional[StrictBool], Field(description="If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """Place multiple orders

        Allows you to place a list of orders at once. For each requested order, one response element is generated. In case of success, an order element for each order is returned, otherwise an error message is returned. If the placed orders interact with previously placed own orders, even in other portfolios, it also returns the changes made to these orders. For further details on order elements please see the description of POST /orders.  When sending a list of orders, the list needs to have execution instructions being either \"valid\" (default) or linked. Please be aware that each order needs to be valid, otherwise all orders are declined by the exchange system. Please see documentation for further details.  The header of the return element includes a property named \"X-Total-Internal-Trades\", which tells you the number of internal trades that were involved in this request, if cross-trades were executed as internal trades.  Note that the expected net position parameters should not be used in combination with block products.  Please note that the response of an order placement is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order placement and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order: (required)
        :type order: List[OrderEntry]
        :param exec_instruction:
        :type exec_instruction: ExecutionInstruction
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param include_errors: If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.
        :type include_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_orders_serialize(
            order=order,
            exec_instruction=exec_instruction,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            include_errors=include_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def add_orders_with_http_info(
        self,
        order: List[OrderEntry],
        exec_instruction: Optional[ExecutionInstruction] = None,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        include_errors: Annotated[Optional[StrictBool], Field(description="If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """Place multiple orders

        Allows you to place a list of orders at once. For each requested order, one response element is generated. In case of success, an order element for each order is returned, otherwise an error message is returned. If the placed orders interact with previously placed own orders, even in other portfolios, it also returns the changes made to these orders. For further details on order elements please see the description of POST /orders.  When sending a list of orders, the list needs to have execution instructions being either \"valid\" (default) or linked. Please be aware that each order needs to be valid, otherwise all orders are declined by the exchange system. Please see documentation for further details.  The header of the return element includes a property named \"X-Total-Internal-Trades\", which tells you the number of internal trades that were involved in this request, if cross-trades were executed as internal trades.  Note that the expected net position parameters should not be used in combination with block products.  Please note that the response of an order placement is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order placement and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order: (required)
        :type order: List[OrderEntry]
        :param exec_instruction:
        :type exec_instruction: ExecutionInstruction
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param include_errors: If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.
        :type include_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_orders_serialize(
            order=order,
            exec_instruction=exec_instruction,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            include_errors=include_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def add_orders_without_preload_content(
        self,
        order: List[OrderEntry],
        exec_instruction: Optional[ExecutionInstruction] = None,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        include_errors: Annotated[Optional[StrictBool], Field(description="If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Place multiple orders

        Allows you to place a list of orders at once. For each requested order, one response element is generated. In case of success, an order element for each order is returned, otherwise an error message is returned. If the placed orders interact with previously placed own orders, even in other portfolios, it also returns the changes made to these orders. For further details on order elements please see the description of POST /orders.  When sending a list of orders, the list needs to have execution instructions being either \"valid\" (default) or linked. Please be aware that each order needs to be valid, otherwise all orders are declined by the exchange system. Please see documentation for further details.  The header of the return element includes a property named \"X-Total-Internal-Trades\", which tells you the number of internal trades that were involved in this request, if cross-trades were executed as internal trades.  Note that the expected net position parameters should not be used in combination with block products.  Please note that the response of an order placement is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order placement and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order: (required)
        :type order: List[OrderEntry]
        :param exec_instruction:
        :type exec_instruction: ExecutionInstruction
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param include_errors: If this parameter is set to true, the response will contain orders that failed to be processed by the exchange, along with successfully placed orders. If set to false, only an error will be returned if any order fails. Please note that this parameter only effects the response and has no effect on how orders are treated by PowerBot or the exchange.
        :type include_errors: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._add_orders_serialize(
            order=order,
            exec_instruction=exec_instruction,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            include_errors=include_errors,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _add_orders_serialize(
        self,
        order,
        exec_instruction,
        internal_trading,
        fail_on_limit_violations,
        ignore_order_action_quota,
        include_errors,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'order': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if exec_instruction is not None:
            
            _query_params.append(('exec_instruction', exec_instruction.value))
            
        if internal_trading is not None:
            
            _query_params.append(('internal_trading', internal_trading))
            
        if fail_on_limit_violations is not None:
            
            _query_params.append(('fail_on_limit_violations', fail_on_limit_violations))
            
        if ignore_order_action_quota is not None:
            
            _query_params.append(('ignore_order_action_quota', ignore_order_action_quota))
            
        if include_errors is not None:
            
            _query_params.append(('include_errors', include_errors))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if order is not None:
            _body_params = order


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/orders/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def delete_orders(
        self,
        portfolio_id: List[StrictStr],
        delivery_areas: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """Delete all orders

        Allows you to delete all orders of a portfolio

        :param portfolio_id: (required)
        :type portfolio_id: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_orders_serialize(
            portfolio_id=portfolio_id,
            delivery_areas=delivery_areas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def delete_orders_with_http_info(
        self,
        portfolio_id: List[StrictStr],
        delivery_areas: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """Delete all orders

        Allows you to delete all orders of a portfolio

        :param portfolio_id: (required)
        :type portfolio_id: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_orders_serialize(
            portfolio_id=portfolio_id,
            delivery_areas=delivery_areas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def delete_orders_without_preload_content(
        self,
        portfolio_id: List[StrictStr],
        delivery_areas: Optional[List[StrictStr]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Delete all orders

        Allows you to delete all orders of a portfolio

        :param portfolio_id: (required)
        :type portfolio_id: List[str]
        :param delivery_areas:
        :type delivery_areas: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._delete_orders_serialize(
            portfolio_id=portfolio_id,
            delivery_areas=delivery_areas,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _delete_orders_serialize(
        self,
        portfolio_id,
        delivery_areas,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
            'delivery_areas': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if delivery_areas is not None:
            
            _query_params.append(('delivery_areas', delivery_areas))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_own_order_history(
        self,
        order_id: Annotated[StrictStr, Field(description="This id will be used to get all orders related.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """List all revisions of an order

        List all revisions of an order. This request keeps track of the complete order history regardless of changed IDs, as an order_id might change over time when certain modifications are applied. Therefore, querying an order_id includes all preceding IDs of the requested order.

        :param order_id: This id will be used to get all orders related. (required)
        :type order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_order_history_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_own_order_history_with_http_info(
        self,
        order_id: Annotated[StrictStr, Field(description="This id will be used to get all orders related.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """List all revisions of an order

        List all revisions of an order. This request keeps track of the complete order history regardless of changed IDs, as an order_id might change over time when certain modifications are applied. Therefore, querying an order_id includes all preceding IDs of the requested order.

        :param order_id: This id will be used to get all orders related. (required)
        :type order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_order_history_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_own_order_history_without_preload_content(
        self,
        order_id: Annotated[StrictStr, Field(description="This id will be used to get all orders related.")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List all revisions of an order

        List all revisions of an order. This request keeps track of the complete order history regardless of changed IDs, as an order_id might change over time when certain modifications are applied. Therefore, querying an order_id includes all preceding IDs of the requested order.

        :param order_id: This id will be used to get all orders related. (required)
        :type order_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_order_history_serialize(
            order_id=order_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_own_order_history_serialize(
        self,
        order_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if order_id is not None:
            _path_params['order_id'] = order_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orders/{order_id}/history',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def get_own_orders(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.")] = None,
        contract_ids: Annotated[Optional[List[StrictStr]], Field(description="Show only those orders related to a specific contract")] = None,
        order_ids: Optional[List[StrictStr]] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Returns only those orders which are active")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The EIC of the delivery area")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange user code")] = None,
        cl_ordr_id: Optional[StrictStr] = None,
        txt: Optional[StrictStr] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Please use contract_ids instead! If contract_ids are set, this field will be ignored!")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """List own orders

        Retrieves a list of all your own orders at the exchange for an array of portfolios. Allows you to filter your orders for delivery area and/or contract_id. The return element will provide all the order_ids, the contracts the orders belong to, as well as an action status, which determines the current status of the order (added, partly executed, fully executed, etc).  Please use the action status of orders to determine if you have done trades, as trade reporting from the exchange is sometimes slightly delayed.  The parameter active_only will only list orders, which are active. The filter user_code allows you to filter orders created by a specific exchange user. Please be aware that this method uses pagination. Shadow orders can only be retrieved as long as they are active.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.
        :type limit: int
        :param contract_ids: Show only those orders related to a specific contract
        :type contract_ids: List[str]
        :param order_ids:
        :type order_ids: List[str]
        :param active_only: Returns only those orders which are active
        :type active_only: bool
        :param delivery_area: The EIC of the delivery area
        :type delivery_area: str
        :param user_code: the exchange user code
        :type user_code: str
        :param cl_ordr_id:
        :type cl_ordr_id: str
        :param txt:
        :type txt: str
        :param contract_id: Please use contract_ids instead! If contract_ids are set, this field will be ignored!
        :type contract_id: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_orders_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            contract_ids=contract_ids,
            order_ids=order_ids,
            active_only=active_only,
            delivery_area=delivery_area,
            user_code=user_code,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def get_own_orders_with_http_info(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.")] = None,
        contract_ids: Annotated[Optional[List[StrictStr]], Field(description="Show only those orders related to a specific contract")] = None,
        order_ids: Optional[List[StrictStr]] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Returns only those orders which are active")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The EIC of the delivery area")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange user code")] = None,
        cl_ordr_id: Optional[StrictStr] = None,
        txt: Optional[StrictStr] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Please use contract_ids instead! If contract_ids are set, this field will be ignored!")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """List own orders

        Retrieves a list of all your own orders at the exchange for an array of portfolios. Allows you to filter your orders for delivery area and/or contract_id. The return element will provide all the order_ids, the contracts the orders belong to, as well as an action status, which determines the current status of the order (added, partly executed, fully executed, etc).  Please use the action status of orders to determine if you have done trades, as trade reporting from the exchange is sometimes slightly delayed.  The parameter active_only will only list orders, which are active. The filter user_code allows you to filter orders created by a specific exchange user. Please be aware that this method uses pagination. Shadow orders can only be retrieved as long as they are active.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.
        :type limit: int
        :param contract_ids: Show only those orders related to a specific contract
        :type contract_ids: List[str]
        :param order_ids:
        :type order_ids: List[str]
        :param active_only: Returns only those orders which are active
        :type active_only: bool
        :param delivery_area: The EIC of the delivery area
        :type delivery_area: str
        :param user_code: the exchange user code
        :type user_code: str
        :param cl_ordr_id:
        :type cl_ordr_id: str
        :param txt:
        :type txt: str
        :param contract_id: Please use contract_ids instead! If contract_ids are set, this field will be ignored!
        :type contract_id: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_orders_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            contract_ids=contract_ids,
            order_ids=order_ids,
            active_only=active_only,
            delivery_area=delivery_area,
            user_code=user_code,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def get_own_orders_without_preload_content(
        self,
        portfolio_id: Optional[List[StrictStr]] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Offset when loading a list of items")] = None,
        limit: Annotated[Optional[Annotated[int, Field(le=500, strict=True, ge=1)]], Field(description="Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.")] = None,
        contract_ids: Annotated[Optional[List[StrictStr]], Field(description="Show only those orders related to a specific contract")] = None,
        order_ids: Optional[List[StrictStr]] = None,
        active_only: Annotated[Optional[StrictBool], Field(description="Returns only those orders which are active")] = None,
        delivery_area: Annotated[Optional[StrictStr], Field(description="The EIC of the delivery area")] = None,
        user_code: Annotated[Optional[StrictStr], Field(description="the exchange user code")] = None,
        cl_ordr_id: Optional[StrictStr] = None,
        txt: Optional[StrictStr] = None,
        contract_id: Annotated[Optional[List[StrictStr]], Field(description="Please use contract_ids instead! If contract_ids are set, this field will be ignored!")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List own orders

        Retrieves a list of all your own orders at the exchange for an array of portfolios. Allows you to filter your orders for delivery area and/or contract_id. The return element will provide all the order_ids, the contracts the orders belong to, as well as an action status, which determines the current status of the order (added, partly executed, fully executed, etc).  Please use the action status of orders to determine if you have done trades, as trade reporting from the exchange is sometimes slightly delayed.  The parameter active_only will only list orders, which are active. The filter user_code allows you to filter orders created by a specific exchange user. Please be aware that this method uses pagination. Shadow orders can only be retrieved as long as they are active.

        :param portfolio_id:
        :type portfolio_id: List[str]
        :param offset: Offset when loading a list of items
        :type offset: int
        :param limit: Limits the number of loaded orders. If `active_only` is set to `true`, no limits are imposed (all matching orders are returned). If set to `false` the limit defaults to 150.
        :type limit: int
        :param contract_ids: Show only those orders related to a specific contract
        :type contract_ids: List[str]
        :param order_ids:
        :type order_ids: List[str]
        :param active_only: Returns only those orders which are active
        :type active_only: bool
        :param delivery_area: The EIC of the delivery area
        :type delivery_area: str
        :param user_code: the exchange user code
        :type user_code: str
        :param cl_ordr_id:
        :type cl_ordr_id: str
        :param txt:
        :type txt: str
        :param contract_id: Please use contract_ids instead! If contract_ids are set, this field will be ignored!
        :type contract_id: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._get_own_orders_serialize(
            portfolio_id=portfolio_id,
            offset=offset,
            limit=limit,
            contract_ids=contract_ids,
            order_ids=order_ids,
            active_only=active_only,
            delivery_area=delivery_area,
            user_code=user_code,
            cl_ordr_id=cl_ordr_id,
            txt=txt,
            contract_id=contract_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _get_own_orders_serialize(
        self,
        portfolio_id,
        offset,
        limit,
        contract_ids,
        order_ids,
        active_only,
        delivery_area,
        user_code,
        cl_ordr_id,
        txt,
        contract_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'portfolio_id': 'csv',
            'contract_ids': 'csv',
            'order_ids': 'csv',
            'contract_id': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if portfolio_id is not None:
            
            _query_params.append(('portfolio_id', portfolio_id))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if contract_ids is not None:
            
            _query_params.append(('contract_ids', contract_ids))
            
        if order_ids is not None:
            
            _query_params.append(('order_ids', order_ids))
            
        if active_only is not None:
            
            _query_params.append(('active_only', active_only))
            
        if delivery_area is not None:
            
            _query_params.append(('delivery_area', delivery_area))
            
        if user_code is not None:
            
            _query_params.append(('user_code', user_code))
            
        if cl_ordr_id is not None:
            
            _query_params.append(('clOrdrId', cl_ordr_id))
            
        if txt is not None:
            
            _query_params.append(('txt', txt))
            
        if contract_id is not None:
            
            _query_params.append(('contract_id', contract_id))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/orders',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def modify_order(
        self,
        order_id: Annotated[StrictStr, Field(description="the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification.")],
        revision_no: Annotated[StrictInt, Field(description="The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error.")],
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[OrderModify] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """(Deprecated) Modify single order

        DEPRECATED: please use `PUT /orders/list`.  Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order_id: the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification. (required)
        :type order_id: str
        :param revision_no: The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error. (required)
        :type revision_no: int
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: OrderModify
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /order/{order_id}/{revision_no} is deprecated.", DeprecationWarning)

        _param = self._modify_order_serialize(
            order_id=order_id,
            revision_no=revision_no,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def modify_order_with_http_info(
        self,
        order_id: Annotated[StrictStr, Field(description="the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification.")],
        revision_no: Annotated[StrictInt, Field(description="The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error.")],
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[OrderModify] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """(Deprecated) Modify single order

        DEPRECATED: please use `PUT /orders/list`.  Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order_id: the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification. (required)
        :type order_id: str
        :param revision_no: The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error. (required)
        :type revision_no: int
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: OrderModify
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /order/{order_id}/{revision_no} is deprecated.", DeprecationWarning)

        _param = self._modify_order_serialize(
            order_id=order_id,
            revision_no=revision_no,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def modify_order_without_preload_content(
        self,
        order_id: Annotated[StrictStr, Field(description="the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification.")],
        revision_no: Annotated[StrictInt, Field(description="The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error.")],
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[OrderModify] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """(Deprecated) Modify single order

        DEPRECATED: please use `PUT /orders/list`.  Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param order_id: the unique order_id of the order which should be modified. **Heads up!** The order_id can change after the modification. (required)
        :type order_id: str
        :param revision_no: The revision of the order which should be modified **Heads up!** If the revision does not match with the order's current revision in the exchange backend the modification will cause an error. (required)
        :type revision_no: int
        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: OrderModify
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501
        warnings.warn("PUT /order/{order_id}/{revision_no} is deprecated.", DeprecationWarning)

        _param = self._modify_order_serialize(
            order_id=order_id,
            revision_no=revision_no,
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _modify_order_serialize(
        self,
        order_id,
        revision_no,
        internal_trading,
        fail_on_limit_violations,
        ignore_order_action_quota,
        modifications,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if order_id is not None:
            _path_params['order_id'] = order_id
        if revision_no is not None:
            _path_params['revision_no'] = revision_no
        # process the query parameters
        if internal_trading is not None:
            
            _query_params.append(('internal_trading', internal_trading))
            
        if fail_on_limit_violations is not None:
            
            _query_params.append(('fail_on_limit_violations', fail_on_limit_violations))
            
        if ignore_order_action_quota is not None:
            
            _query_params.append(('ignore_order_action_quota', ignore_order_action_quota))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if modifications is not None:
            _body_params = modifications


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/order/{order_id}/{revision_no}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def modify_orders(
        self,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[List[OrderModifyItem]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[OwnOrder]:
        """Modify multiple orders

        Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order with a new id is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: List[OrderModifyItem]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._modify_orders_serialize(
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def modify_orders_with_http_info(
        self,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[List[OrderModifyItem]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[OwnOrder]]:
        """Modify multiple orders

        Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order with a new id is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: List[OrderModifyItem]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._modify_orders_serialize(
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def modify_orders_without_preload_content(
        self,
        internal_trading: Annotated[Optional[StrictBool], Field(description="If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.")] = None,
        fail_on_limit_violations: Annotated[Optional[StrictBool], Field(description="If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.")] = None,
        ignore_order_action_quota: Annotated[Optional[StrictBool], Field(description="The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.")] = None,
        modifications: Optional[List[OrderModifyItem]] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Modify multiple orders

        Allows you to change, activate or deactivate an existing order at the market. In order to change an order, you need to provide the order_id as well as the latest revision of the order (available via GET /orders), in order to prevent changing an order that has been changed (e.g. partly executed) since you last observed it. If the revision number is incorrect, the modification will be declined by the exchange system.  Note that some modifications do not update the order directly (e.g price/quantity changes), depending on the exchange. In this case, a new order with a new id is created with the modification and the original order is deleted.  Please note that the response of an order modification is not consistent for different exchanges and different product types. Resulting from this, a user should never rely on a particular response of any order modification and always validate actions via other requests (e.g. GET/trades, GET/internal-trades, GET/orders).

        :param internal_trading: If set to true, cross-trade recognition will be performed before submitting the orders to the exchange. Set it to false if you don't want internal trading. If left blank, default market options will apply. If internal trading is set to \"inactive\" in the market options, an error is returned when sending orders with \"internal_trading\" set to true.  **Note:** There is no cross-trade recognition for user defined block orders, linked orders and for iceberg orders with a peak-price-delta that is not equal to 0.
        :type internal_trading: bool
        :param fail_on_limit_violations: If set to true, a single limit violation will prevent sending all orders to the exchange. If set to false, orders for contracts which cause a violation won't be sent, orders which do not cause a violation will be sent to the exchange. If not set, true is taken as default value.  Please note that this only covers limit violations on limits defined by the system. Violating limits defined at exchange level on one order will not prevent correct orders from being sent to the exchange. In this case, this parameter does not have any effect.
        :type fail_on_limit_violations: bool
        :param ignore_order_action_quota: The behavior on this parameter is depending on the current exchange. * M7 (HUPX, SouthPool, TGE, EPEX, SEMO, OPCOM): If set to true, the exchange OMT limit can be bypassed, as long as the current load is under L2. * Nordpool: If set to true, default exchange throttling mechanism is bypassed by PowerBot. Nordpool may still reject the request.
        :type ignore_order_action_quota: bool
        :param modifications:
        :type modifications: List[OrderModifyItem]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._modify_orders_serialize(
            internal_trading=internal_trading,
            fail_on_limit_violations=fail_on_limit_violations,
            ignore_order_action_quota=ignore_order_action_quota,
            modifications=modifications,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[OwnOrder]",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _modify_orders_serialize(
        self,
        internal_trading,
        fail_on_limit_violations,
        ignore_order_action_quota,
        modifications,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
            'modifications': '',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if internal_trading is not None:
            
            _query_params.append(('internal_trading', internal_trading))
            
        if fail_on_limit_violations is not None:
            
            _query_params.append(('fail_on_limit_violations', fail_on_limit_violations))
            
        if ignore_order_action_quota is not None:
            
            _query_params.append(('ignore_order_action_quota', ignore_order_action_quota))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if modifications is not None:
            _body_params = modifications


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orders/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def update_status(
        self,
        orders: UpdateStatus,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Change status of all orders

        Modifies the status of all your orders at the exchange at once. Please be aware that this is an exchange backend request, which would modify the status of all orders at the exchange (including other tenants and portfolios) and can thus only be performed with api keys that have access to all portfolios within the system.

        :param orders: (required)
        :type orders: UpdateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_status_serialize(
            orders=orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def update_status_with_http_info(
        self,
        orders: UpdateStatus,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Change status of all orders

        Modifies the status of all your orders at the exchange at once. Please be aware that this is an exchange backend request, which would modify the status of all orders at the exchange (including other tenants and portfolios) and can thus only be performed with api keys that have access to all portfolios within the system.

        :param orders: (required)
        :type orders: UpdateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_status_serialize(
            orders=orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def update_status_without_preload_content(
        self,
        orders: UpdateStatus,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Change status of all orders

        Modifies the status of all your orders at the exchange at once. Please be aware that this is an exchange backend request, which would modify the status of all orders at the exchange (including other tenants and portfolios) and can thus only be performed with api keys that have access to all portfolios within the system.

        :param orders: (required)
        :type orders: UpdateStatus
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._update_status_serialize(
            orders=orders,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '204': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _update_status_serialize(
        self,
        orders,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if orders is not None:
            _body_params = orders


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_key_security'
        ]

        return self.api_client.param_serialize(
            method='PUT',
            resource_path='/orders/status',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


